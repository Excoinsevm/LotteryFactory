{
	"compiler": {
		"version": "0.6.6+commit.6c089d02"
	},
	"language": "Solidity",
	"output": {
		"abi": [
			{
				"inputs": [
					{
						"internalType": "address",
						"name": "_vrfCoordinator",
						"type": "address"
					},
					{
						"internalType": "address",
						"name": "_link",
						"type": "address"
					}
				],
				"stateMutability": "nonpayable",
				"type": "constructor"
			},
			{
				"inputs": [
					{
						"internalType": "bytes32",
						"name": "",
						"type": "bytes32"
					}
				],
				"name": "nonces",
				"outputs": [
					{
						"internalType": "uint256",
						"name": "",
						"type": "uint256"
					}
				],
				"stateMutability": "view",
				"type": "function"
			},
			{
				"inputs": [
					{
						"internalType": "bytes32",
						"name": "requestId",
						"type": "bytes32"
					},
					{
						"internalType": "uint256",
						"name": "randomness",
						"type": "uint256"
					}
				],
				"name": "rawFulfillRandomness",
				"outputs": [],
				"stateMutability": "nonpayable",
				"type": "function"
			},
			{
				"inputs": [
					{
						"internalType": "bytes32",
						"name": "_keyHash",
						"type": "bytes32"
					},
					{
						"internalType": "uint256",
						"name": "_fee",
						"type": "uint256"
					},
					{
						"internalType": "uint256",
						"name": "_seed",
						"type": "uint256"
					}
				],
				"name": "requestRandomness",
				"outputs": [
					{
						"internalType": "bytes32",
						"name": "requestId",
						"type": "bytes32"
					}
				],
				"stateMutability": "nonpayable",
				"type": "function"
			}
		],
		"devdoc": {
			"methods": {
				"requestRandomness(bytes32,uint256,uint256)": {
					"details": "See \"SECURITY CONSIDERATIONS\" above for more information on _seed. The fulfillRandomness method receives the output, once it's providedby the Oracle, and verified by the vrfCoordinator. The _keyHash must already be registered with the VRFCoordinator, andthe _fee must exceed the fee specified during registration of the_keyHash. The returned requestId can be used to distinguish responses to *concurrent requests. It is passed as the first argument tofulfillRandomness.",
					"params": {
						"_fee": "The amount of LINK to send with the request",
						"_keyHash": "ID of public key against which randomness is generated",
						"_seed": "seed mixed into the input of the VRF "
					},
					"returns": {
						"requestId": "unique ID for this request "
					}
				}
			}
		},
		"userdoc": {
			"methods": {
				"requestRandomness(bytes32,uint256,uint256)": {
					"notice": "requestRandomness initiates a request for VRF output given _seed "
				}
			}
		}
	},
	"settings": {
		"compilationTarget": {
			"VRFCoordinator/OneFileContract.sol": "VRFConsumerBase"
		},
		"evmVersion": "istanbul",
		"libraries": {},
		"metadata": {
			"bytecodeHash": "ipfs"
		},
		"optimizer": {
			"enabled": true,
			"runs": 200
		},
		"remappings": []
	},
	"sources": {
		"VRFCoordinator/OneFileContract.sol": {
			"keccak256": "0x7c73907f6bc35ed92d2df5eef055effc96196fe4ef5fdc553cda61747af163cc",
			"urls": [
				"bzz-raw://94cbb44159f9b545bba556c63d1315133eb9572743453dc93bc32fd55160204b",
				"dweb:/ipfs/QmNvD5G4qdNgbLSx4S5hXJA9Msv6c9inEEK3vbtgH2FSa8"
			]
		}
	},
	"version": 1
}