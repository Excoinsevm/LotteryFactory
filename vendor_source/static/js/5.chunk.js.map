{"version":3,"sources":["hooks/useTokenBalance.ts","components/PageSection/svg/CurvedSvg.tsx","components/PageSection/CurvedDivider.tsx","components/PageSection/index.tsx","hooks/useTheme.ts","state/lottery/hooks.ts","views/Lottery/hooks/useGetNextLotteryEvent.ts","views/Lottery/hooks/useStatusTransitions.tsx","components/Balance.tsx","views/Lottery/svgs/TicketPurchaseCard.tsx","views/Lottery/svgs/WhiteBunny.tsx","views/Lottery/svgs/Balls.tsx","hooks/useApproveConfirmTransaction.ts","components/ApproveConfirmButtons.tsx","components/ConnectWalletButton.tsx","views/Lottery/components/BuyTicketsModal/BuyTicketsModal.tsx","views/Lottery/components/BuyTicketsModal/NumTicketsToBuyButton.tsx","views/Lottery/components/BuyTicketsModal/TicketInput.tsx","views/Lottery/components/BuyTicketsModal/EditNumbersModal.tsx","views/Lottery/helpers.tsx","views/Lottery/components/BuyTicketsModal/generateTicketNumbers.tsx","views/Lottery/components/BuyTicketsModal/useTicketsReducer.tsx","views/Lottery/components/BuyTokenButton.tsx","views/Lottery/hooks/useGetUnclaimedRewards.ts","hooks/useCallWithGasPrice.ts","views/Lottery/components/BuyTicketsButton.tsx","views/Lottery/components/Hero.tsx","state/lottery/fetchUnclaimedUserRewards.ts","views/Lottery/components/WinningNumbers.tsx","views/Lottery/components/TicketNumber.tsx","utils/calls/estimateGas.ts","utils/calls/farms.ts","views/Lottery/components/ClaimPrizesModal/ClaimPrizesInner.tsx","views/Lottery/components/ClaimPrizesModal/index.tsx","views/Lottery/components/ViewTicketsModal/PreviousRoundTicketsInner.tsx","views/Lottery/components/ViewTicketsModal/CurrentRoundTicketsInner.tsx","views/Lottery/components/ViewTicketsModal/index.tsx","views/Lottery/components/RewardBracketDetail.tsx","views/Lottery/components/RewardBrackets.tsx","views/Lottery/components/NextDrawCard.tsx","utils/getTimePeriods.ts","views/Lottery/components/Countdown/Timer.tsx","views/Lottery/hooks/useNextEventCountdown.ts","views/Lottery/components/Countdown/index.tsx","views/Lottery/components/HistoryTabMenu.tsx","views/Lottery/components/YourHistoryCard/FinishedRoundRow.tsx","views/Lottery/components/YourHistoryCard/FinishedRoundTable.tsx","views/Lottery/components/PreviousRoundCard/Body.tsx","views/Lottery/components/PreviousRoundCard/FooterExpanded.tsx","views/Lottery/components/PreviousRoundCard/Footer.tsx","views/Lottery/components/YourHistoryCard/index.tsx","views/Lottery/components/AllHistoryCard/RoundSwitcher.tsx","views/Lottery/components/AllHistoryCard/index.tsx","views/Lottery/components/CheckPrizesSection.tsx","views/Lottery/components/HowToPlay.tsx","views/Lottery/hooks/useShowMoreUserRounds.ts","views/Lottery/index.tsx","views/Lottery/pageSectionStyles.tsx"],"names":["FetchStatus","sharedStyles","theme","clipPath","clipFill","css","isDark","dark","light","colors","background","ConcaveContainer","styled","Box","ConvexContainer","ConvexTop","width","height","id","clipPathUnits","d","ConvexBottom","ConcaveTop","ConcaveBottom","Wrapper","div","dividerFill","index","ComponentWrapper","CurvedDivider","dividerPosition","dividerComponent","concave","showConvexTop","showConvexBottom","showConcaveTop","showConcaveBottom","BackgroundColor","Flex","getPadding","ChildrenWrapper","Container","mediaQueries","sm","lg","PageSection","children","svgFill","hasCurvedDivider","concaveDivider","containerProps","innerProps","props","useTheme","useThemeManager","toggleTheme","useContext","StyledThemeContext","useGetCurrentLotteryId","useSelector","state","lottery","currentLotteryId","useGetUserLotteriesGraphData","userLotteryData","useGetLotteriesGraphData","lotteriesData","useLottery","currentRound","processedCurrentRound","useProcessLotteryResponse","isTransitioning","maxNumberTicketsPerBuyOrClaimAsString","maxNumberTicketsPerBuyOrClaim","useMemo","BigNumber","useGetNextLotteryEvent","endTime","status","t","useTranslation","useState","nextEventTime","preCountdownText","postCountdownText","nextEvent","setNextEvent","useEffect","LotteryStatus","OPEN","CLOSE","CLAIMABLE","useStatusTransitions","account","useWeb3React","dispatch","useAppDispatch","previousStatus","usePreviousValue","fetchPublicLotteries","fetchUserLotteries","fetchCurrentLotteryId","interval","setInterval","a","clearInterval","Balance","value","color","decimals","isDisabled","unit","prefix","onClick","previousValue","useRef","current","start","end","suffix","duration","separator","TicketPurchaseCard","viewBox","filter","fill","fillRule","clipRule","x","y","stroke","strokeWidth","strokeDasharray","filterUnits","colorInterpolationFilters","floodOpacity","result","in","type","values","dx","dy","mode","in2","stdDeviation","WhiteBunny","maskUnits","mask","cx","cy","rx","ry","BallTextWrapper","BallText","Text","rotationTransform","ballsMap","pink","r","style","mixBlendMode","opacity","lilac","teal","aqua","green","yellow","BallWithNumber","number","size","fontSize","BallComponent","alignItems","justifyContent","position","mx","bold","useTokenBalance","tokenAddress","NOT_FETCHED","SUCCESS","FAILED","balance","BIG_ZERO","fetchStatus","balanceState","setBalanceState","fastRefresh","useRefresh","fetchBalance","contract","getBep20Contract","balanceOf","res","toString","console","error","prev","initialState","approvalState","confirmState","reducer","actions","useApproveConfirmTransaction","onApprove","onConfirm","onRequiresApproval","onSuccess","noop","onApproveSuccess","useReducer","handlePreApprove","toastError","useToast","then","isApproving","isApproved","isConfirming","isConfirmed","hasApproveFailed","hasConfirmFailed","handleApprove","tx","wait","receipt","handleConfirm","params","ButtonArrangement","ConnectWalletButton","useAuth","login","logout","onPresentConnectModal","useWalletModal","className","BuyingStage","StyledApproveConfirmButtonRow","md","Button","UIKitButton","iconAttrs","ChevronRight","ChevronRightIcon","attrs","ChevronBottom","ChevronDownIcon","spinnerIcon","spin","ApproveConfirmButtons","isApproveDisabled","isConfirmDisabled","buttonArrangement","ROW","confirmLabel","confirmId","confirmButtonText","disabled","endIcon","undefined","isLoading","StyledButton","NumTicketsToBuyButton","scale","p","variant","InputsContainer","isDuplicate","focused","DigitInput","input","countNumbers","window","SO_LotteryConfig","numbersCount","TicketContainer","ticket","duplicateWith","updateTicket","setFocused","containerRef","digit1","digit2","digit3","digit4","digit5","digit6","digitRefs","scrollInputIntoView","scrollIntoView","block","behavior","onPasteHandler","e","preventDefault","pasteContent","clipboardData","getData","length","test","filler","Array","split","onFocusHandler","onBlurHandler","onChangeHandler","event","digitId","currentKey","parseInt","key","includes","newNumbers","numbers","nextDigitId","nextInput","focus","prevDigitId","ref","onKeyDown","placeholder","onChange","onFocus","onBlur","onPaste","inputMode","StyledModal","Modal","ScrollableContainer","cardBorder","EditNumbersModal","totalCost","randomize","tickets","allComplete","onDismiss","title","headerBackground","gradients","cardHeader","onBack","mb","token","symbol","map","TicketInput","flexDirection","m","mt","parseRetrievedNumber","numberAsArray","splice","reverse","join","getDrawnDate","locale","endTimeInMs","Date","toLocaleDateString","dateTimeOptions","dateOptions","year","month","day","timeOptions","hour","minute","processLotteryResponse","lotteryData","priceTicketInCakeAsString","priceTicketInCake","discountDivisorAsString","discountDivisor","amountCollectedInCakeAsString","amountCollectedInCake","lotteryId","userTickets","startTime","treasuryFee","firstTicketId","lastTicketId","finalNumber","cakePerBracket","countWinnersPerBracket","rewardsBreakdown","generateTicketNumbers","numberOfTickets","userCurrentTickets","minNumber","substr","maxNumber","existingTicketNumbers","generatedTicketNumbers","count","randomNumber","random","push","ticketsToBuy","ticketNumber","log","getInitialState","amount","randomTicketsAsStringArray","from","_","i","isComplete","action","payload","ticketId","newDuplicates","forEach","prevTicketId","dupsToUpdate","indexToRemove","findIndex","duplicate","updatedTicket","every","Error","StyledBuyButton","BuyTokenButton","buyTokenLink","tokenTitle","open","ShortcutButtonsWrapper","isVisible","BuyTicketsModal","gasPrice","useGasPrice","callWithGasPrice","useCallback","methodName","methodArgs","overrides","contractMethod","get","hasManualGasPriceOverride","useCallWithGasPrice","setTicketsToBuy","discountValue","setDiscountValue","setTotalCost","ticketCostBeforeDiscount","setTicketCostBeforeDiscount","BUY","buyingStage","setBuyingStage","maxPossibleTicketPurchase","setMaxPossibleTicketPurchase","maxTicketPurchaseExceeded","setMaxTicketPurchaseExceeded","userNotEnoughCake","setUserNotEnoughCake","lotteryContract","useLotteryV2Contract","cakeContract","useCake","toastSuccess","tokens","cake","address","userCake","stringifiedUserCake","toJSON","memoisedUserCake","cakePriceBusd","price","hasFetchedBalance","userCakeDisplayBalance","getFullDisplayBalance","TooltipComponent","useTooltip","placement","tooltipOffset","targetRef","tooltip","tooltipVisible","limitNumberByMaxTicketsPerBuy","gt","getTicketCostAfterDiscount","numberTickets","times","plus","minus","getMaxTicketBuyWithDiscount","costAfterDiscount","ticketsBoughtWithDiscount","overallTicketBuy","validateInput","inputNumber","limitedNumberTickets","eq","maxPurchase","maxBalancePurchase","limitedMaxPurchase","lt","maxPlusDiscountTickets","secondTicketDiscountBuy","getMaxPossiblePurchase","numberOfTicketsToBuy","costBeforeDiscount","discountBeingApplied","getNumTicketsByPercentage","percentage","percentageOfMaxTickets","Math","floor","toNumber","tenPercentOfBalance","twentyFivePercentOfBalance","fiftyPercentOfBalance","oneHundredPercentOfBalance","handleNumberButtonClick","toFixed","reversedTicket","num","unshift","useTicketsReducer","getTicketsForPurchase","allowance","response","currentAllowance","ethersToBigNumber","ethers","constants","MaxUint256","Toast","txHash","transactionHash","ticketsForPurchase","fetchUserTicketsAndLotteries","disableBuying","lte","EDIT","minWidth","mr","isWarning","onUserInput","inputAsInt","inputAsBN","currencyValue","maxTickets","display","percentageAsBn","isNaN","percentageDiscount","ml","borderTop","pt","SEQUENTIAL","BuyTicketsButton","useModal","onPresentBuyTicketsModal","floatingStarsLeft","keyframes","floatingStarsRight","floatingTicketLeft","floatingTicketRight","mainTicketAnimation","PrizeTotalBalance","gold","StyledBuyTicketButton","xs","ButtonWrapper","TicketSvgWrapper","Decorations","StarsDecorations","xl","Hero","prizeInBusd","prizeTotal","getBalanceNumber","ticketBuyIsDisabled","src","alt","my","lotteryAddress","getLotteryV2Address","fetchCakeRewardsForTickets","winningTickets","calls","winningTicket","roundId","rewardBracket","name","multicallv2","lotteryV2Abi","cakeRewards","cakeTotal","reduce","accum","cakeReward","ticketsWithUnclaimedRewards","getRewardBracketByNumber","ticketNumAsArray","winningNumsAsArray","matchingNumbers","getWinningTickets","roundDataAndUserTickets","ticketsWithRewardBrackets","allWinningTickets","unclaimedWinningTickets","getWinningNumbersForRound","targetRoundId","targetRound","find","pastLottery","fetchUnclaimedUserRewards","rounds","toLowerCase","roundsInRange","round","lastCheckableRoundId","MAX_LOTTERIES_REQUEST_SIZE","claimableRounds","roundsWithPossibleWinnings","claimed","totalTickets","roundsToCheck","slice","NUM_ROUNDS_TO_CHECK_FOR_REWARDS","idsToCheck","fetchUserTicketsForMultipleRounds","userTicketData","roundsWithTickets","roundData","roundDataAndWinningTickets","Promise","all","winningTicketsForPastRounds","roundsWithWinningTickets","winningTicketData","roundsWithUnclaimedWinningTickets","WinningNumbers","rotateText","rotationValues","setRotationValues","numAsArray","maxHeight","uniqueId","maxNumbers","StyledNumberWrapper","radii","default","RewardHighlighter","numberMatches","primary","TicketNumber","localId","digit","_uniqueId","estimateGas","gasMarginPer10000","rawGasEstimation","gasEstimation","mul","add","callWithEstimateGas","gasLimit","DEFAULT_GAS_LIMIT","ClaimInnerContainer","roundsToClaim","activeClaimIndex","setActiveClaimIndex","pendingTx","setPendingTx","ceil","pendingBatchClaims","setPendingBatchClaims","activeClaimData","usePriceCakeBusd","dollarReward","rewardAsBalance","getBalanceAmount","dollarRewardAsBalance","claimTicketsCallData","ticketIds","brackets","shouldBatchRequest","handleProgressToNextClaim","getTicketBatches","requests","maxAsNumber","ticketIdsSlice","bracketsSlice","handleClaim","message","handleBatchClaim","ticketBatches","transactionsToFire","receipts","ticketBatch","claimNum","claimTotal","textAlign","lineHeight","ModalContainer","StyledModalHeader","ModalHeader","BunnyDecoration","showConfetti","confetti","particleCount","startVelocity","gravity","spread","origin","ClaimPrizesModal","delay","ClaimPrizesInner","TopBox","dropdown","ScrollBox","TicketSkeleton","PreviousRoundTicketsInner","lotteryInfo","setLotteryInfo","allUserTickets","setAllUserTickets","isFetched","claimData","userWinningTickets","setUserWinningTickets","userRound","onPresentClaimModal","addWinningTicketInfoToAllTickets","_allTickets","_allWinningTickets","winningTicketEquivalent","fetchData","fetchUserTicketsForOneRound","fetchLottery","processedLotteryData","allTicketsWithWinningTicketInfo","ticketsSortedByWinners","sort","ticketA","ticketB","rewardBracket1","textTransform","getFooter","CurrentRoundTicketsInner","ViewTicketsModal","roundStatus","isPreviousRound","RewardBracketDetail","cakeAmount","numberWinners","isHistoricRound","isBurn","numberMatch","getRewardText","viewDecimals","RewardsInner","RewardBrackets","lotteryNodeData","cakeToBurn","rewardsLessTreasuryFee","setState","amountLessTreasuryFee","getCakeRewards","bracket","shareAsPercentage","rewardBrackets","bracketIndex","Grid","HeadingText","StyledCard","Card","NextDrawWrapper","NextDrawCard","currentLanguage","onPresentViewTicketsModal","isExpanded","setIsExpanded","endTimeMs","endDate","isLotteryOpen","userTicketCount","youHaveText","ticketsThisRoundText","PENDING","Boolean","toLocaleString","marginTop","whiteSpace","maxWidth","expanded","HOUR_IN_SECONDS","DAY_IN_SECONDS","MONTH_IN_SECONDS","YEAR_IN_SECONDS","getTimePeriods","seconds","delta","abs","timeLeft","years","months","days","hours","minutes","StyledTimerFlex","showTooltip","textSubtle","StyledTimerText","Heading","useNextEventCountdown","secondsRemaining","setSecondsRemaining","timer","setLotteryIsTransitioning","currentSeconds","now","prevSecondsRemaining","fetchCurrentLottery","Countdown","Timer","HistoryTabMenu","setActiveIndex","activeIndex","onItemClick","StyledSmallDotIcon","SmallDotIcon","textDisabled","FinishedRoundRow","hasWon","endTimeAsDate","toLocaleTimeString","FinishedRoundTable","handleShowMoreClick","numUserRoundsRequested","handleHistoryRowClick","filteredForClaimable","sortedByRoundId","roundA","roundB","px","pb","overflowY","finishedRound","StyledCardBody","CardBody","StyledCardRibbon","CardRibbon","PreviousRoundCardBody","userDataForRound","userLotteryRound","useMatchBreakpoints","isLg","isXl","isXxl","isLargerScreen","currentLotteryIdAsInt","isLatestRound","totalTicketNumber","youHadText","text","PreviousRoundCardFooter","fetchedLotteryGraphData","setFetchedLotteryGraphData","lotteryGraphDataFromState","useGetLotteryGraphDataById","getGraphData","getGraphLotteries","id_in","fetchedGraphData","NaN","formatNumber","totalUsers","getTotalUsers","ExpandableLabel","ExpandableLabelUiKit","FooterExpanded","YourHistoryCard","shouldShowRoundDetail","setShouldShowRoundDetail","selectedLotteryNodeData","setSelectedLotteryNodeData","selectedLotteryId","setSelectedLotteryId","cursor","getBody","StyledInput","Input","StyledIconButton","IconButton","RoundSwitcher","selectedRoundId","mostRecentRound","handleInputChange","handleArrowButtonPress","selectedRoundIdAsInt","pattern","currentTarget","validity","valid","StyledCardHeader","CardHeader","AllHistoryCard","latestRoundId","setLatestRoundId","setSelectedRoundId","numRoundsFetched","mostRecentFinishedRoundId","fetchLotteryData","target","useGetUnclaimedRewards","unclaimedRewards","setUnclaimedRewards","setFetchStatus","fetchAllRewards","IN_PROGRESS","unclaimedRewardsResponse","TicketImage","img","TornTicketImage","CheckPrizesSection","hasCheckedForRewards","setHasCheckedForRewards","hasRewardsToClaim","setHasRewardsToClaim","isFetchingRewards","lotteryIsNotClaimable","isCheckNowDisabled","Divider","BulletList","ul","StepContainer","StyledStepCard","card","StepCardInner","StepCard","step","label","subtitle","AllocationGrid","Link","AllocationColorCircle","AllocationMatch","PoolAllocations","winPercents","digits","parseFloat","match_1","match_2","match_3","match_4","match_5","match_6","burn","GappedFlex","HowToPlay","steps","flex","useShowMoreUserRounds","MAX_USER_LOTTERIES_REQUEST_SIZE","setNumUserRoundsRequested","handleShowMoreUserRounds","fetchAdditionalUserLotteries","skip","LotteryPage","Lottery","useFetchLottery","historyTabMenuIndex","setHistoryTabMenuIndex","endTimeAsInt","useShowMoreUserHistory","margin"],"mappings":"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","file":"static/js/5.chunk.js","sourcesContent":["import { useEffect, useState } from 'react'\r\nimport { ethers } from 'ethers'\r\nimport BigNumber from 'bignumber.js'\r\nimport { useWeb3React } from '@web3-react/core'\r\nimport tokens from 'config/constants/tokens'\r\nimport { getBep20Contract, getCakeContract } from 'utils/contractHelpers'\r\nimport { BIG_ZERO } from 'utils/bigNumber'\r\nimport { simpleRpcProvider } from 'utils/providers'\r\nimport useRefresh from './useRefresh'\r\nimport useLastUpdated from './useLastUpdated'\r\n\r\ntype UseTokenBalanceState = {\r\n  balance: BigNumber\r\n  fetchStatus: FetchStatus\r\n}\r\n\r\nexport enum FetchStatus {\r\n  NOT_FETCHED = 'not-fetched',\r\n  SUCCESS = 'success',\r\n  FAILED = 'failed',\r\n}\r\n\r\nconst useTokenBalance = (tokenAddress: string) => {\r\n  const { NOT_FETCHED, SUCCESS, FAILED } = FetchStatus\r\n  const [balanceState, setBalanceState] = useState<UseTokenBalanceState>({\r\n    balance: BIG_ZERO,\r\n    fetchStatus: NOT_FETCHED,\r\n  })\r\n  const { account } = useWeb3React()\r\n  const { fastRefresh } = useRefresh()\r\n\r\n  useEffect(() => {\r\n    const fetchBalance = async () => {\r\n      const contract = getBep20Contract(tokenAddress)\r\n      try {\r\n        const res = await contract.balanceOf(account)\r\n        setBalanceState({ balance: new BigNumber(res.toString()), fetchStatus: SUCCESS })\r\n      } catch (e) {\r\n        console.error(e)\r\n        setBalanceState((prev) => ({\r\n          ...prev,\r\n          fetchStatus: FAILED,\r\n        }))\r\n      }\r\n    }\r\n\r\n    if (account) {\r\n      fetchBalance()\r\n    }\r\n  }, [account, tokenAddress, fastRefresh, SUCCESS, FAILED])\r\n\r\n  return balanceState\r\n}\r\n\r\nexport const useTotalSupply = () => {\r\n  const { slowRefresh } = useRefresh()\r\n  const [totalSupply, setTotalSupply] = useState<BigNumber>()\r\n\r\n  useEffect(() => {\r\n    async function fetchTotalSupply() {\r\n      const cakeContract = getCakeContract()\r\n      const supply = await cakeContract.totalSupply()\r\n      setTotalSupply(new BigNumber(supply.toString()))\r\n    }\r\n\r\n    fetchTotalSupply()\r\n  }, [slowRefresh])\r\n\r\n  return totalSupply\r\n}\r\n\r\nexport const useBurnedBalance = (tokenAddress: string) => {\r\n  const [balance, setBalance] = useState(BIG_ZERO)\r\n  const { slowRefresh } = useRefresh()\r\n\r\n  useEffect(() => {\r\n    const fetchBalance = async () => {\r\n      const contract = getBep20Contract(tokenAddress)\r\n      const res = await contract.balanceOf('0x000000000000000000000000000000000000dEaD')\r\n      setBalance(new BigNumber(res.toString()))\r\n    }\r\n\r\n    fetchBalance()\r\n  }, [tokenAddress, slowRefresh])\r\n\r\n  return balance\r\n}\r\n\r\nexport const useGetBnbBalance = () => {\r\n  const [fetchStatus, setFetchStatus] = useState(FetchStatus.NOT_FETCHED)\r\n  const [balance, setBalance] = useState(ethers.BigNumber.from(0))\r\n  const { account } = useWeb3React()\r\n  const { lastUpdated, setLastUpdated } = useLastUpdated()\r\n\r\n  useEffect(() => {\r\n    const fetchBalance = async () => {\r\n      try {\r\n        const walletBalance = await simpleRpcProvider.getBalance(account)\r\n        setBalance(walletBalance)\r\n        setFetchStatus(FetchStatus.SUCCESS)\r\n      } catch {\r\n        setFetchStatus(FetchStatus.FAILED)\r\n      }\r\n    }\r\n\r\n    if (account) {\r\n      fetchBalance()\r\n    }\r\n  }, [account, lastUpdated, setBalance, setFetchStatus])\r\n\r\n  return { balance, fetchStatus, refresh: setLastUpdated }\r\n}\r\n\r\nexport const useGetCakeBalance = () => {\r\n  console.log('>>> use get cake balance', tokens.cake)\r\n  const { balance, fetchStatus } = useTokenBalance(tokens.cake.address)\r\n\r\n  // TODO: Remove ethers conversion once useTokenBalance is converted to ethers.BigNumber\r\n  return { balance: ethers.BigNumber.from(balance.toString()), fetchStatus }\r\n}\r\n\r\nexport default useTokenBalance\r\n","import React from 'react'\r\nimport styled, { css, DefaultTheme } from 'styled-components'\r\nimport { Box } from '@pancakeswap/uikit'\r\nimport { ClipFill } from '../types'\r\n\r\ninterface CurveProps {\r\n  clipFill?: ClipFill\r\n}\r\n\r\ninterface ContainerProps extends CurveProps {\r\n  clipPath: string\r\n}\r\n\r\nconst sharedStyles = (theme: DefaultTheme, clipPath: string, clipFill?: ClipFill) => css`\r\n  width: 100%;\r\n  height: 20px;\r\n  clip-path: url(${clipPath});\r\n\r\n  background: ${() => {\r\n    if (theme.isDark) {\r\n      return clipFill?.dark || clipFill?.light || theme.colors.background\r\n    }\r\n    return clipFill?.light || theme.colors.background\r\n  }};\r\n\r\n  & svg {\r\n    display: block;\r\n  }\r\n`\r\n\r\nconst ConcaveContainer = styled(Box)<ContainerProps>`\r\n  ${({ theme, clipPath, clipFill }) => sharedStyles(theme, clipPath, clipFill)}\r\n  transform: ${({ clipPath }) => (clipPath === '#bottomConcaveCurve' ? 'translate(0, -13px)' : 'translate(0, 1px)')};\r\n`\r\n\r\nconst ConvexContainer = styled(Box)<ContainerProps>`\r\n  ${({ theme, clipPath, clipFill }) => sharedStyles(theme, clipPath, clipFill)}\r\n  transform: ${({ clipPath }) => (clipPath === '#bottomConvexCurve' ? 'translate(0, -13px)' : 'translate(0, -1px)')};\r\n`\r\n\r\nexport const ConvexTop: React.FC<CurveProps> = ({ clipFill }) => (\r\n  <ConvexContainer clipFill={clipFill} clipPath=\"#topConvexCurve\">\r\n    <svg width=\"0\" height=\"0\">\r\n      <defs>\r\n        <clipPath id=\"topConvexCurve\" clipPathUnits=\"objectBoundingBox\">\r\n          <path d=\"M 0,1 L 0,0 L 1,0 L 1,1 C 0.75 0, .25 0, 0 1 Z\" />\r\n        </clipPath>\r\n      </defs>\r\n    </svg>\r\n  </ConvexContainer>\r\n)\r\n\r\nexport const ConvexBottom: React.FC<CurveProps> = ({ clipFill }) => (\r\n  <ConvexContainer clipFill={clipFill} clipPath=\"#bottomConvexCurve\">\r\n    <svg width=\"0\" height=\"0\">\r\n      <defs>\r\n        <clipPath id=\"bottomConvexCurve\" clipPathUnits=\"objectBoundingBox\">\r\n          <path d=\"M 0,0 L 0,1 L 1,1 L 1,0 C .75 1, .25 1, 0 0 Z\" />\r\n        </clipPath>\r\n      </defs>\r\n    </svg>\r\n  </ConvexContainer>\r\n)\r\n\r\nexport const ConcaveTop: React.FC<CurveProps> = ({ clipFill }) => (\r\n  <ConcaveContainer clipFill={clipFill} clipPath=\"#topConcaveCurve\">\r\n    <svg width=\"0\" height=\"0\">\r\n      <defs>\r\n        <clipPath id=\"topConcaveCurve\" clipPathUnits=\"objectBoundingBox\">\r\n          <path d=\"M 0,0 L 0,1 L 1,1 L 1,0 C .75 1, .25 1, 0 0 Z\" />\r\n        </clipPath>\r\n      </defs>\r\n    </svg>\r\n  </ConcaveContainer>\r\n)\r\n\r\nexport const ConcaveBottom: React.FC<CurveProps> = ({ clipFill }) => (\r\n  <ConcaveContainer clipFill={clipFill} clipPath=\"#bottomConcaveCurve\">\r\n    <svg width=\"0\" height=\"0\">\r\n      <defs>\r\n        <clipPath id=\"bottomConcaveCurve\" clipPathUnits=\"objectBoundingBox\">\r\n          <path d=\"M 0,1 L 0,0 L 1,0 L 1,1 C .75 0.1, .25 0.1, 0 1 Z\" />\r\n        </clipPath>\r\n      </defs>\r\n    </svg>\r\n  </ConcaveContainer>\r\n)\r\n","import React from 'react'\r\nimport styled from 'styled-components'\r\nimport { ConcaveTop, ConcaveBottom, ConvexTop, ConvexBottom } from './svg/CurvedSvg'\r\nimport { DividerFill, ClipFill } from './types'\r\n\r\ninterface CurvedDividerProps extends WrapperProps {\r\n  svgFill?: string\r\n  dividerComponent?: React.ReactNode\r\n  dividerPosition?: 'top' | 'bottom'\r\n  concave?: boolean\r\n  clipFill?: ClipFill\r\n}\r\ninterface WrapperProps {\r\n  index: number\r\n  dividerFill?: DividerFill\r\n}\r\n\r\nconst Wrapper = styled.div<WrapperProps>`\r\n  background: ${({ theme, dividerFill }) => {\r\n    if (theme.isDark) {\r\n      return dividerFill?.dark || dividerFill?.light || 'none'\r\n    }\r\n    return dividerFill?.light || dividerFill?.dark || 'none'\r\n  }};\r\n  z-index: ${({ index }) => index};\r\n  position: relative;\r\n  display: flex;\r\n  align-items: center;\r\n  width: 100%;\r\n`\r\n\r\nconst ComponentWrapper = styled.div<WrapperProps>`\r\n  z-index: ${({ index }) => index + 1};\r\n  position: absolute;\r\n  top: 50%;\r\n  left: 50%;\r\n  transform: translate(-50%, -50%);\r\n`\r\n\r\nconst CurvedDivider: React.FC<CurvedDividerProps> = ({\r\n  index,\r\n  dividerPosition,\r\n  dividerComponent,\r\n  concave,\r\n  clipFill,\r\n  dividerFill,\r\n}) => {\r\n  const showConvexTop = dividerPosition === 'top' && !concave\r\n  const showConvexBottom = dividerPosition === 'bottom' && !concave\r\n  const showConcaveTop = dividerPosition === 'top' && concave\r\n  const showConcaveBottom = dividerPosition === 'bottom' && concave\r\n\r\n  const getConcaveDivider = () => {\r\n    return (\r\n      <>\r\n        {showConcaveTop && <ConcaveTop clipFill={clipFill} />}\r\n        {showConcaveBottom && <ConcaveBottom clipFill={clipFill} />}\r\n      </>\r\n    )\r\n  }\r\n\r\n  const getConvexDivider = () => {\r\n    return (\r\n      <>\r\n        {showConvexTop && <ConvexTop clipFill={clipFill} />}\r\n        {showConvexBottom && <ConvexBottom clipFill={clipFill} />}\r\n      </>\r\n    )\r\n  }\r\n\r\n  return (\r\n    <Wrapper index={index} dividerFill={dividerFill}>\r\n      {dividerComponent && <ComponentWrapper index={index}>{dividerComponent}</ComponentWrapper>}\r\n      {getConcaveDivider()}\r\n      {getConvexDivider()}\r\n    </Wrapper>\r\n  )\r\n}\r\n\r\nexport default CurvedDivider\r\n","import React from 'react'\r\nimport styled from 'styled-components'\r\nimport { BoxProps, Box, Flex, FlexProps } from '@pancakeswap/uikit'\r\nimport Container from 'components/Layout/Container'\r\nimport CurvedDivider from './CurvedDivider'\r\nimport { ClipFill, DividerFill } from './types'\r\n\r\ninterface PageSectionProps extends BackgroundColorProps {\r\n  svgFill?: string\r\n  dividerComponent?: React.ReactNode\r\n  hasCurvedDivider?: boolean\r\n  dividerPosition?: 'top' | 'bottom'\r\n  concaveDivider?: boolean\r\n  containerProps?: BoxProps\r\n  innerProps?: BoxProps\r\n  clipFill?: ClipFill\r\n  dividerFill?: DividerFill\r\n}\r\n\r\ninterface BackgroundColorProps extends FlexProps {\r\n  index: number\r\n  background?: string\r\n  getPadding?: () => string\r\n}\r\n\r\nconst BackgroundColor = styled(Flex)<BackgroundColorProps>`\r\n  position: relative;\r\n  flex-direction: column;\r\n  align-items: center;\r\n  z-index: ${({ index }) => index - 1};\r\n  background: ${({ background, theme }) => background || theme.colors.background};\r\n  padding: ${({ getPadding }) => getPadding()};\r\n`\r\n\r\nconst ChildrenWrapper = styled(Container)`\r\n  min-height: auto;\r\n  padding-top: 16px;\r\n  padding-bottom: 16px;\r\n\r\n  ${({ theme }) => theme.mediaQueries.sm} {\r\n    padding-top: 32px;\r\n    padding-bottom: 32px;\r\n  }\r\n\r\n  ${({ theme }) => theme.mediaQueries.lg} {\r\n    padding-top: 48px;\r\n    padding-bottom: 48px;\r\n  }\r\n`\r\n\r\nconst PageSection: React.FC<PageSectionProps> = ({\r\n  children,\r\n  background,\r\n  svgFill,\r\n  index = 1,\r\n  dividerComponent,\r\n  dividerPosition = 'bottom',\r\n  hasCurvedDivider = true,\r\n  concaveDivider = false,\r\n  clipFill,\r\n  dividerFill,\r\n  containerProps,\r\n  innerProps,\r\n  ...props\r\n}) => {\r\n  const getPadding = () => {\r\n    // No curved divider\r\n    if (!hasCurvedDivider) {\r\n      return '48px 0'\r\n    }\r\n    // Bottom curved divider\r\n    // Less bottom padding, as the divider is present there\r\n    if (dividerPosition === 'bottom') {\r\n      return '48px 0 14px'\r\n    }\r\n    // Top curved divider\r\n    // Less top padding, as the divider is present there\r\n    if (dividerPosition === 'top') {\r\n      return '14px 0 48px'\r\n    }\r\n    return '48px 0'\r\n  }\r\n\r\n  return (\r\n    <Box {...containerProps}>\r\n      {hasCurvedDivider && dividerPosition === 'top' && (\r\n        <CurvedDivider\r\n          svgFill={svgFill}\r\n          index={index}\r\n          concave={concaveDivider}\r\n          dividerPosition={dividerPosition}\r\n          dividerComponent={dividerComponent}\r\n          clipFill={clipFill}\r\n          dividerFill={dividerFill}\r\n        />\r\n      )}\r\n      <BackgroundColor background={background} index={index} getPadding={getPadding} {...props}>\r\n        <ChildrenWrapper {...innerProps}>{children}</ChildrenWrapper>\r\n      </BackgroundColor>\r\n      {hasCurvedDivider && dividerPosition === 'bottom' && (\r\n        <CurvedDivider\r\n          svgFill={svgFill}\r\n          index={index}\r\n          concave={concaveDivider}\r\n          dividerPosition={dividerPosition}\r\n          dividerComponent={dividerComponent}\r\n          clipFill={clipFill}\r\n          dividerFill={dividerFill}\r\n        />\r\n      )}\r\n    </Box>\r\n  )\r\n}\r\n\r\nexport default PageSection\r\n","import { useContext } from 'react'\r\nimport { ThemeContext as StyledThemeContext } from 'styled-components'\r\nimport { useThemeManager } from 'state/user/hooks'\r\n\r\nconst useTheme = () => {\r\n  const [isDark, toggleTheme] = useThemeManager()\r\n  const theme = useContext(StyledThemeContext)\r\n  return { isDark, theme, toggleTheme }\r\n}\r\n\r\nexport default useTheme\r\n","import { useEffect, useMemo } from 'react'\r\nimport BigNumber from 'bignumber.js'\r\nimport { useWeb3React } from '@web3-react/core'\r\nimport { useSelector } from 'react-redux'\r\nimport { useAppDispatch } from 'state'\r\nimport useRefresh from 'hooks/useRefresh'\r\nimport { State } from '../types'\r\nimport { fetchCurrentLotteryId, fetchCurrentLottery, fetchUserTicketsAndLotteries, fetchPublicLotteries } from '.'\r\nimport { useProcessLotteryResponse } from './helpers'\r\n\r\n// Lottery\r\nexport const useGetCurrentLotteryId = () => {\r\n  return useSelector((state: State) => state.lottery.currentLotteryId)\r\n}\r\n\r\nexport const useGetUserLotteriesGraphData = () => {\r\n  return useSelector((state: State) => state.lottery.userLotteryData)\r\n}\r\n\r\nexport const useGetUserLotteryGraphRoundById = (lotteryId: string) => {\r\n  const userLotteriesData = useGetUserLotteriesGraphData()\r\n  return userLotteriesData.rounds.find((userRound) => userRound.lotteryId === lotteryId)\r\n}\r\n\r\nexport const useGetLotteriesGraphData = () => {\r\n  return useSelector((state: State) => state.lottery.lotteriesData)\r\n}\r\n\r\nexport const useGetLotteryGraphDataById = (lotteryId: string) => {\r\n  const lotteriesData = useGetLotteriesGraphData()\r\n  return lotteriesData?.find((lottery) => lottery.id === lotteryId)\r\n}\r\n\r\nexport const useFetchLottery = () => {\r\n  const { account } = useWeb3React()\r\n  const { fastRefresh } = useRefresh()\r\n  const dispatch = useAppDispatch()\r\n  const currentLotteryId = useGetCurrentLotteryId()\r\n\r\n  useEffect(() => {\r\n    // get current lottery ID & max ticket buy\r\n    dispatch(fetchCurrentLotteryId())\r\n  }, [dispatch])\r\n\r\n  useEffect(() => {\r\n    if (currentLotteryId) {\r\n      // Get historical lottery data from nodes +  last 100 subgraph entries\r\n      dispatch(fetchPublicLotteries({ currentLotteryId }))\r\n      // get public data for current lottery\r\n      dispatch(fetchCurrentLottery({ currentLotteryId }))\r\n    }\r\n  }, [dispatch, currentLotteryId, fastRefresh])\r\n\r\n  useEffect(() => {\r\n    // get user tickets for current lottery, and user lottery subgraph data\r\n    if (account && currentLotteryId) {\r\n      dispatch(fetchUserTicketsAndLotteries({ account, currentLotteryId }))\r\n    }\r\n  }, [dispatch, currentLotteryId, account])\r\n}\r\n\r\nexport const useLottery = () => {\r\n  const currentRound = useSelector((state: State) => state.lottery.currentRound)\r\n  const processedCurrentRound = useProcessLotteryResponse(currentRound)\r\n\r\n  const isTransitioning = useSelector((state: State) => state.lottery.isTransitioning)\r\n\r\n  const currentLotteryId = useGetCurrentLotteryId()\r\n  const userLotteryData = useGetUserLotteriesGraphData()\r\n  const lotteriesData = useGetLotteriesGraphData()\r\n\r\n  const maxNumberTicketsPerBuyOrClaimAsString = useSelector(\r\n    (state: State) => state.lottery.maxNumberTicketsPerBuyOrClaim,\r\n  )\r\n  const maxNumberTicketsPerBuyOrClaim = useMemo(() => {\r\n    return new BigNumber(maxNumberTicketsPerBuyOrClaimAsString)\r\n  }, [maxNumberTicketsPerBuyOrClaimAsString])\r\n\r\n  return {\r\n    currentLotteryId,\r\n    maxNumberTicketsPerBuyOrClaim,\r\n    isTransitioning,\r\n    userLotteryData,\r\n    lotteriesData,\r\n    currentRound: processedCurrentRound,\r\n  }\r\n}\r\n","import { LotteryStatus } from 'config/constants/types'\r\nimport { useTranslation } from 'contexts/Localization'\r\nimport { useEffect, useState } from 'react'\r\n\r\ninterface LotteryEvent {\r\n  nextEventTime: number\r\n  postCountdownText?: string\r\n  preCountdownText?: string\r\n}\r\n\r\nconst useGetNextLotteryEvent = (endTime: number, status: LotteryStatus): LotteryEvent => {\r\n  const { t } = useTranslation()\r\n  const vrfRequestTime = 180 // 3 mins\r\n  const secondsBetweenRounds = 300 // 5 mins\r\n  const transactionResolvingBuffer = 30 // Delay countdown by 30s to ensure contract transactions have been calculated and broadcast\r\n  const [nextEvent, setNextEvent] = useState({ nextEventTime: null, preCountdownText: null, postCountdownText: null })\r\n\r\n  useEffect(() => {\r\n    // Current lottery is active\r\n    if (status === LotteryStatus.OPEN) {\r\n      setNextEvent({\r\n        nextEventTime: endTime + transactionResolvingBuffer,\r\n        preCountdownText: null,\r\n        postCountdownText: t('until the draw'),\r\n      })\r\n    }\r\n    // Current lottery has finished but not yet claimable\r\n    if (status === LotteryStatus.CLOSE) {\r\n      setNextEvent({\r\n        nextEventTime: endTime + transactionResolvingBuffer + vrfRequestTime,\r\n        preCountdownText: t('Winners announced in'),\r\n        postCountdownText: null,\r\n      })\r\n    }\r\n    // Current lottery claimable. Next lottery has not yet started\r\n    if (status === LotteryStatus.CLAIMABLE) {\r\n      setNextEvent({\r\n        nextEventTime: endTime + transactionResolvingBuffer + secondsBetweenRounds,\r\n        preCountdownText: t('Tickets on sale in'),\r\n        postCountdownText: null,\r\n      })\r\n    }\r\n  }, [status, endTime, t])\r\n\r\n  return nextEvent\r\n}\r\n\r\nexport default useGetNextLotteryEvent\r\n","import { useWeb3React } from '@web3-react/core'\r\nimport { LotteryStatus } from 'config/constants/types'\r\nimport usePreviousValue from 'hooks/usePreviousValue'\r\nimport { useEffect } from 'react'\r\nimport { useAppDispatch } from 'state'\r\nimport { useLottery } from 'state/lottery/hooks'\r\nimport { fetchPublicLotteries, fetchCurrentLotteryId, fetchUserLotteries } from 'state/lottery'\r\n\r\nconst useStatusTransitions = () => {\r\n  const {\r\n    currentLotteryId,\r\n    isTransitioning,\r\n    currentRound: { status },\r\n  } = useLottery()\r\n\r\n  const { account } = useWeb3React()\r\n  const dispatch = useAppDispatch()\r\n  const previousStatus = usePreviousValue(status)\r\n\r\n  useEffect(() => {\r\n    // Only run if there is a status state change\r\n    if (previousStatus !== status && currentLotteryId) {\r\n      // Current lottery transitions from CLOSE > CLAIMABLE\r\n      if (previousStatus === LotteryStatus.CLOSE && status === LotteryStatus.CLAIMABLE) {\r\n        dispatch(fetchPublicLotteries({ currentLotteryId }))\r\n        if (account) {\r\n          dispatch(fetchUserLotteries({ account, currentLotteryId }))\r\n        }\r\n      }\r\n      // Previous lottery to new lottery. From CLAIMABLE (previous round) > OPEN (new round)\r\n      if (previousStatus === LotteryStatus.CLAIMABLE && status === LotteryStatus.OPEN) {\r\n        dispatch(fetchPublicLotteries({ currentLotteryId }))\r\n        if (account) {\r\n          dispatch(fetchUserLotteries({ account, currentLotteryId }))\r\n        }\r\n      }\r\n    }\r\n  }, [currentLotteryId, status, previousStatus, account, dispatch])\r\n\r\n  useEffect(() => {\r\n    // Current lottery is CLAIMABLE and the lottery is transitioning to a NEW round - fetch current lottery ID every 10s.\r\n    // The isTransitioning condition will no longer be true when fetchCurrentLotteryId returns the next lottery ID\r\n    if (previousStatus === LotteryStatus.CLAIMABLE && status === LotteryStatus.CLAIMABLE && isTransitioning) {\r\n      dispatch(fetchCurrentLotteryId())\r\n      dispatch(fetchPublicLotteries({ currentLotteryId }))\r\n      const interval = setInterval(async () => {\r\n        dispatch(fetchCurrentLotteryId())\r\n        dispatch(fetchPublicLotteries({ currentLotteryId }))\r\n      }, 10000)\r\n      return () => clearInterval(interval)\r\n    }\r\n    return () => null\r\n  }, [status, previousStatus, isTransitioning, currentLotteryId, dispatch])\r\n}\r\n\r\nexport default useStatusTransitions\r\n","import React, { useEffect, useRef } from 'react'\r\nimport CountUp from 'react-countup'\r\nimport { Text, TextProps } from '@pancakeswap/uikit'\r\n\r\ninterface BalanceProps extends TextProps {\r\n  value: number\r\n  decimals?: number\r\n  unit?: string\r\n  isDisabled?: boolean\r\n  prefix?: string\r\n  onClick?: (event: React.MouseEvent<HTMLElement>) => void\r\n}\r\n\r\nconst Balance: React.FC<BalanceProps> = ({\r\n  value,\r\n  color = 'text',\r\n  decimals = 3,\r\n  isDisabled = false,\r\n  unit,\r\n  prefix,\r\n  onClick,\r\n  ...props\r\n}) => {\r\n  const previousValue = useRef(0)\r\n\r\n  useEffect(() => {\r\n    previousValue.current = value\r\n  }, [value])\r\n\r\n  return (\r\n    <Text color={isDisabled ? 'textDisabled' : color} onClick={onClick} {...props}>\r\n      <CountUp\r\n        start={previousValue.current}\r\n        end={value}\r\n        prefix={prefix}\r\n        suffix={unit}\r\n        decimals={decimals}\r\n        duration={1}\r\n        separator=\",\"\r\n      />\r\n    </Text>\r\n  )\r\n}\r\n\r\nexport default Balance\r\n","import React from 'react'\r\nimport { Svg, SvgProps } from '@pancakeswap/uikit'\r\n\r\nconst TicketPurchaseCard: React.FC<SvgProps> = (props) => {\r\n  return (\r\n    <Svg viewBox=\"0 0 296 121\" {...props}>\r\n      <g filter=\"url(#filter0_dd_ticket_purchase_card)\">\r\n        <path d=\"M4 16C4 7.16344 11.1634 0 20 0H66V113H20C11.1634 113 4 105.837 4 97V16Z\" fill=\"#FFB237\" />\r\n        <path\r\n          fillRule=\"evenodd\"\r\n          clipRule=\"evenodd\"\r\n          d=\"M69.4931 2.94568C68.9511 1.38001 67.6569 0 66 0V10H90V0C88.3431 0 87.0489 1.38001 86.5069 2.94568C85.2868 6.4696 81.9389 9 78 9C74.0611 9 70.7132 6.4696 69.4931 2.94568Z\"\r\n          fill=\"#FFB237\"\r\n        />\r\n        <rect x=\"66\" y=\"10\" width=\"10\" height=\"93\" fill=\"#FFB237\" />\r\n        <path d=\"M78 103V10\" stroke=\"#FFB237\" strokeWidth=\"4\" strokeDasharray=\"4 4\" />\r\n        <rect x=\"80\" y=\"10\" width=\"10\" height=\"93\" fill=\"#FFB237\" />\r\n        <path\r\n          fillRule=\"evenodd\"\r\n          clipRule=\"evenodd\"\r\n          d=\"M69.4931 110.054C68.9511 111.62 67.6569 113 66 113V103H90V113C88.3431 113 87.0489 111.62 86.5069 110.054C85.2868 106.53 81.9389 104 78 104C74.0611 104 70.7132 106.53 69.4931 110.054Z\"\r\n          fill=\"#FFB237\"\r\n        />\r\n        <path d=\"M90 0H276C284.837 0 292 7.16344 292 16V97C292 105.837 284.837 113 276 113H90V0Z\" fill=\"#FFB237\" />\r\n      </g>\r\n      <defs>\r\n        <filter\r\n          id=\"filter0_dd_ticket_purchase_card\"\r\n          x=\"0\"\r\n          y=\"0\"\r\n          width=\"296\"\r\n          height=\"121\"\r\n          filterUnits=\"userSpaceOnUse\"\r\n          colorInterpolationFilters=\"sRGB\"\r\n        >\r\n          <feFlood floodOpacity=\"0\" result=\"BackgroundImageFix\" />\r\n          <feColorMatrix in=\"SourceAlpha\" type=\"matrix\" values=\"0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 127 0\" />\r\n          <feOffset dx=\"2\" dy=\"2\" />\r\n          <feColorMatrix type=\"matrix\" values=\"0 0 0 0 1 0 0 0 0 0.686275 0 0 0 0 0 0 0 0 1 0\" />\r\n          <feBlend mode=\"normal\" in2=\"BackgroundImageFix\" result=\"effect1_dropShadow_ticket_purchase_card\" />\r\n          <feColorMatrix in=\"SourceAlpha\" type=\"matrix\" values=\"0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 127 0\" />\r\n          <feOffset dy=\"4\" />\r\n          <feGaussianBlur stdDeviation=\"2\" />\r\n          <feColorMatrix type=\"matrix\" values=\"0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0.25 0\" />\r\n          <feBlend\r\n            mode=\"normal\"\r\n            in2=\"effect1_dropShadow_ticket_purchase_card\"\r\n            result=\"effect2_dropShadow_ticket_purchase_card\"\r\n          />\r\n          <feBlend mode=\"normal\" in=\"SourceGraphic\" in2=\"effect2_dropShadow_ticket_purchase_card\" result=\"shape\" />\r\n        </filter>\r\n      </defs>\r\n    </Svg>\r\n  )\r\n}\r\n\r\nexport default TicketPurchaseCard\r\n","import React from 'react'\r\nimport { Svg, SvgProps } from '@pancakeswap/uikit'\r\n\r\nconst WhiteBunny: React.FC<SvgProps> = (props) => {\r\n  return (\r\n    <Svg viewBox=\"0 0 27 26\" {...props}>\r\n      <mask\r\n        id=\"white-bunny-path-1-outside-1\"\r\n        maskUnits=\"userSpaceOnUse\"\r\n        x=\"0.5\"\r\n        y=\"-0.0263672\"\r\n        width=\"26\"\r\n        height=\"26\"\r\n        fill=\"black\"\r\n      >\r\n        <rect fill=\"white\" x=\"0.5\" y=\"-0.0263672\" width=\"26\" height=\"26\" />\r\n        <path\r\n          fillRule=\"evenodd\"\r\n          clipRule=\"evenodd\"\r\n          d=\"M6.909 3.56941C7.03125 1.79519 8.76206 0.588231 10.4692 1.08677C11.9461 1.51808 12.7937 3.06497 12.3624 4.54184L11.1683 8.63073C11.9225 8.53996 12.7022 8.49237 13.5 8.49237C14.6339 8.49237 15.731 8.58848 16.7708 8.76808L18.74 2.99564C19.2367 1.53947 20.8199 0.761724 22.2761 1.25849C23.9593 1.83269 24.6807 3.81559 23.7601 5.3372L20.9057 10.0551C23.7031 11.3976 25.5 13.4834 25.5 15.8257L25.5 15.8267V17.6934C25.5 21.7435 20.1274 25.0267 13.5 25.0267C6.87258 25.0267 1.5 21.7435 1.5 17.6934V15.8267V15.8257C1.5 13.379 3.46066 11.2122 6.47417 9.88004L6.909 3.56941Z\"\r\n        />\r\n      </mask>\r\n      <path\r\n        d=\"M10.4692 1.08677L10.7142 0.247673V0.247673L10.4692 1.08677ZM6.909 3.56941L7.78108 3.6295V3.62949L6.909 3.56941ZM12.3624 4.54184L13.2015 4.78689V4.78689L12.3624 4.54184ZM11.1683 8.63073L10.3292 8.38568L9.95792 9.65684L11.2727 9.49862L11.1683 8.63073ZM16.7708 8.76808L16.622 9.62947L17.3572 9.75647L17.5981 9.05032L16.7708 8.76808ZM18.74 2.99564L19.5673 3.27788V3.27788L18.74 2.99564ZM22.2761 1.25849L22.5583 0.431153V0.431153L22.2761 1.25849ZM23.7601 5.3372L23.0122 4.88469V4.88469L23.7601 5.3372ZM20.9057 10.0551L20.1578 9.60256L19.6593 10.4265L20.5275 10.8432L20.9057 10.0551ZM25.5 15.8257H24.6258L24.6259 15.8274L25.5 15.8257ZM25.5 15.8267H26.3742L26.3742 15.8251L25.5 15.8267ZM6.47417 9.88004L6.82762 10.6796L7.31 10.4663L7.34626 9.94013L6.47417 9.88004ZM10.7142 0.247673C8.47144 -0.407305 6.19752 1.17838 6.03691 3.50932L7.78108 3.62949C7.86497 2.412 9.05268 1.58377 10.2241 1.92587L10.7142 0.247673ZM13.2015 4.78689C13.7681 2.84659 12.6545 0.814314 10.7142 0.247673L10.2241 1.92587C11.2376 2.22184 11.8192 3.28334 11.5233 4.2968L13.2015 4.78689ZM12.0074 8.87578L13.2015 4.78689L11.5233 4.2968L10.3292 8.38568L12.0074 8.87578ZM13.5 7.61822C12.6675 7.61822 11.853 7.66787 11.0638 7.76284L11.2727 9.49862C11.9921 9.41204 12.7369 9.36652 13.5 9.36652V7.61822ZM16.9195 7.90668C15.8299 7.71847 14.683 7.61822 13.5 7.61822V9.36652C14.5847 9.36652 15.632 9.45848 16.622 9.62947L16.9195 7.90668ZM17.5981 9.05032L19.5673 3.27788L17.9127 2.7134L15.9434 8.48584L17.5981 9.05032ZM19.5673 3.27788C19.9082 2.27864 20.9946 1.74493 21.9938 2.08582L22.5583 0.431153C20.6452 -0.221485 18.5653 0.800311 17.9127 2.7134L19.5673 3.27788ZM21.9938 2.08582C23.1489 2.47985 23.644 3.84054 23.0122 4.88469L24.5081 5.7897C25.7175 3.79064 24.7697 1.18554 22.5583 0.431153L21.9938 2.08582ZM23.0122 4.88469L20.1578 9.60256L21.6536 10.5076L24.5081 5.7897L23.0122 4.88469ZM26.3741 15.8257C26.3741 12.9967 24.2198 10.676 21.284 9.26698L20.5275 10.8432C23.1864 12.1193 24.6259 13.9701 24.6259 15.8257H26.3741ZM26.3742 15.8251L26.3741 15.8241L24.6259 15.8274L24.6259 15.8284L26.3742 15.8251ZM26.3742 17.6934V15.8267H24.6259V17.6934H26.3742ZM13.5 25.9009C16.9478 25.9009 20.1111 25.0486 22.4411 23.6247C24.7561 22.21 26.3742 20.1382 26.3742 17.6934H24.6259C24.6259 19.2987 23.5576 20.8935 21.5295 22.1329C19.5163 23.3632 16.6797 24.1526 13.5 24.1526V25.9009ZM0.62585 17.6934C0.62585 20.1382 2.24387 22.21 4.55889 23.6247C6.88892 25.0486 10.0523 25.9009 13.5 25.9009V24.1526C10.3203 24.1526 7.48367 23.3632 5.47054 22.1329C3.44242 20.8935 2.37415 19.2987 2.37415 17.6934H0.62585ZM0.62585 15.8267V17.6934H2.37415V15.8267H0.62585ZM0.62585 15.8257V15.8267H2.37415V15.8257H0.62585ZM6.12073 9.08053C2.97211 10.4725 0.62585 12.8707 0.62585 15.8257H2.37415C2.37415 13.8874 3.94921 11.952 6.82762 10.6796L6.12073 9.08053ZM6.03691 3.50932L5.60209 9.81995L7.34626 9.94013L7.78108 3.6295L6.03691 3.50932Z\"\r\n        fill=\"#08060B\"\r\n        mask=\"url(#path-1-outside-1)\"\r\n      />\r\n      <path\r\n        d=\"M25.5 17.6933C25.5 21.7434 20.1274 25.0267 13.5 25.0267C6.87258 25.0267 1.5 21.7434 1.5 17.6933V15.8267H25.5V17.6933Z\"\r\n        fill=\"#F4EEFF\"\r\n      />\r\n      <path\r\n        fillRule=\"evenodd\"\r\n        clipRule=\"evenodd\"\r\n        d=\"M6.909 3.56941C7.03125 1.79519 8.76206 0.588231 10.4692 1.08677C11.9461 1.51808 12.7937 3.06497 12.3624 4.54184L11.1683 8.63073C11.9225 8.53996 12.7022 8.49237 13.5 8.49237C14.6339 8.49237 15.731 8.58848 16.7708 8.76808L18.74 2.99564C19.2367 1.53947 20.8199 0.761724 22.2761 1.25849C23.9593 1.83269 24.6807 3.81559 23.7601 5.3372L20.9057 10.0551C23.7031 11.3976 25.5 13.4834 25.5 15.8257C25.5 19.8758 20.1274 23.159 13.5 23.159C6.87258 23.159 1.5 19.8758 1.5 15.8257C1.5 13.379 3.46066 11.2122 6.47417 9.88004L6.909 3.56941Z\"\r\n        fill=\"white\"\r\n      />\r\n      <ellipse cx=\"10.4334\" cy=\"15.292\" rx=\"1.33333\" ry=\"2\" fill=\"#08060B\" />\r\n      <ellipse cx=\"19.6331\" cy=\"15.292\" rx=\"1.33333\" ry=\"2\" fill=\"#08060B\" />\r\n    </Svg>\r\n  )\r\n}\r\n\r\nexport default WhiteBunny\r\n","import React from 'react'\r\nimport styled from 'styled-components'\r\nimport { Svg, SvgProps, Text, Flex } from '@pancakeswap/uikit'\r\n\r\nexport const PinkBall: React.FC<SvgProps> = (props) => {\r\n  return (\r\n    <Svg viewBox=\"0 0 32 32\" {...props}>\r\n      <circle cx=\"16\" cy=\"16\" r=\"16\" fill=\"#D750B2\" />\r\n      <g style={{ mixBlendMode: 'multiply' }} opacity=\"0.1\">\r\n        <path\r\n          fillRule=\"evenodd\"\r\n          clipRule=\"evenodd\"\r\n          d=\"M24.3428 3.13232C28.9191 8.87177 28.5505 17.2573 23.2373 22.5706C17.528 28.2799 8.27148 28.2799 2.56223 22.5706C2.2825 22.2909 2.01648 22.0026 1.76416 21.7067C4.02814 27.3486 9.54881 31.3326 16 31.3326C24.4683 31.3326 31.3332 24.4677 31.3332 15.9994C31.3332 10.6078 28.5504 5.8661 24.3428 3.13232Z\"\r\n          fill=\"black\"\r\n        />\r\n      </g>\r\n      <g style={{ mixBlendMode: 'multiply' }} opacity=\"0.1\">\r\n        <path\r\n          fillRule=\"evenodd\"\r\n          clipRule=\"evenodd\"\r\n          d=\"M25.7713 4.18262C30.6308 10.2119 30.2607 19.061 24.6609 24.6608C19.0615 30.2602 10.2132 30.6307 4.18396 25.7722C6.99643 29.1689 11.2455 31.3329 16 31.3329C24.4683 31.3329 31.3332 24.468 31.3332 15.9997C31.3332 11.2446 29.1687 6.99508 25.7713 4.18262Z\"\r\n          fill=\"black\"\r\n        />\r\n      </g>\r\n      <g style={{ mixBlendMode: 'soft-light' }}>\r\n        <path\r\n          fillRule=\"evenodd\"\r\n          clipRule=\"evenodd\"\r\n          d=\"M3.48969 24.8677C0.151051 18.7651 0.974979 11.0636 6.01931 6.01927C11.0639 0.974682 18.7659 0.15093 24.8687 3.49016C22.365 1.71201 19.3046 0.666603 16 0.666603C7.53165 0.666603 0.666733 7.53152 0.666733 15.9998C0.666733 19.3041 1.7119 22.3642 3.48969 24.8677Z\"\r\n          fill=\"white\"\r\n        />\r\n      </g>\r\n      <g style={{ mixBlendMode: 'soft-light' }}>\r\n        <path\r\n          fillRule=\"evenodd\"\r\n          clipRule=\"evenodd\"\r\n          d=\"M2.10075 9.5143C3.77271 5.93677 6.78528 3.11129 10.4921 1.68422C10.546 1.73235 10.5987 1.78219 10.6502 1.83374C12.4838 3.66728 10.9119 5.7442 8.66145 7.99465C6.411 10.2451 4.33417 11.8169 2.50064 9.98335C2.35338 9.83609 2.22013 9.6793 2.10075 9.5143Z\"\r\n          fill=\"white\"\r\n        />\r\n      </g>\r\n    </Svg>\r\n  )\r\n}\r\n\r\nexport const LilacBall: React.FC<SvgProps> = (props) => {\r\n  return (\r\n    <Svg viewBox=\"0 0 32 32\" {...props}>\r\n      <circle cx=\"16\" cy=\"16\" r=\"16\" fill=\"#A881FC\" />\r\n      <g style={{ mixBlendMode: 'multiply' }} opacity=\"0.1\">\r\n        <path\r\n          fillRule=\"evenodd\"\r\n          clipRule=\"evenodd\"\r\n          d=\"M24.3428 3.13232C28.9191 8.87177 28.5505 17.2573 23.2373 22.5706C17.528 28.2799 8.27148 28.2799 2.56223 22.5706C2.2825 22.2909 2.01648 22.0026 1.76416 21.7067C4.02814 27.3486 9.54881 31.3326 16 31.3326C24.4683 31.3326 31.3332 24.4677 31.3332 15.9994C31.3332 10.6078 28.5504 5.8661 24.3428 3.13232Z\"\r\n          fill=\"black\"\r\n        />\r\n      </g>\r\n      <g style={{ mixBlendMode: 'multiply' }} opacity=\"0.1\">\r\n        <path\r\n          fillRule=\"evenodd\"\r\n          clipRule=\"evenodd\"\r\n          d=\"M25.7713 4.18262C30.6308 10.2119 30.2607 19.061 24.6609 24.6608C19.0615 30.2602 10.2132 30.6307 4.18396 25.7722C6.99643 29.1689 11.2455 31.3329 16 31.3329C24.4683 31.3329 31.3332 24.468 31.3332 15.9997C31.3332 11.2446 29.1687 6.99508 25.7713 4.18262Z\"\r\n          fill=\"black\"\r\n        />\r\n      </g>\r\n      <g style={{ mixBlendMode: 'soft-light' }}>\r\n        <path\r\n          fillRule=\"evenodd\"\r\n          clipRule=\"evenodd\"\r\n          d=\"M3.48969 24.8677C0.151051 18.7651 0.974979 11.0636 6.01931 6.01927C11.0639 0.974682 18.7659 0.15093 24.8687 3.49016C22.365 1.71201 19.3046 0.666603 16 0.666603C7.53165 0.666603 0.666733 7.53152 0.666733 15.9998C0.666733 19.3041 1.7119 22.3642 3.48969 24.8677Z\"\r\n          fill=\"white\"\r\n        />\r\n      </g>\r\n      <g style={{ mixBlendMode: 'soft-light' }}>\r\n        <path\r\n          fillRule=\"evenodd\"\r\n          clipRule=\"evenodd\"\r\n          d=\"M2.10075 9.5143C3.77271 5.93677 6.78528 3.11129 10.4921 1.68422C10.546 1.73235 10.5987 1.78219 10.6502 1.83374C12.4838 3.66728 10.9119 5.7442 8.66145 7.99465C6.411 10.2451 4.33417 11.8169 2.50064 9.98335C2.35338 9.83609 2.22013 9.6793 2.10075 9.5143Z\"\r\n          fill=\"white\"\r\n        />\r\n      </g>\r\n    </Svg>\r\n  )\r\n}\r\n\r\nexport const TealBall: React.FC<SvgProps> = (props) => {\r\n  return (\r\n    <Svg viewBox=\"0 0 32 32\" {...props}>\r\n      <circle cx=\"16\" cy=\"16\" r=\"16\" fill=\"#1FC7D4\" />\r\n      <g style={{ mixBlendMode: 'multiply' }} opacity=\"0.1\">\r\n        <path\r\n          fillRule=\"evenodd\"\r\n          clipRule=\"evenodd\"\r\n          d=\"M24.3428 3.13232C28.9191 8.87177 28.5505 17.2573 23.2373 22.5706C17.528 28.2799 8.27148 28.2799 2.56223 22.5706C2.2825 22.2909 2.01648 22.0026 1.76416 21.7067C4.02814 27.3486 9.54881 31.3326 16 31.3326C24.4683 31.3326 31.3332 24.4677 31.3332 15.9994C31.3332 10.6078 28.5504 5.8661 24.3428 3.13232Z\"\r\n          fill=\"black\"\r\n        />\r\n      </g>\r\n      <g style={{ mixBlendMode: 'multiply' }} opacity=\"0.1\">\r\n        <path\r\n          fillRule=\"evenodd\"\r\n          clipRule=\"evenodd\"\r\n          d=\"M25.7713 4.18262C30.6308 10.2119 30.2607 19.061 24.6609 24.6608C19.0615 30.2602 10.2132 30.6307 4.18396 25.7722C6.99643 29.1689 11.2455 31.3329 16 31.3329C24.4683 31.3329 31.3332 24.468 31.3332 15.9997C31.3332 11.2446 29.1687 6.99508 25.7713 4.18262Z\"\r\n          fill=\"black\"\r\n        />\r\n      </g>\r\n      <g style={{ mixBlendMode: 'soft-light' }}>\r\n        <path\r\n          fillRule=\"evenodd\"\r\n          clipRule=\"evenodd\"\r\n          d=\"M3.48969 24.8677C0.151051 18.7651 0.974979 11.0636 6.01931 6.01927C11.0639 0.974682 18.7659 0.15093 24.8687 3.49016C22.365 1.71201 19.3046 0.666603 16 0.666603C7.53165 0.666603 0.666733 7.53152 0.666733 15.9998C0.666733 19.3041 1.7119 22.3642 3.48969 24.8677Z\"\r\n          fill=\"white\"\r\n        />\r\n      </g>\r\n      <g style={{ mixBlendMode: 'soft-light' }}>\r\n        <path\r\n          fillRule=\"evenodd\"\r\n          clipRule=\"evenodd\"\r\n          d=\"M2.10075 9.5143C3.77271 5.93677 6.78528 3.11129 10.4921 1.68422C10.546 1.73235 10.5987 1.78219 10.6502 1.83374C12.4838 3.66728 10.9119 5.7442 8.66145 7.99465C6.411 10.2451 4.33417 11.8169 2.50064 9.98335C2.35338 9.83609 2.22013 9.6793 2.10075 9.5143Z\"\r\n          fill=\"white\"\r\n        />\r\n      </g>\r\n    </Svg>\r\n  )\r\n}\r\n\r\nexport const AquaBall: React.FC<SvgProps> = (props) => {\r\n  return (\r\n    <Svg viewBox=\"0 0 32 32\" {...props}>\r\n      <circle cx=\"16\" cy=\"16\" r=\"16\" fill=\"#31D0AA\" />\r\n      <g style={{ mixBlendMode: 'multiply' }} opacity=\"0.1\">\r\n        <path\r\n          fillRule=\"evenodd\"\r\n          clipRule=\"evenodd\"\r\n          d=\"M24.3428 3.13232C28.9191 8.87177 28.5505 17.2573 23.2373 22.5706C17.528 28.2799 8.27148 28.2799 2.56223 22.5706C2.2825 22.2909 2.01648 22.0026 1.76416 21.7067C4.02814 27.3486 9.54881 31.3326 16 31.3326C24.4683 31.3326 31.3332 24.4677 31.3332 15.9994C31.3332 10.6078 28.5504 5.8661 24.3428 3.13232Z\"\r\n          fill=\"black\"\r\n        />\r\n      </g>\r\n      <g style={{ mixBlendMode: 'multiply' }} opacity=\"0.1\">\r\n        <path\r\n          fillRule=\"evenodd\"\r\n          clipRule=\"evenodd\"\r\n          d=\"M25.7713 4.18262C30.6308 10.2119 30.2607 19.061 24.6609 24.6608C19.0615 30.2602 10.2132 30.6307 4.18396 25.7722C6.99643 29.1689 11.2455 31.3329 16 31.3329C24.4683 31.3329 31.3332 24.468 31.3332 15.9997C31.3332 11.2446 29.1687 6.99508 25.7713 4.18262Z\"\r\n          fill=\"black\"\r\n        />\r\n      </g>\r\n      <g style={{ mixBlendMode: 'soft-light' }}>\r\n        <path\r\n          fillRule=\"evenodd\"\r\n          clipRule=\"evenodd\"\r\n          d=\"M3.48969 24.8677C0.151051 18.7651 0.974979 11.0636 6.01931 6.01927C11.0639 0.974682 18.7659 0.15093 24.8687 3.49016C22.365 1.71201 19.3046 0.666603 16 0.666603C7.53165 0.666603 0.666733 7.53152 0.666733 15.9998C0.666733 19.3041 1.7119 22.3642 3.48969 24.8677Z\"\r\n          fill=\"white\"\r\n        />\r\n      </g>\r\n      <g style={{ mixBlendMode: 'soft-light' }}>\r\n        <path\r\n          fillRule=\"evenodd\"\r\n          clipRule=\"evenodd\"\r\n          d=\"M2.10075 9.5143C3.77271 5.93677 6.78528 3.11129 10.4921 1.68422C10.546 1.73235 10.5987 1.78219 10.6502 1.83374C12.4838 3.66728 10.9119 5.7442 8.66145 7.99465C6.411 10.2451 4.33417 11.8169 2.50064 9.98335C2.35338 9.83609 2.22013 9.6793 2.10075 9.5143Z\"\r\n          fill=\"white\"\r\n        />\r\n      </g>\r\n    </Svg>\r\n  )\r\n}\r\n\r\nexport const GreenBall: React.FC<SvgProps> = (props) => {\r\n  return (\r\n    <Svg viewBox=\"0 0 32 32\" {...props}>\r\n      <circle cx=\"16\" cy=\"16\" r=\"16\" fill=\"#93D45A\" />\r\n      <g style={{ mixBlendMode: 'multiply' }} opacity=\"0.1\">\r\n        <path\r\n          fillRule=\"evenodd\"\r\n          clipRule=\"evenodd\"\r\n          d=\"M24.3428 3.13232C28.9191 8.87177 28.5505 17.2573 23.2373 22.5706C17.528 28.2799 8.27148 28.2799 2.56223 22.5706C2.2825 22.2909 2.01648 22.0026 1.76416 21.7067C4.02814 27.3486 9.54881 31.3326 16 31.3326C24.4683 31.3326 31.3332 24.4677 31.3332 15.9994C31.3332 10.6078 28.5504 5.8661 24.3428 3.13232Z\"\r\n          fill=\"black\"\r\n        />\r\n      </g>\r\n      <g style={{ mixBlendMode: 'multiply' }} opacity=\"0.1\">\r\n        <path\r\n          fillRule=\"evenodd\"\r\n          clipRule=\"evenodd\"\r\n          d=\"M25.7713 4.18262C30.6308 10.2119 30.2607 19.061 24.6609 24.6608C19.0615 30.2602 10.2132 30.6307 4.18396 25.7722C6.99643 29.1689 11.2455 31.3329 16 31.3329C24.4683 31.3329 31.3332 24.468 31.3332 15.9997C31.3332 11.2446 29.1687 6.99508 25.7713 4.18262Z\"\r\n          fill=\"black\"\r\n        />\r\n      </g>\r\n      <g style={{ mixBlendMode: 'soft-light' }}>\r\n        <path\r\n          fillRule=\"evenodd\"\r\n          clipRule=\"evenodd\"\r\n          d=\"M3.48969 24.8677C0.151051 18.7651 0.974979 11.0636 6.01931 6.01927C11.0639 0.974682 18.7659 0.15093 24.8687 3.49016C22.365 1.71201 19.3046 0.666603 16 0.666603C7.53165 0.666603 0.666733 7.53152 0.666733 15.9998C0.666733 19.3041 1.7119 22.3642 3.48969 24.8677Z\"\r\n          fill=\"white\"\r\n        />\r\n      </g>\r\n      <g style={{ mixBlendMode: 'soft-light' }}>\r\n        <path\r\n          fillRule=\"evenodd\"\r\n          clipRule=\"evenodd\"\r\n          d=\"M2.10075 9.5143C3.77271 5.93677 6.78528 3.11129 10.4921 1.68422C10.546 1.73235 10.5987 1.78219 10.6502 1.83374C12.4838 3.66728 10.9119 5.7442 8.66145 7.99465C6.411 10.2451 4.33417 11.8169 2.50064 9.98335C2.35338 9.83609 2.22013 9.6793 2.10075 9.5143Z\"\r\n          fill=\"white\"\r\n        />\r\n      </g>\r\n    </Svg>\r\n  )\r\n}\r\n\r\nexport const YellowBall: React.FC<SvgProps> = (props) => {\r\n  return (\r\n    <Svg viewBox=\"0 0 32 32\" {...props}>\r\n      <circle cx=\"16\" cy=\"16\" r=\"16\" fill=\"#FFC43C\" />\r\n      <g style={{ mixBlendMode: 'multiply' }} opacity=\"0.1\">\r\n        <path\r\n          fillRule=\"evenodd\"\r\n          clipRule=\"evenodd\"\r\n          d=\"M24.3428 3.13245C28.9191 8.87189 28.5505 17.2575 23.2373 22.5707C17.528 28.28 8.27148 28.28 2.56223 22.5707C2.2825 22.291 2.01648 22.0028 1.76416 21.7068C4.02814 27.3487 9.54881 31.3327 16 31.3327C24.4683 31.3327 31.3332 24.4678 31.3332 15.9995C31.3332 10.6079 28.5504 5.86622 24.3428 3.13245Z\"\r\n          fill=\"black\"\r\n        />\r\n      </g>\r\n      <g style={{ mixBlendMode: 'multiply' }} opacity=\"0.1\">\r\n        <path\r\n          fillRule=\"evenodd\"\r\n          clipRule=\"evenodd\"\r\n          d=\"M25.7714 4.18262C30.6309 10.2119 30.2608 19.061 24.661 24.6608C19.0616 30.2602 10.2134 30.6307 4.18408 25.7722C6.99655 29.1689 11.2456 31.3329 16.0001 31.3329C24.4685 31.3329 31.3334 24.468 31.3334 15.9997C31.3334 11.2446 29.1689 6.99508 25.7714 4.18262Z\"\r\n          fill=\"black\"\r\n        />\r\n      </g>\r\n      <g style={{ mixBlendMode: 'soft-light' }}>\r\n        <path\r\n          fillRule=\"evenodd\"\r\n          clipRule=\"evenodd\"\r\n          d=\"M3.48969 24.8677C0.151051 18.7651 0.974979 11.0636 6.01931 6.01927C11.0639 0.974682 18.7659 0.15093 24.8687 3.49016C22.365 1.71201 19.3046 0.666603 16 0.666603C7.53165 0.666603 0.666733 7.53152 0.666733 15.9998C0.666733 19.3041 1.7119 22.3642 3.48969 24.8677Z\"\r\n          fill=\"white\"\r\n        />\r\n      </g>\r\n      <g style={{ mixBlendMode: 'soft-light' }}>\r\n        <path\r\n          fillRule=\"evenodd\"\r\n          clipRule=\"evenodd\"\r\n          d=\"M2.10087 9.51443C3.77283 5.93689 6.78541 3.11142 10.4922 1.68435C10.5461 1.73247 10.5988 1.78231 10.6504 1.83387C12.4839 3.6674 10.912 5.74432 8.66157 7.99477C6.41112 10.2452 4.33429 11.817 2.50076 9.98347C2.3535 9.83621 2.22025 9.67943 2.10087 9.51443Z\"\r\n          fill=\"white\"\r\n        />\r\n      </g>\r\n    </Svg>\r\n  )\r\n}\r\n\r\nexport const BallTextWrapper = styled.div`\r\n  top: 45%;\r\n  left: 50%;\r\n  transform: translate(-50%, -50%);\r\n  position: absolute;\r\n`\r\n\r\nexport const BallText = styled(Text)<{ rotationTransform?: number }>`\r\n  color: #000000;\r\n  text-shadow: -0.75px -0.75px 0 white, 0.75px -0.75px 0 white, -0.75px 0.75px 0 white, 0.75px 0.75px 0 white;\r\n  transform: rotate(${({ rotationTransform }) => rotationTransform || 0}deg);\r\n`\r\n\r\nexport type BallColor = 'pink' | 'lilac' | 'teal' | 'aqua' | 'green' | 'yellow'\r\n\r\ninterface BallWithNumberProps {\r\n  color: BallColor\r\n  number: string\r\n  size?: string\r\n  fontSize?: string\r\n  rotationTransform?: number\r\n}\r\n\r\nconst ballsMap = {\r\n  pink: PinkBall,\r\n  lilac: LilacBall,\r\n  teal: TealBall,\r\n  aqua: AquaBall,\r\n  green: GreenBall,\r\n  yellow: YellowBall,\r\n}\r\n\r\nexport const BallWithNumber: React.FC<BallWithNumberProps> = ({ color, number, size, fontSize, rotationTransform }) => {\r\n  const BallComponent = ballsMap[color]\r\n  return (\r\n    <Flex alignItems=\"center\" justifyContent=\"center\" position=\"relative\" mx=\"2px\">\r\n      <BallComponent width={size ?? '32px'} height={size ?? '32px'} />\r\n      <BallTextWrapper>\r\n        <BallText rotationTransform={rotationTransform} bold fontSize={fontSize ?? '16px'}>\r\n          {number}\r\n        </BallText>\r\n      </BallTextWrapper>\r\n    </Flex>\r\n  )\r\n}\r\n","import { useEffect, useReducer, useRef } from 'react'\r\nimport { noop } from 'lodash'\r\nimport { useWeb3React } from '@web3-react/core'\r\nimport { ethers } from 'ethers'\r\nimport useToast from 'hooks/useToast'\r\nimport { useTranslation } from 'contexts/Localization'\r\n\r\ntype LoadingState = 'idle' | 'loading' | 'success' | 'fail'\r\n\r\ntype Action =\r\n  | { type: 'requires_approval' }\r\n  | { type: 'approve_sending' }\r\n  | { type: 'approve_receipt' }\r\n  | { type: 'approve_error' }\r\n  | { type: 'confirm_sending' }\r\n  | { type: 'confirm_receipt' }\r\n  | { type: 'confirm_error' }\r\n\r\ninterface State {\r\n  approvalState: LoadingState\r\n  confirmState: LoadingState\r\n}\r\n\r\nconst initialState: State = {\r\n  approvalState: 'idle',\r\n  confirmState: 'idle',\r\n}\r\n\r\nconst reducer = (state: State, actions: Action): State => {\r\n  switch (actions.type) {\r\n    case 'requires_approval':\r\n      return {\r\n        ...state,\r\n        approvalState: 'success',\r\n      }\r\n    case 'approve_sending':\r\n      return {\r\n        ...state,\r\n        approvalState: 'loading',\r\n      }\r\n    case 'approve_receipt':\r\n      return {\r\n        ...state,\r\n        approvalState: 'success',\r\n      }\r\n    case 'approve_error':\r\n      return {\r\n        ...state,\r\n        approvalState: 'fail',\r\n      }\r\n    case 'confirm_sending':\r\n      return {\r\n        ...state,\r\n        confirmState: 'loading',\r\n      }\r\n    case 'confirm_receipt':\r\n      return {\r\n        ...state,\r\n        confirmState: 'success',\r\n      }\r\n    case 'confirm_error':\r\n      return {\r\n        ...state,\r\n        confirmState: 'fail',\r\n      }\r\n    default:\r\n      return state\r\n  }\r\n}\r\n\r\ninterface OnSuccessProps {\r\n  state: State\r\n  receipt: ethers.providers.TransactionReceipt\r\n}\r\n\r\ninterface ApproveConfirmTransaction {\r\n  onApprove: () => Promise<ethers.providers.TransactionResponse>\r\n  onConfirm: (params?) => Promise<ethers.providers.TransactionResponse>\r\n  onRequiresApproval?: () => Promise<boolean>\r\n  onSuccess: ({ state, receipt }: OnSuccessProps) => void\r\n  onApproveSuccess?: ({ state, receipt }: OnSuccessProps) => void\r\n}\r\n\r\nconst useApproveConfirmTransaction = ({\r\n  onApprove,\r\n  onConfirm,\r\n  onRequiresApproval,\r\n  onSuccess = noop,\r\n  onApproveSuccess = noop,\r\n}: ApproveConfirmTransaction) => {\r\n  const { t } = useTranslation()\r\n  const { account } = useWeb3React()\r\n  const [state, dispatch] = useReducer(reducer, initialState)\r\n  const handlePreApprove = useRef(onRequiresApproval)\r\n  const { toastError } = useToast()\r\n\r\n  // Check if approval is necessary, re-check if account changes\r\n  useEffect(() => {\r\n    if (account && handlePreApprove.current) {\r\n      handlePreApprove.current().then((result) => {\r\n        if (result) {\r\n          dispatch({ type: 'requires_approval' })\r\n        }\r\n      })\r\n    }\r\n  }, [account, handlePreApprove, dispatch])\r\n\r\n  return {\r\n    isApproving: state.approvalState === 'loading',\r\n    isApproved: state.approvalState === 'success',\r\n    isConfirming: state.confirmState === 'loading',\r\n    isConfirmed: state.confirmState === 'success',\r\n    hasApproveFailed: state.approvalState === 'fail',\r\n    hasConfirmFailed: state.confirmState === 'fail',\r\n    handleApprove: async () => {\r\n      try {\r\n        const tx = await onApprove()\r\n        dispatch({ type: 'approve_sending' })\r\n        const receipt = await tx.wait()\r\n        if (receipt.status) {\r\n          dispatch({ type: 'approve_receipt' })\r\n          onApproveSuccess({ state, receipt })\r\n        }\r\n      } catch (error) {\r\n        dispatch({ type: 'approve_error' })\r\n        toastError(t('Error'), t('Please try again. Confirm the transaction and make sure you are paying enough gas!'))\r\n      }\r\n    },\r\n    handleConfirm: async (params = {}) => {\r\n      dispatch({ type: 'confirm_sending' })\r\n      try {\r\n        const tx = await onConfirm(params)\r\n        const receipt = await tx.wait()\r\n        if (receipt.status) {\r\n          dispatch({ type: 'confirm_receipt' })\r\n          onSuccess({ state, receipt })\r\n        }\r\n      } catch (error) {\r\n        dispatch({ type: 'confirm_error' })\r\n        toastError(t('Error'), t('Please try again. Confirm the transaction and make sure you are paying enough gas!'))\r\n      }\r\n    },\r\n  }\r\n}\r\n\r\nexport default useApproveConfirmTransaction\r\n","import React from 'react'\r\nimport styled from 'styled-components'\r\nimport { ChevronRightIcon, Button as UIKitButton, AutoRenewIcon, ChevronDownIcon, Box, Flex } from '@pancakeswap/uikit'\r\nimport { useTranslation } from 'contexts/Localization'\r\n\r\nexport enum ButtonArrangement {\r\n  ROW = 'row',\r\n  SEQUENTIAL = 'sequential',\r\n}\r\n\r\ninterface ApproveConfirmButtonsProps {\r\n  isApproveDisabled: boolean\r\n  isApproving: boolean\r\n  isConfirming: boolean\r\n  isConfirmDisabled: boolean\r\n  onApprove: () => void\r\n  onConfirm: () => void\r\n  buttonArrangement?: ButtonArrangement\r\n  confirmLabel?: string\r\n  confirmId?: string\r\n}\r\n\r\nconst StyledApproveConfirmButtonRow = styled.div`\r\n  align-items: center;\r\n  display: grid;\r\n  grid-template-columns: 1fr;\r\n  justify-content: center;\r\n\r\n  ${({ theme }) => theme.mediaQueries.md} {\r\n    grid-template-columns: 1fr 24px 1fr;\r\n  }\r\n`\r\n\r\nconst Button = styled(UIKitButton)`\r\n  width: 100%;\r\n\r\n  ${({ theme }) => theme.mediaQueries.md} {\r\n    min-width: 160px;\r\n  }\r\n`\r\n\r\nconst iconAttrs = { width: '24px', color: 'textDisabled' }\r\n\r\nconst ChevronRight = styled(ChevronRightIcon).attrs(iconAttrs)`\r\n  display: none;\r\n\r\n  ${({ theme }) => theme.mediaQueries.md} {\r\n    display: block;\r\n  }\r\n`\r\n\r\nconst ChevronBottom = styled(ChevronDownIcon).attrs(iconAttrs)`\r\n  display: block;\r\n\r\n  ${({ theme }) => theme.mediaQueries.md} {\r\n    display: none;\r\n  }\r\n`\r\n\r\nconst spinnerIcon = <AutoRenewIcon spin color=\"currentColor\" />\r\n\r\nconst ApproveConfirmButtons: React.FC<ApproveConfirmButtonsProps> = ({\r\n  isApproveDisabled,\r\n  isApproving,\r\n  isConfirming,\r\n  isConfirmDisabled,\r\n  onApprove,\r\n  onConfirm,\r\n  buttonArrangement = ButtonArrangement.ROW,\r\n  confirmLabel,\r\n  confirmId,\r\n}) => {\r\n  const { t } = useTranslation()\r\n  const confirmButtonText = confirmLabel ?? t('Confirm')\r\n\r\n  const ApproveConfirmRow = () => {\r\n    return (\r\n      <StyledApproveConfirmButtonRow>\r\n        <Box>\r\n          <Button\r\n            disabled={isApproveDisabled}\r\n            onClick={onApprove}\r\n            endIcon={isApproving ? spinnerIcon : undefined}\r\n            isLoading={isApproving}\r\n          >\r\n            {isApproving ? t('Enabling') : t('Enable')}\r\n          </Button>\r\n        </Box>\r\n        <Flex justifyContent=\"center\">\r\n          <ChevronRight />\r\n          <ChevronBottom />\r\n        </Flex>\r\n        <Box>\r\n          <Button\r\n            id={confirmId}\r\n            onClick={onConfirm}\r\n            disabled={isConfirmDisabled}\r\n            isLoading={isConfirming}\r\n            endIcon={isConfirming ? spinnerIcon : undefined}\r\n          >\r\n            {isConfirming ? t('Confirming') : confirmButtonText}\r\n          </Button>\r\n        </Box>\r\n      </StyledApproveConfirmButtonRow>\r\n    )\r\n  }\r\n\r\n  const ApproveConfirmSequential = () => {\r\n    return (\r\n      <>\r\n        {isApproveDisabled ? (\r\n          <Box>\r\n            <Button\r\n              id={confirmId}\r\n              onClick={onConfirm}\r\n              disabled={isConfirmDisabled}\r\n              isLoading={isConfirming}\r\n              endIcon={isConfirming ? spinnerIcon : undefined}\r\n            >\r\n              {isConfirming ? t('Confirming') : confirmButtonText}\r\n            </Button>\r\n          </Box>\r\n        ) : (\r\n          <Box>\r\n            <Button onClick={onApprove} endIcon={isApproving ? spinnerIcon : undefined} isLoading={isApproving}>\r\n              {isApproving ? t('Enabling') : t('Enable')}\r\n            </Button>\r\n          </Box>\r\n        )}\r\n      </>\r\n    )\r\n  }\r\n\r\n  return buttonArrangement === ButtonArrangement.ROW ? ApproveConfirmRow() : ApproveConfirmSequential()\r\n}\r\n\r\nexport default ApproveConfirmButtons\r\n","import React from 'react'\r\nimport { Button, useWalletModal } from '@pancakeswap/uikit'\r\nimport useAuth from 'hooks/useAuth'\r\nimport { useTranslation } from 'contexts/Localization'\r\n\r\nconst ConnectWalletButton = (props) => {\r\n  const { t } = useTranslation()\r\n  const { login, logout } = useAuth()\r\n  const { onPresentConnectModal } = useWalletModal(login, logout, t)\r\n\r\n  return (\r\n    <Button className='primaryButton' onClick={onPresentConnectModal} {...props}>\r\n      {t('Connect Wallet')}\r\n    </Button>\r\n  )\r\n}\r\n\r\nexport default ConnectWalletButton\r\n","import React, { useEffect, useState, useMemo, useCallback } from 'react'\r\nimport styled from 'styled-components'\r\nimport BigNumber from 'bignumber.js'\r\nimport { ethers } from 'ethers'\r\nimport {\r\n  Modal,\r\n  Text,\r\n  Flex,\r\n  HelpIcon,\r\n  BalanceInput,\r\n  Ticket,\r\n  useTooltip,\r\n  Skeleton,\r\n  Button,\r\n  ArrowForwardIcon,\r\n} from '@pancakeswap/uikit'\r\nimport { useTranslation } from 'contexts/Localization'\r\nimport { useWeb3React } from '@web3-react/core'\r\nimport tokens from 'config/constants/tokens.lottery'\r\nimport * as token from 'config/constants/tokens.lottery'\r\nimport { getFullDisplayBalance } from 'utils/formatBalance'\r\nimport { BIG_ZERO, ethersToBigNumber } from 'utils/bigNumber'\r\nimport { useAppDispatch } from 'state'\r\nimport { usePriceCakeBusd } from 'state/farms/hooks'\r\nimport { useLottery } from 'state/lottery/hooks'\r\nimport { fetchUserTicketsAndLotteries } from 'state/lottery'\r\nimport useTheme from 'hooks/useTheme'\r\nimport useTokenBalance, { FetchStatus } from 'hooks/useTokenBalance'\r\nimport useApproveConfirmTransaction from 'hooks/useApproveConfirmTransaction'\r\nimport { useCake, useLotteryV2Contract } from 'hooks/useContract'\r\nimport { useCallWithGasPrice } from 'hooks/useCallWithGasPrice'\r\nimport useToast from 'hooks/useToast'\r\nimport ConnectWalletButton from 'components/ConnectWalletButton'\r\nimport { ToastDescriptionWithTx } from 'components/Toast'\r\nimport ApproveConfirmButtons, { ButtonArrangement } from 'components/ApproveConfirmButtons'\r\nimport NumTicketsToBuyButton from './NumTicketsToBuyButton'\r\nimport EditNumbersModal from './EditNumbersModal'\r\nimport { useTicketsReducer } from './useTicketsReducer'\r\nimport BuyTokenButton from '../BuyTokenButton'\r\n\r\nconst StyledModal = styled(Modal)`\r\n  min-width: 280px;\r\n  max-width: 320px;\r\n`\r\n\r\nconst ShortcutButtonsWrapper = styled(Flex)<{ isVisible: boolean }>`\r\n  justify-content: space-between;\r\n  margin-top: 8px;\r\n  margin-bottom: 24px;\r\n  display: ${({ isVisible }) => (isVisible ? 'flex' : 'none')};\r\n`\r\n\r\ninterface BuyTicketsModalProps {\r\n  onDismiss?: () => void\r\n}\r\n\r\nenum BuyingStage {\r\n  BUY = 'Buy',\r\n  EDIT = 'Edit',\r\n}\r\n\r\nconst BuyTicketsModal: React.FC<BuyTicketsModalProps> = ({ onDismiss }) => {\r\n  const { account } = useWeb3React()\r\n  const { t } = useTranslation()\r\n  const { theme } = useTheme()\r\n  const {\r\n    maxNumberTicketsPerBuyOrClaim,\r\n    currentLotteryId,\r\n    currentRound: {\r\n      priceTicketInCake,\r\n      discountDivisor,\r\n      userTickets: { tickets: userCurrentTickets },\r\n    },\r\n  } = useLottery()\r\n  const { callWithGasPrice } = useCallWithGasPrice()\r\n  const [ticketsToBuy, setTicketsToBuy] = useState('')\r\n  const [discountValue, setDiscountValue] = useState('')\r\n  const [totalCost, setTotalCost] = useState('')\r\n  const [ticketCostBeforeDiscount, setTicketCostBeforeDiscount] = useState('')\r\n  const [buyingStage, setBuyingStage] = useState<BuyingStage>(BuyingStage.BUY)\r\n  const [maxPossibleTicketPurchase, setMaxPossibleTicketPurchase] = useState(BIG_ZERO)\r\n  const [maxTicketPurchaseExceeded, setMaxTicketPurchaseExceeded] = useState(false)\r\n  const [userNotEnoughCake, setUserNotEnoughCake] = useState(false)\r\n  const lotteryContract = useLotteryV2Contract()\r\n  const cakeContract = useCake()\r\n  const { toastSuccess } = useToast()\r\n  const { balance: userCake, fetchStatus } = useTokenBalance(tokens.cake.address)\r\n  // balance from useTokenBalance causes rerenders in effects as a new BigNumber is instantiated on each render, hence memoising it using the stringified value below.\r\n  const stringifiedUserCake = userCake.toJSON()\r\n  const memoisedUserCake = useMemo(() => new BigNumber(stringifiedUserCake), [stringifiedUserCake])\r\n\r\n  const cakePriceBusd = new BigNumber(token.info().price || 0)\r\n  const dispatch = useAppDispatch()\r\n  const hasFetchedBalance = fetchStatus === FetchStatus.SUCCESS\r\n  const userCakeDisplayBalance = getFullDisplayBalance(userCake, token.info().decimals, 3)\r\n\r\n  const TooltipComponent = () => (\r\n    <>\r\n      <Text mb=\"16px\">\r\n        {t(\r\n          'Buying multiple tickets in a single transaction gives a discount. The discount increases in a linear way, up to the maximum of 100 tickets:',\r\n        )}\r\n      </Text>\r\n      <Text>{t('2 tickets: 0.05%')}</Text>\r\n      <Text>{t('50 tickets: 2.45%')}</Text>\r\n      <Text>{t('100 tickets: 4.95%')}</Text>\r\n    </>\r\n  )\r\n  const { targetRef, tooltip, tooltipVisible } = useTooltip(<TooltipComponent />, {\r\n    placement: 'bottom-end',\r\n    tooltipOffset: [20, 10],\r\n  })\r\n\r\n  const limitNumberByMaxTicketsPerBuy = useCallback(\r\n    (number: BigNumber) => {\r\n      return number.gt(maxNumberTicketsPerBuyOrClaim) ? maxNumberTicketsPerBuyOrClaim : number\r\n    },\r\n    [maxNumberTicketsPerBuyOrClaim],\r\n  )\r\n\r\n  const getTicketCostAfterDiscount = useCallback(\r\n    (numberTickets: BigNumber) => {\r\n      const totalAfterDiscount = priceTicketInCake\r\n        .times(numberTickets)\r\n        .times(discountDivisor.plus(1).minus(numberTickets))\r\n        .div(discountDivisor)\r\n      return totalAfterDiscount\r\n    },\r\n    [discountDivisor, priceTicketInCake],\r\n  )\r\n\r\n  const getMaxTicketBuyWithDiscount = useCallback(\r\n    (numberTickets: BigNumber) => {\r\n      const costAfterDiscount = getTicketCostAfterDiscount(numberTickets)\r\n      const costBeforeDiscount = priceTicketInCake.times(numberTickets)\r\n      const discountAmount = costBeforeDiscount.minus(costAfterDiscount)\r\n      const ticketsBoughtWithDiscount = discountAmount.div(priceTicketInCake)\r\n      const overallTicketBuy = numberTickets.plus(ticketsBoughtWithDiscount)\r\n      return { overallTicketBuy, ticketsBoughtWithDiscount }\r\n    },\r\n    [getTicketCostAfterDiscount, priceTicketInCake],\r\n  )\r\n\r\n  const validateInput = useCallback(\r\n    (inputNumber: BigNumber) => {\r\n      const limitedNumberTickets = limitNumberByMaxTicketsPerBuy(inputNumber)\r\n      const cakeCostAfterDiscount = getTicketCostAfterDiscount(limitedNumberTickets)\r\n\r\n      if (cakeCostAfterDiscount.gt(userCake)) {\r\n        setUserNotEnoughCake(true)\r\n      } else if (limitedNumberTickets.eq(maxNumberTicketsPerBuyOrClaim)) {\r\n        setMaxTicketPurchaseExceeded(true)\r\n      } else {\r\n        setUserNotEnoughCake(false)\r\n        setMaxTicketPurchaseExceeded(false)\r\n      }\r\n    },\r\n    [limitNumberByMaxTicketsPerBuy, getTicketCostAfterDiscount, maxNumberTicketsPerBuyOrClaim, userCake],\r\n  )\r\n\r\n  useEffect(() => {\r\n    const getMaxPossiblePurchase = () => {\r\n      const maxBalancePurchase = memoisedUserCake.div(priceTicketInCake)\r\n      const limitedMaxPurchase = limitNumberByMaxTicketsPerBuy(maxBalancePurchase)\r\n      let maxPurchase\r\n\r\n      // If the users' max CAKE balance purchase is less than the contract limit - factor the discount logic into the max number of tickets they can purchase\r\n      if (limitedMaxPurchase.lt(maxNumberTicketsPerBuyOrClaim)) {\r\n        // Get max tickets purchasable with the users' balance, as well as using the discount to buy tickets\r\n        const { overallTicketBuy: maxPlusDiscountTickets } = getMaxTicketBuyWithDiscount(limitedMaxPurchase)\r\n\r\n        // Knowing how many tickets they can buy when counting the discount - plug that total in, and see how much that total will get discounted\r\n        const { ticketsBoughtWithDiscount: secondTicketDiscountBuy } =\r\n          getMaxTicketBuyWithDiscount(maxPlusDiscountTickets)\r\n\r\n        // Add the additional tickets that can be bought with the discount, to the original max purchase\r\n        maxPurchase = limitedMaxPurchase.plus(secondTicketDiscountBuy)\r\n      } else {\r\n        maxPurchase = limitedMaxPurchase\r\n      }\r\n\r\n      if (hasFetchedBalance && maxPurchase.lt(1)) {\r\n        setUserNotEnoughCake(true)\r\n      } else {\r\n        setUserNotEnoughCake(false)\r\n      }\r\n\r\n      setMaxPossibleTicketPurchase(maxPurchase)\r\n    }\r\n    getMaxPossiblePurchase()\r\n  }, [\r\n    maxNumberTicketsPerBuyOrClaim,\r\n    priceTicketInCake,\r\n    memoisedUserCake,\r\n    limitNumberByMaxTicketsPerBuy,\r\n    getTicketCostAfterDiscount,\r\n    getMaxTicketBuyWithDiscount,\r\n    hasFetchedBalance,\r\n  ])\r\n\r\n  useEffect(() => {\r\n    const numberOfTicketsToBuy = new BigNumber(ticketsToBuy)\r\n    const costAfterDiscount = getTicketCostAfterDiscount(numberOfTicketsToBuy)\r\n    const costBeforeDiscount = priceTicketInCake.times(numberOfTicketsToBuy)\r\n    const discountBeingApplied = costBeforeDiscount.minus(costAfterDiscount)\r\n    setTicketCostBeforeDiscount(costBeforeDiscount.gt(0) ? getFullDisplayBalance(costBeforeDiscount, token.info().decimals) : '0')\r\n    setTotalCost(costAfterDiscount.gt(0) ? getFullDisplayBalance(costAfterDiscount) : '0')\r\n    setDiscountValue(discountBeingApplied.gt(0) ? getFullDisplayBalance(discountBeingApplied, token.info().decimals, 5) : '0')\r\n  }, [ticketsToBuy, priceTicketInCake, discountDivisor, getTicketCostAfterDiscount])\r\n\r\n  const getNumTicketsByPercentage = (percentage: number): number => {\r\n    const percentageOfMaxTickets = maxPossibleTicketPurchase.gt(0)\r\n      ? maxPossibleTicketPurchase.div(new BigNumber(100)).times(new BigNumber(percentage))\r\n      : BIG_ZERO\r\n    return Math.floor(percentageOfMaxTickets.toNumber())\r\n  }\r\n\r\n  const tenPercentOfBalance = getNumTicketsByPercentage(10)\r\n  const twentyFivePercentOfBalance = getNumTicketsByPercentage(25)\r\n  const fiftyPercentOfBalance = getNumTicketsByPercentage(50)\r\n  const oneHundredPercentOfBalance = getNumTicketsByPercentage(100)\r\n\r\n  const handleInputChange = (input: string) => {\r\n    // Force input to integer\r\n    const inputAsInt = parseInt(input, 10)\r\n    const inputAsBN = new BigNumber(inputAsInt)\r\n    const limitedNumberTickets = limitNumberByMaxTicketsPerBuy(inputAsBN)\r\n    validateInput(inputAsBN)\r\n    setTicketsToBuy(inputAsInt ? limitedNumberTickets.toString() : '')\r\n  }\r\n\r\n  const handleNumberButtonClick = (number: number) => {\r\n    setTicketsToBuy(number.toFixed())\r\n    setUserNotEnoughCake(false)\r\n    setMaxTicketPurchaseExceeded(false)\r\n  }\r\n\r\n  const [updateTicket, randomize, tickets, allComplete, getTicketsForPurchase] = useTicketsReducer(\r\n    parseInt(ticketsToBuy, 10),\r\n    userCurrentTickets,\r\n  )\r\n\r\n  const { isApproving, isApproved, isConfirmed, isConfirming, handleApprove, handleConfirm } =\r\n    useApproveConfirmTransaction({\r\n      onRequiresApproval: async () => {\r\n        try {\r\n          const response = await cakeContract.allowance(account, lotteryContract.address)\r\n          const currentAllowance = ethersToBigNumber(response)\r\n          return currentAllowance.gt(0)\r\n        } catch (error) {\r\n          return false\r\n        }\r\n      },\r\n      onApprove: () => {\r\n        return callWithGasPrice(cakeContract, 'approve', [lotteryContract.address, ethers.constants.MaxUint256])\r\n      },\r\n      onApproveSuccess: async ({ receipt }) => {\r\n        toastSuccess(\r\n          t('Contract enabled - you can now purchase tickets'),\r\n          <ToastDescriptionWithTx txHash={receipt.transactionHash} />,\r\n        )\r\n      },\r\n      onConfirm: () => {\r\n        const ticketsForPurchase = getTicketsForPurchase()\r\n        return callWithGasPrice(lotteryContract, 'buyTickets', [currentLotteryId, ticketsForPurchase])\r\n      },\r\n      onSuccess: async ({ receipt }) => {\r\n        onDismiss()\r\n        dispatch(fetchUserTicketsAndLotteries({ account, currentLotteryId }))\r\n        toastSuccess(t('Lottery tickets purchased!'), <ToastDescriptionWithTx txHash={receipt.transactionHash} />)\r\n      },\r\n    })\r\n\r\n  const getErrorMessage = () => {\r\n    if (userNotEnoughCake) return t(`Insufficient ${token.info().symbol} balance`)\r\n    return t('The maximum number of tickets you can buy in one transaction is %maxTickets%', {\r\n      maxTickets: maxNumberTicketsPerBuyOrClaim.toString(),\r\n    })\r\n  }\r\n\r\n  const percentageDiscount = () => {\r\n    const percentageAsBn = new BigNumber(discountValue).div(new BigNumber(ticketCostBeforeDiscount)).times(100)\r\n    if (percentageAsBn.isNaN() || percentageAsBn.eq(0)) {\r\n      return 0\r\n    }\r\n    return percentageAsBn.toNumber().toFixed(2)\r\n  }\r\n\r\n  const disableBuying =\r\n    !isApproved ||\r\n    isConfirmed ||\r\n    userNotEnoughCake ||\r\n    !ticketsToBuy ||\r\n    new BigNumber(ticketsToBuy).lte(0) ||\r\n    getTicketsForPurchase().length !== parseInt(ticketsToBuy, 10)\r\n\r\n  if (buyingStage === BuyingStage.EDIT) {\r\n    return (\r\n      <EditNumbersModal\r\n        totalCost={totalCost}\r\n        updateTicket={updateTicket}\r\n        randomize={randomize}\r\n        tickets={tickets}\r\n        allComplete={allComplete}\r\n        onConfirm={handleConfirm}\r\n        isConfirming={isConfirming}\r\n        onDismiss={() => setBuyingStage(BuyingStage.BUY)}\r\n      />\r\n    )\r\n  }\r\n\r\n  return (\r\n    <StyledModal title={t('Buy Tickets')} onDismiss={onDismiss} headerBackground={theme.colors.gradients.cardHeader}>\r\n      {tooltipVisible && tooltip}\r\n      <Flex alignItems=\"center\" justifyContent=\"space-between\" mb=\"8px\">\r\n        <Text color=\"textSubtle\">{t('Buy')}:</Text>\r\n        <Flex alignItems=\"center\" minWidth=\"70px\">\r\n          <Text mr=\"4px\" bold>\r\n            {t('Tickets')}\r\n          </Text>\r\n          <Ticket />\r\n        </Flex>\r\n      </Flex>\r\n      <BalanceInput\r\n        isWarning={account && (userNotEnoughCake || maxTicketPurchaseExceeded)}\r\n        placeholder=\"0\"\r\n        value={ticketsToBuy}\r\n        onUserInput={handleInputChange}\r\n        currencyValue={\r\n          cakePriceBusd.gt(0) &&\r\n          `~${ticketsToBuy ? getFullDisplayBalance(priceTicketInCake.times(new BigNumber(ticketsToBuy)), token.info().decimals) : '0.00'} ${token.info().symbol}`\r\n        }\r\n      />\r\n      <Flex alignItems=\"center\" justifyContent=\"flex-end\" mt=\"4px\" mb=\"12px\">\r\n        <Flex justifyContent=\"flex-end\" flexDirection=\"column\">\r\n          {account && (userNotEnoughCake || maxTicketPurchaseExceeded) && (\r\n            <Text fontSize=\"12px\" color=\"failure\">\r\n              {getErrorMessage()}\r\n            </Text>\r\n          )}\r\n          {account && (\r\n            <Flex justifyContent=\"flex-end\">\r\n              <Text fontSize=\"12px\" color=\"textSubtle\" mr=\"4px\">\r\n                {token.info().symbol} {t('Balance')}:\r\n              </Text>\r\n              {hasFetchedBalance ? (\r\n                <Text fontSize=\"12px\" color=\"textSubtle\">\r\n                  {userCakeDisplayBalance}\r\n                </Text>\r\n              ) : (\r\n                <Skeleton width={50} height={12} />\r\n              )}\r\n            </Flex>\r\n          )}\r\n        </Flex>\r\n      </Flex>\r\n\r\n      {account && !hasFetchedBalance ? (\r\n        <Skeleton width=\"100%\" height={20} mt=\"8px\" mb=\"24px\" />\r\n      ) : (\r\n        <ShortcutButtonsWrapper isVisible={account && hasFetchedBalance && oneHundredPercentOfBalance >= 1}>\r\n          {tenPercentOfBalance >= 1 && (\r\n            <NumTicketsToBuyButton onClick={() => handleNumberButtonClick(tenPercentOfBalance)}>\r\n              {hasFetchedBalance ? tenPercentOfBalance : ``}\r\n            </NumTicketsToBuyButton>\r\n          )}\r\n          {twentyFivePercentOfBalance >= 1 && (\r\n            <NumTicketsToBuyButton onClick={() => handleNumberButtonClick(twentyFivePercentOfBalance)}>\r\n              {hasFetchedBalance ? twentyFivePercentOfBalance : ``}\r\n            </NumTicketsToBuyButton>\r\n          )}\r\n          {fiftyPercentOfBalance >= 1 && (\r\n            <NumTicketsToBuyButton onClick={() => handleNumberButtonClick(fiftyPercentOfBalance)}>\r\n              {hasFetchedBalance ? fiftyPercentOfBalance : ``}\r\n            </NumTicketsToBuyButton>\r\n          )}\r\n          {oneHundredPercentOfBalance >= 1 && (\r\n            <NumTicketsToBuyButton onClick={() => handleNumberButtonClick(oneHundredPercentOfBalance)}>\r\n              MAX\r\n            </NumTicketsToBuyButton>\r\n          )}\r\n        </ShortcutButtonsWrapper>\r\n      )}\r\n      <Flex flexDirection=\"column\">\r\n        <Flex mb=\"8px\" justifyContent=\"space-between\">\r\n          <Text color=\"textSubtle\" fontSize=\"14px\">\r\n            {t('Cost')} ({token.info().symbol})\r\n          </Text>\r\n          <Text color=\"textSubtle\" fontSize=\"14px\">\r\n            {priceTicketInCake && getFullDisplayBalance(priceTicketInCake.times(ticketsToBuy || 0), token.info().decimals)} {token.info().symbol}\r\n          </Text>\r\n        </Flex>\r\n        <Flex mb=\"8px\" justifyContent=\"space-between\">\r\n          <Flex>\r\n            <Text display=\"inline\" bold fontSize=\"14px\" mr=\"4px\">\r\n              {discountValue && totalCost ? percentageDiscount() : 0}%\r\n            </Text>\r\n            <Text display=\"inline\" color=\"textSubtle\" fontSize=\"14px\">\r\n              {t('Bulk discount')}\r\n            </Text>\r\n            <Flex alignItems=\"center\" justifyContent=\"center\" ref={targetRef}>\r\n              <HelpIcon ml=\"4px\" width=\"14px\" height=\"14px\" color=\"textSubtle\" />\r\n            </Flex>\r\n          </Flex>\r\n          <Text fontSize=\"14px\" color=\"textSubtle\">\r\n            ~{discountValue} {token.info().symbol}\r\n          </Text>\r\n        </Flex>\r\n        <Flex borderTop={`1px solid ${theme.colors.cardBorder}`} pt=\"8px\" mb=\"24px\" justifyContent=\"space-between\">\r\n          <Text color=\"textSubtle\" fontSize=\"16px\">\r\n            {t('You pay')}\r\n          </Text>\r\n          <Text fontSize=\"16px\" bold>\r\n            ~{totalCost} {token.info().symbol}\r\n          </Text>\r\n        </Flex>\r\n\r\n        {account ? (\r\n          <>\r\n            <ApproveConfirmButtons\r\n              isApproveDisabled={isApproved}\r\n              isApproving={isApproving}\r\n              isConfirmDisabled={disableBuying}\r\n              isConfirming={isConfirming}\r\n              onApprove={handleApprove}\r\n              onConfirm={handleConfirm}\r\n              buttonArrangement={ButtonArrangement.SEQUENTIAL}\r\n              confirmLabel={t('Buy Instantly')}\r\n              confirmId=\"lotteryBuyInstant\"\r\n            />\r\n            {isApproved && (\r\n              <Button\r\n                variant=\"secondary\"\r\n                mt=\"8px\"\r\n                endIcon={\r\n                  <ArrowForwardIcon\r\n                    ml=\"2px\"\r\n                    color={disableBuying || isConfirming ? 'disabled' : 'primary'}\r\n                    height=\"24px\"\r\n                    width=\"24px\"\r\n                  />\r\n                }\r\n                disabled={disableBuying || isConfirming}\r\n                onClick={() => {\r\n                  setBuyingStage(BuyingStage.EDIT)\r\n                }}\r\n              >\r\n                {t('View/Edit Numbers')}\r\n              </Button>\r\n            )}\r\n            <BuyTokenButton disabled={false} width=\"100%\" />\r\n          </>\r\n        ) : (\r\n          <ConnectWalletButton />\r\n        )}\r\n\r\n        <Text mt=\"24px\" fontSize=\"12px\" color=\"textSubtle\">\r\n          {t(\r\n            '\"Buy Instantly\" chooses random numbers, with no duplicates among your tickets. Prices are set before each round starts, equal to $5 at that time. Purchases are final.',\r\n          )}\r\n        </Text>\r\n      </Flex>\r\n    </StyledModal>\r\n  )\r\n}\r\n\r\nexport default BuyTicketsModal\r\n","import React from 'react'\r\nimport styled from 'styled-components'\r\nimport { Button } from '@pancakeswap/uikit'\r\n\r\ninterface NumTicketsToBuyButtonProps {\r\n  onClick: () => void\r\n  disabled?: boolean\r\n}\r\n\r\nconst StyledButton = styled(Button)`\r\n  flex-grow: 1;\r\n`\r\n\r\nconst NumTicketsToBuyButton: React.FC<NumTicketsToBuyButtonProps> = ({ children, onClick, disabled = false }) => {\r\n  return (\r\n    <StyledButton className=\"numTicketsButton\" disabled={disabled} scale=\"xs\" mx=\"2px\" p=\"4px 16px\" variant=\"tertiary\" onClick={onClick}>\r\n      {children}\r\n    </StyledButton>\r\n  )\r\n}\r\n\r\nexport default NumTicketsToBuyButton\r\n","import React, { useState, useRef } from 'react'\r\nimport styled from 'styled-components'\r\nimport { Flex, Text } from '@pancakeswap/uikit'\r\nimport { useTranslation } from 'contexts/Localization'\r\nimport { Ticket, UpdateTicketAction } from './useTicketsReducer'\r\n\r\nconst InputsContainer = styled.div<{ focused: boolean; isDuplicate: boolean }>`\r\n  display: flex;\r\n  justify-content: center;\r\n  align-items: center;\r\n  height: 36px;\r\n  box-sizing: border-box;\r\n  border: 1px solid #d7caec;\r\n  background-color: #eeeaf4;\r\n  border-radius: 16px;\r\n  margin-bottom: 8px;\r\n  ${({ isDuplicate }) =>\r\n    isDuplicate &&\r\n    `\r\n    border: 1px solid #FFB237;\r\n    box-shadow: 0px 0px 0px 2px #FFB237;\r\n  `}\r\n  ${({ focused }) =>\r\n    focused &&\r\n    `\r\n    border: 1px solid #7645D9;\r\n    box-shadow: 0px 0px 0px 2px #E4DAF7;\r\n  `}\r\n`\r\n\r\nconst DigitInput = styled.input`\r\n  border: none;\r\n  height: 32px;\r\n  padding: 0 12px;\r\n  font-size: 16px;\r\n  flex: 1;\r\n  width: 16px;\r\n  text-align: center;\r\n  min-width: 0;\r\n  background-color: transparent;\r\n  caret-color: #7a6faa;\r\n\r\n  &::placeholder {\r\n    text-align: center;\r\n  }\r\n\r\n  &:placeholder-shown {\r\n    text-align: left;\r\n  }\r\n\r\n  &:focus {\r\n    outline: none;\r\n  }\r\n\r\n  &::-webkit-outer-spin-button,\r\n  &::-webkit-inner-spin-button {\r\n    /* display: none; <- Crashes Chrome on hover */\r\n    -webkit-appearance: none;\r\n    margin: 0; /* <-- Apparently some margin are still there even though it's hidden */\r\n  }\r\n\r\n  -moz-appearance: textfield; /* Firefox */\r\n`\r\n\r\n// @ts-ignore\r\nconst countNumbers = window.SO_LotteryConfig.numbersCount\r\nconst getIdLabel = (id: number): string => {\r\n  if (id < 10) return `#00${id}`\r\n  if (id < 100) return `#0${id}`\r\n  return `#${id}`\r\n}\r\n\r\nconst TicketContainer: React.FC<{\r\n  ticket: Ticket\r\n  duplicateWith: number[]\r\n  updateTicket: UpdateTicketAction\r\n  disabled: boolean\r\n}> = ({ ticket, duplicateWith, updateTicket, disabled }) => {\r\n  const [focused, setFocused] = useState(false)\r\n  const containerRef = useRef<HTMLDivElement>(null)\r\n  const digit1 = useRef<HTMLInputElement>(null)\r\n  const digit2 = useRef<HTMLInputElement>(null)\r\n  const digit3 = useRef<HTMLInputElement>(null)\r\n  const digit4 = useRef<HTMLInputElement>(null)\r\n  const digit5 = useRef<HTMLInputElement>(null)\r\n  const digit6 = useRef<HTMLInputElement>(null)\r\n\r\n  const { t } = useTranslation()\r\n\r\n  const digitRefs = [digit1, digit2, digit3, digit4, digit5, digit6]\r\n\r\n  const scrollInputIntoView = () => {\r\n    if (containerRef.current) {\r\n      containerRef.current.scrollIntoView({ block: 'center', behavior: 'smooth' })\r\n    }\r\n  }\r\n\r\n  const onPasteHandler = (e: React.ClipboardEvent) => {\r\n    e.preventDefault()\r\n    const pasteContent = e.clipboardData.getData('Text')\r\n    if (pasteContent.length <= 6 && /^\\d+$/.test(pasteContent)) {\r\n      const filler = Array(6 - pasteContent.length).fill('')\r\n      updateTicket(ticket.id, [...pasteContent.split(''), ...filler])\r\n    }\r\n  }\r\n\r\n  const onFocusHandler = () => {\r\n    scrollInputIntoView()\r\n    setFocused(true)\r\n  }\r\n\r\n  const onBlurHandler = () => {\r\n    setFocused(false)\r\n  }\r\n\r\n  const onChangeHandler = (event: React.KeyboardEvent, digitId: number) => {\r\n    const currentKey = parseInt(event.key, 10)\r\n\r\n    if (['e', 'E', '.', ',', '-', 'Unidentified'].includes(event.key)) {\r\n      event.preventDefault()\r\n      return\r\n    }\r\n\r\n    // Handling numeric inputs\r\n    if (currentKey >= 0 && currentKey <= 9) {\r\n      event.preventDefault()\r\n      const newNumbers = [...ticket.numbers]\r\n      newNumbers[digitId] = `${currentKey}`\r\n      updateTicket(ticket.id, newNumbers)\r\n      const nextDigitId = digitId + 1\r\n      // if we're not on the last digit - auto-tab\r\n      const nextInput = digitRefs[nextDigitId]\r\n      if (nextDigitId !== countNumbers && nextInput.current) {\r\n        nextInput.current.focus()\r\n      }\r\n    }\r\n\r\n    if (event.key === 'Backspace') {\r\n      event.preventDefault()\r\n      // If some number is there - delete the number\r\n      if (ticket.numbers[digitId]) {\r\n        const newNumbers = [...ticket.numbers]\r\n        newNumbers[digitId] = ''\r\n        updateTicket(ticket.id, newNumbers)\r\n      } else {\r\n        // if the cell is empty and user presses backspace - remove previous\r\n        const prevDigitId = digitId - 1\r\n        const nextInput = digitRefs[prevDigitId]\r\n        // prevent focusing on non-existent input\r\n        if (prevDigitId !== -1 && nextInput.current) {\r\n          nextInput.current.focus()\r\n          const newNumbers = [...ticket.numbers]\r\n          newNumbers[prevDigitId] = ''\r\n          updateTicket(ticket.id, newNumbers)\r\n        }\r\n      }\r\n    }\r\n\r\n    if (event.key === 'Delete') {\r\n      event.preventDefault()\r\n      if (ticket.numbers[digitId]) {\r\n        const newNumbers = [...ticket.numbers]\r\n        newNumbers[digitId] = ''\r\n        updateTicket(ticket.id, newNumbers)\r\n      } else {\r\n        // if the cell is empty and user presses delete - remove next\r\n        const nextDigitId = digitId + 1\r\n        const nextInput = digitRefs[nextDigitId]\r\n        // prevent focusing on non-existent input\r\n        if (nextDigitId !== countNumbers && nextInput.current) {\r\n          nextInput.current.focus()\r\n          const newNumbers = [...ticket.numbers]\r\n          newNumbers[nextDigitId] = ''\r\n          updateTicket(ticket.id, newNumbers)\r\n        }\r\n      }\r\n    }\r\n\r\n    if (event.key === 'ArrowLeft') {\r\n      event.preventDefault()\r\n      const prevDigitId = digitId - 1\r\n      const nextInput = digitRefs[prevDigitId]\r\n      // prevent focusing on non-existent input\r\n      if (prevDigitId !== -1 && nextInput.current) {\r\n        nextInput.current.focus()\r\n      }\r\n    }\r\n\r\n    if (event.key === 'ArrowRight') {\r\n      event.preventDefault()\r\n      const nextDigitId = digitId + 1\r\n      const nextInput = digitRefs[nextDigitId]\r\n      // prevent focusing on non-existent input\r\n      if (nextDigitId !== countNumbers && nextInput.current) {\r\n        nextInput.current.focus()\r\n      }\r\n    }\r\n  }\r\n  return (\r\n    <>\r\n      <Flex justifyContent=\"space-between\">\r\n        <Text fontSize=\"12px\" color=\"textSubtle\">\r\n          {getIdLabel(ticket.id)}\r\n        </Text>\r\n        <Text fontSize=\"12px\" color=\"warning\">\r\n          {duplicateWith.length !== 0 && t('Duplicate')}\r\n        </Text>\r\n      </Flex>\r\n      <InputsContainer\r\n        ref={containerRef}\r\n        onClick={scrollInputIntoView}\r\n        focused={focused}\r\n        isDuplicate={duplicateWith.length !== 0}\r\n      >\r\n        {countNumbers >= 1 && (\r\n          <DigitInput\r\n            ref={digit1}\r\n            type=\"number\"\r\n            value={ticket.numbers[0]}\r\n            onKeyDown={(e: React.KeyboardEvent) => onChangeHandler(e, 0)}\r\n            placeholder=\"_\"\r\n            onChange={(e) => e.preventDefault()}\r\n            disabled={disabled}\r\n            onFocus={onFocusHandler}\r\n            onBlur={onBlurHandler}\r\n            onPaste={onPasteHandler}\r\n            inputMode=\"numeric\"\r\n          />\r\n        )}\r\n        {countNumbers >= 2 && (\r\n          <DigitInput\r\n            ref={digit2}\r\n            type=\"number\"\r\n            value={ticket.numbers[1]}\r\n            onKeyDown={(e: React.KeyboardEvent) => onChangeHandler(e, 1)}\r\n            placeholder=\"_\"\r\n            onChange={(e) => e.preventDefault()}\r\n            disabled={disabled}\r\n            onFocus={onFocusHandler}\r\n            onBlur={onBlurHandler}\r\n            onPaste={onPasteHandler}\r\n            inputMode=\"numeric\"\r\n          />\r\n        )}\r\n        {countNumbers >= 3 && (\r\n          <DigitInput\r\n            ref={digit3}\r\n            type=\"number\"\r\n            value={ticket.numbers[2]}\r\n            onKeyDown={(e: React.KeyboardEvent) => onChangeHandler(e, 2)}\r\n            placeholder=\"_\"\r\n            onChange={(e) => e.preventDefault()}\r\n            disabled={disabled}\r\n            onFocus={onFocusHandler}\r\n            onBlur={onBlurHandler}\r\n            onPaste={onPasteHandler}\r\n            inputMode=\"numeric\"\r\n          />\r\n        )}\r\n        {countNumbers >= 4 && (\r\n          <DigitInput\r\n            ref={digit4}\r\n            type=\"number\"\r\n            value={ticket.numbers[3]}\r\n            onKeyDown={(e: React.KeyboardEvent) => onChangeHandler(e, 3)}\r\n            placeholder=\"_\"\r\n            onChange={(e) => e.preventDefault()}\r\n            disabled={disabled}\r\n            onFocus={onFocusHandler}\r\n            onBlur={onBlurHandler}\r\n            onPaste={onPasteHandler}\r\n            inputMode=\"numeric\"\r\n          />\r\n        )}\r\n        {countNumbers >= 5 && (\r\n          <DigitInput\r\n            ref={digit5}\r\n            type=\"number\"\r\n            value={ticket.numbers[4]}\r\n            onKeyDown={(e: React.KeyboardEvent) => onChangeHandler(e, 4)}\r\n            placeholder=\"_\"\r\n            onChange={(e) => e.preventDefault()}\r\n            disabled={disabled}\r\n            onFocus={onFocusHandler}\r\n            onBlur={onBlurHandler}\r\n            onPaste={onPasteHandler}\r\n            inputMode=\"numeric\"\r\n          />\r\n        )}\r\n        {countNumbers >= 6 && (\r\n          <DigitInput\r\n            ref={digit6}\r\n            type=\"number\"\r\n            value={ticket.numbers[5]}\r\n            onKeyDown={(e: React.KeyboardEvent) => onChangeHandler(e, 5)}\r\n            placeholder=\"_\"\r\n            onChange={(e) => e.preventDefault()}\r\n            disabled={disabled}\r\n            onFocus={onFocusHandler}\r\n            onBlur={onBlurHandler}\r\n            onPaste={onPasteHandler}\r\n            inputMode=\"numeric\"\r\n          />\r\n        )}\r\n      </InputsContainer>\r\n    </>\r\n  )\r\n}\r\n\r\nexport default TicketContainer\r\n","import React from 'react'\r\nimport styled from 'styled-components'\r\nimport { Modal, Text, Flex, Button, ArrowBackIcon, AutoRenewIcon } from '@pancakeswap/uikit'\r\nimport useTheme from 'hooks/useTheme'\r\nimport { useTranslation } from 'contexts/Localization'\r\nimport * as token from 'config/constants/tokens.lottery'\r\nimport TicketInput from './TicketInput'\r\nimport { UpdateTicketAction, Ticket } from './useTicketsReducer'\r\n\r\nconst StyledModal = styled(Modal)`\r\n  min-width: 280px;\r\n  max-width: 320px;\r\n  max-height: 552px;\r\n\r\n  & div:nth-child(2) {\r\n    padding: 0;\r\n  }\r\n`\r\n\r\nconst ScrollableContainer = styled.div`\r\n  height: 310px;\r\n  overflow-y: scroll;\r\n  border-bottom: ${({ theme }) => `1px solid ${theme.colors.cardBorder}`};\r\n  padding: 24px;\r\n`\r\n\r\nconst EditNumbersModal: React.FC<{\r\n  totalCost: string\r\n  updateTicket: UpdateTicketAction\r\n  randomize: () => void\r\n  tickets: Ticket[]\r\n  allComplete: boolean\r\n  onConfirm: () => void\r\n  isConfirming: boolean\r\n  onDismiss?: () => void\r\n}> = ({ totalCost, updateTicket, randomize, tickets, allComplete, onConfirm, isConfirming, onDismiss }) => {\r\n  const { theme } = useTheme()\r\n  const { t } = useTranslation()\r\n  return (\r\n    <StyledModal\r\n      title={t('Edit numbers')}\r\n      onDismiss={onDismiss}\r\n      headerBackground={theme.colors.gradients.cardHeader}\r\n      onBack={onDismiss}\r\n    >\r\n      <ScrollableContainer>\r\n        <Flex justifyContent=\"space-between\" mb=\"16px\">\r\n          <Text color=\"textSubtle\">{t('Total cost')}:</Text>\r\n          <Text>~{totalCost} {token.info().symbol}</Text>\r\n        </Flex>\r\n        <Text fontSize=\"12px\" color=\"textSubtle\" mb=\"16px\">\r\n          {t(\r\n            'Numbers are randomized, with no duplicates among your tickets. Tap a number to edit it. Available digits: 0-9',\r\n          )}\r\n        </Text>\r\n        <Button disabled={isConfirming} mb=\"16px\" variant=\"secondary\" width=\"100%\" height=\"32px\" onClick={randomize}>\r\n          {t('Randomize')}\r\n        </Button>\r\n        {tickets.map((ticket) => (\r\n          <TicketInput\r\n            key={ticket.id}\r\n            ticket={ticket}\r\n            duplicateWith={ticket.duplicateWith}\r\n            updateTicket={updateTicket}\r\n            disabled={isConfirming}\r\n          />\r\n        ))}\r\n      </ScrollableContainer>\r\n      <Flex flexDirection=\"column\" justifyContent=\"center\" m=\"24px\">\r\n        <Button\r\n          id=\"lotteryBuyEdited\"\r\n          disabled={!allComplete || isConfirming}\r\n          endIcon={isConfirming ? <AutoRenewIcon spin color=\"currentColor\" /> : undefined}\r\n          onClick={() => {\r\n            onConfirm()\r\n          }}\r\n        >\r\n          {isConfirming ? t('Confirming') : t('Confirm and buy')}\r\n        </Button>\r\n        <Button mt=\"8px\" variant={isConfirming ? 'secondary' : 'text'} disabled={isConfirming} onClick={onDismiss}>\r\n          <ArrowBackIcon color={isConfirming ? 'disabled' : 'primary'} height=\"24px\" width=\"24px\" /> {t('Go back')}\r\n        </Button>\r\n      </Flex>\r\n    </StyledModal>\r\n  )\r\n}\r\n\r\nexport default EditNumbersModal\r\n","import BigNumber from 'bignumber.js'\r\nimport { LotteryResponse, LotteryRound, LotteryRoundUserTickets } from 'state/types'\r\n\r\n/**\r\n * Remove the '1' and reverse the digits in a lottery number retrieved from the smart contract\r\n */\r\nexport const parseRetrievedNumber = (number: string): string => {\r\n  const numberAsArray = number.split('')\r\n  numberAsArray.splice(0, 1)\r\n  numberAsArray.reverse()\r\n  return numberAsArray.join('')\r\n}\r\n\r\nexport const getDrawnDate = (locale: string, endTime: string) => {\r\n  const endTimeInMs = parseInt(endTime, 10) * 1000\r\n  const endTimeAsDate = new Date(endTimeInMs)\r\n  return endTimeAsDate.toLocaleDateString(locale, dateTimeOptions)\r\n}\r\n\r\nexport const dateOptions: Intl.DateTimeFormatOptions = {\r\n  year: 'numeric',\r\n  month: 'short',\r\n  day: 'numeric',\r\n}\r\n\r\nexport const timeOptions: Intl.DateTimeFormatOptions = {\r\n  hour: 'numeric',\r\n  minute: 'numeric',\r\n}\r\n\r\nexport const dateTimeOptions: Intl.DateTimeFormatOptions = {\r\n  ...dateOptions,\r\n  ...timeOptions,\r\n}\r\n\r\nexport const processLotteryResponse = (\r\n  lotteryData: LotteryResponse & { userTickets?: LotteryRoundUserTickets },\r\n): LotteryRound => {\r\n  const {\r\n    priceTicketInCake: priceTicketInCakeAsString,\r\n    discountDivisor: discountDivisorAsString,\r\n    amountCollectedInCake: amountCollectedInCakeAsString,\r\n  } = lotteryData\r\n\r\n  const discountDivisor = new BigNumber(discountDivisorAsString)\r\n  const priceTicketInCake = new BigNumber(priceTicketInCakeAsString)\r\n  const amountCollectedInCake = new BigNumber(amountCollectedInCakeAsString)\r\n\r\n  return {\r\n    isLoading: lotteryData.isLoading,\r\n    lotteryId: lotteryData.lotteryId,\r\n    userTickets: lotteryData.userTickets,\r\n    status: lotteryData.status,\r\n    startTime: lotteryData.startTime,\r\n    endTime: lotteryData.endTime,\r\n    priceTicketInCake,\r\n    discountDivisor,\r\n    treasuryFee: lotteryData.treasuryFee,\r\n    firstTicketId: lotteryData.firstTicketId,\r\n    lastTicketId: lotteryData.lastTicketId,\r\n    amountCollectedInCake,\r\n    finalNumber: lotteryData.finalNumber,\r\n    cakePerBracket: lotteryData.cakePerBracket,\r\n    countWinnersPerBracket: lotteryData.countWinnersPerBracket,\r\n    rewardsBreakdown: lotteryData.rewardsBreakdown,\r\n  }\r\n}\r\n","import { LotteryTicket } from 'config/constants/types'\r\nimport { random } from 'lodash'\r\n\r\n// @ts-ignore\r\nconst countNumbers = window.SO_LotteryConfig.numbersCount\r\n/**\r\n * Generate a specific number of unique, randomised 7-digit lottery numbers between 1000000 & 1999999\r\n */\r\nconst generateTicketNumbers = (\r\n  numberOfTickets: number,\r\n  userCurrentTickets?: LotteryTicket[],\r\n  minNumber = parseInt('1000000'.substr(0, countNumbers+1), 10),\r\n  maxNumber = parseInt('1999999'.substr(0, countNumbers+1), 10),\r\n): number[] => {\r\n  // Populate array with existing tickets (if they have them) to ensure no duplicates when generating new numbers\r\n  const existingTicketNumbers =\r\n    userCurrentTickets?.length > 0\r\n      ? userCurrentTickets.map((ticket) => {\r\n          return parseInt(ticket?.number)\r\n        })\r\n      : []\r\n  const generatedTicketNumbers = [...existingTicketNumbers]\r\n\r\n  for (let count = 0; count < numberOfTickets; count++) {\r\n    let randomNumber = random(minNumber, maxNumber)\r\n    while (generatedTicketNumbers.includes(randomNumber)) {\r\n      // Catch for duplicates - generate a new number until the array doesn't include the random number generated\r\n      randomNumber = random(minNumber, maxNumber)\r\n    }\r\n    generatedTicketNumbers.push(randomNumber)\r\n  }\r\n\r\n  // Filter out the users' existing tickets\r\n  const ticketsToBuy =\r\n    userCurrentTickets?.length > 0\r\n      ? generatedTicketNumbers.filter((ticketNumber) => {\r\n          return !existingTicketNumbers.includes(ticketNumber)\r\n        })\r\n      : generatedTicketNumbers\r\n\r\n  console.log('>>> ticketsToBuy', ticketsToBuy)\r\n  return ticketsToBuy\r\n}\r\n\r\nexport default generateTicketNumbers\r\n","import { LotteryTicket } from 'config/constants/types'\r\nimport { useEffect, useReducer } from 'react'\r\nimport { parseRetrievedNumber } from '../../helpers'\r\nimport generateTicketNumbers from './generateTicketNumbers'\r\n\r\nexport interface Ticket {\r\n  id: number\r\n  numbers: string[]\r\n  duplicateWith: number[]\r\n  isComplete: boolean\r\n}\r\n\r\nexport interface TicketsState {\r\n  tickets: Ticket[]\r\n  allComplete: boolean\r\n}\r\n\r\nconst getInitialState = ({\r\n  amount,\r\n  userCurrentTickets,\r\n}: {\r\n  amount: number\r\n  userCurrentTickets: LotteryTicket[]\r\n}): TicketsState => {\r\n  const randomTickets = generateTicketNumbers(amount, userCurrentTickets)\r\n  // @ts-ignore\r\n  const randomTicketsAsStringArray = randomTickets.map((ticket) => parseRetrievedNumber(ticket.toString()).split(''))\r\n  const tickets = Array.from({ length: amount }, (_, i) => i + 1).map((index) => ({\r\n    id: index,\r\n    numbers: randomTicketsAsStringArray[index - 1],\r\n    duplicateWith: [],\r\n    isComplete: true,\r\n  }))\r\n  return {\r\n    tickets,\r\n    allComplete: true,\r\n  }\r\n}\r\n\r\n// @ts-ignore\r\nconst countNumbers = window.SO_LotteryConfig.numbersCount\r\n\r\nconst reducer = (state: TicketsState, action: any) => {\r\n  switch (action.type) {\r\n    case 'updateTicket': {\r\n      const tickets = [...state.tickets]\r\n      const { ticketId, newNumbers } = action.payload\r\n\r\n      const newDuplicates = state.tickets.filter(\r\n        (ticket) => ticket.id !== ticketId && ticket.isComplete && ticket.numbers.join('') === newNumbers.join(''),\r\n      )\r\n\r\n      // If ticket was duplicate but not duplicate anymore with this update\r\n      // go through previously considered duplicates and remove id of this ticket\r\n      // from their duplicateWith array\r\n      const prevDuplicates = tickets[ticketId - 1].duplicateWith\r\n      prevDuplicates.forEach((prevTicketId) => {\r\n        if (!newDuplicates.map(({ id }) => id).includes(prevTicketId)) {\r\n          const dupsToUpdate = [...tickets[prevTicketId - 1].duplicateWith]\r\n          const indexToRemove = dupsToUpdate.findIndex((id) => id === ticketId)\r\n          dupsToUpdate.splice(indexToRemove, 1)\r\n          tickets[prevTicketId - 1] = {\r\n            ...tickets[prevTicketId - 1],\r\n            duplicateWith: dupsToUpdate,\r\n          }\r\n        }\r\n      })\r\n\r\n      // If found duplicates - update their duplicateWith array\r\n      if (newDuplicates.length !== 0) {\r\n        newDuplicates.forEach((duplicate) => {\r\n          tickets[duplicate.id - 1] = {\r\n            ...duplicate,\r\n            duplicateWith: [...duplicate.duplicateWith, ticketId],\r\n          }\r\n        })\r\n      }\r\n\r\n      const updatedTicket = {\r\n        id: ticketId,\r\n        numbers: newNumbers,\r\n        duplicateWith: newDuplicates.map((ticket) => ticket.id),\r\n        isComplete: newNumbers.join('').length === countNumbers,\r\n      }\r\n      tickets[ticketId - 1] = updatedTicket\r\n\r\n      // Check if all tickets are filled\r\n      const allComplete = tickets.every((ticket) => ticket.isComplete)\r\n\r\n      return {\r\n        tickets,\r\n        allComplete,\r\n      }\r\n    }\r\n    case 'reset':\r\n      return getInitialState({ amount: action.payload.amount, userCurrentTickets: action.payload.userCurrentTickets })\r\n    default:\r\n      throw new Error()\r\n  }\r\n}\r\n\r\nexport type UpdateTicketAction = (ticketId: number, newNumbers: string[]) => void\r\n\r\nexport const useTicketsReducer = (\r\n  amount: number,\r\n  userCurrentTickets: LotteryTicket[],\r\n): [UpdateTicketAction, () => void, Ticket[], boolean, () => number[]] => {\r\n  const [state, dispatch] = useReducer(reducer, { amount, userCurrentTickets }, getInitialState)\r\n\r\n  useEffect(() => {\r\n    dispatch({ type: 'reset', payload: { amount, userCurrentTickets } })\r\n  }, [amount, userCurrentTickets])\r\n\r\n  const updateTicket = (ticketId: number, newNumbers: string[]) => {\r\n    dispatch({ type: 'updateTicket', payload: { ticketId, newNumbers } })\r\n  }\r\n\r\n  const randomize = () => {\r\n    dispatch({ type: 'reset', payload: { amount, userCurrentTickets } })\r\n  }\r\n\r\n  const getTicketsForPurchase = () => {\r\n    return state.tickets.map((ticket) => {\r\n      const reversedTicket = [...ticket.numbers].map((num) => parseInt(num, 10)).reverse()\r\n      reversedTicket.unshift(1)\r\n      const ticketAsNumber = parseInt(reversedTicket.join(''), 10)\r\n      return ticketAsNumber\r\n    })\r\n  }\r\n\r\n  return [updateTicket, randomize, state.tickets, state.allComplete, getTicketsForPurchase]\r\n}\r\n","import React from 'react'\r\nimport { Button, ButtonProps } from '@pancakeswap/uikit'\r\nimport { useTranslation } from 'contexts/Localization'\r\nimport styled from 'styled-components'\r\n\r\n\r\ninterface BuyTokenButtonProps extends ButtonProps {\r\n  disabled?: boolean\r\n}\r\nconst StyledBuyButton = styled(Button)`\r\n  margin-top: 5px;\r\n  margin-bottom: 5px;\r\n`\r\n\r\nconst BuyTokenButton: React.FC<BuyTokenButtonProps> = ({ disabled, ...props }) => {\r\n  const { t } = useTranslation()\r\n  // @ts-ignore\r\n  const buyTokenLink = window?.SO_LotteryConfig?.buyTokenLink\r\n  // @ts-ignore\r\n  const tokenTitle = window?.SO_LotteryConfig?.token?.symbol\r\n  const onPress = (e) => {\r\n    e.preventDefault()\r\n    window.open(buyTokenLink)\r\n  }\r\n\r\n\r\n  const getBuyButtonText = () => {\r\n    return t(`Buy ${tokenTitle}`)\r\n  }\r\n\r\n  if (!buyTokenLink) return null\r\n\r\n  return (\r\n    // @ts-ignore\r\n    <StyledBuyButton className='primaryButton' {...props} disabled={disabled} onClick={onPress}>\r\n      {getBuyButtonText()}\r\n    </StyledBuyButton>\r\n  )\r\n}\r\n\r\nexport default BuyTokenButton\r\n","import { useState, useEffect } from 'react'\r\nimport { useWeb3React } from '@web3-react/core'\r\nimport { useGetLotteriesGraphData, useGetUserLotteriesGraphData, useLottery } from 'state/lottery/hooks'\r\nimport fetchUnclaimedUserRewards from 'state/lottery/fetchUnclaimedUserRewards'\r\n\r\nexport enum FetchStatus {\r\n  NOT_FETCHED = 'not-fetched',\r\n  IN_PROGRESS = 'in-progress',\r\n  SUCCESS = 'success',\r\n}\r\n\r\nconst useGetUnclaimedRewards = () => {\r\n  const { account } = useWeb3React()\r\n  const { isTransitioning, currentLotteryId } = useLottery()\r\n  const userLotteryData = useGetUserLotteriesGraphData()\r\n  const lotteriesData = useGetLotteriesGraphData()\r\n  const [unclaimedRewards, setUnclaimedRewards] = useState([])\r\n  const [fetchStatus, setFetchStatus] = useState(FetchStatus.NOT_FETCHED)\r\n\r\n  useEffect(() => {\r\n    // Reset on account change and round transition\r\n    setFetchStatus(FetchStatus.NOT_FETCHED)\r\n  }, [account, isTransitioning])\r\n\r\n  const fetchAllRewards = async () => {\r\n    setFetchStatus(FetchStatus.IN_PROGRESS)\r\n    const unclaimedRewardsResponse = await fetchUnclaimedUserRewards(\r\n      account,\r\n      userLotteryData,\r\n      lotteriesData,\r\n      currentLotteryId,\r\n    )\r\n    setUnclaimedRewards(unclaimedRewardsResponse)\r\n    setFetchStatus(FetchStatus.SUCCESS)\r\n  }\r\n\r\n  return { fetchAllRewards, unclaimedRewards, fetchStatus }\r\n}\r\n\r\nexport default useGetUnclaimedRewards\r\n","import { useCallback } from 'react'\r\nimport ethers, { Contract, CallOverrides } from 'ethers'\r\nimport { useGasPrice } from 'state/user/hooks'\r\nimport { get } from 'lodash'\r\n\r\n/**\r\n * Perform a contract call with a gas price returned from useGasPrice\r\n * @param contract Used to perform the call\r\n * @param methodName The name of the method called\r\n * @param methodArgs An array of arguments to pass to the method\r\n * @param overrides An overrides object to pass to the method. gasPrice passed in here will take priority over the price returned by useGasPrice\r\n * @returns https://docs.ethers.io/v5/api/providers/types/#providers-TransactionReceipt\r\n */\r\nexport function useCallWithGasPrice() {\r\n  const gasPrice = useGasPrice()\r\n\r\n  const callWithGasPrice = useCallback(\r\n    async (\r\n      contract: Contract,\r\n      methodName: string,\r\n      methodArgs: any[] = [],\r\n      overrides: CallOverrides = null,\r\n    ): Promise<ethers.providers.TransactionResponse> => {\r\n      const contractMethod = get(contract, methodName)\r\n      const hasManualGasPriceOverride = overrides?.gasPrice\r\n\r\n      const tx = await contractMethod(\r\n        ...methodArgs,\r\n        hasManualGasPriceOverride ? { ...overrides } : { ...overrides, gasPrice },\r\n      )\r\n\r\n      return tx\r\n    },\r\n    [gasPrice],\r\n  )\r\n\r\n  return { callWithGasPrice }\r\n}\r\n","import React from 'react'\r\nimport { Button, useModal, WaitIcon, ButtonProps } from '@pancakeswap/uikit'\r\nimport { useTranslation } from 'contexts/Localization'\r\nimport { useLottery } from 'state/lottery/hooks'\r\nimport { LotteryStatus } from 'config/constants/types'\r\nimport BuyTicketsModal from './BuyTicketsModal/BuyTicketsModal'\r\nimport styled from 'styled-components'\r\n\r\n\r\ninterface BuyTicketsButtonProps extends ButtonProps {\r\n  disabled?: boolean\r\n}\r\n\r\nconst StyledBuyButton = styled(Button)`\r\n  margin-left: 10px;\r\n  margin-right: 10px;\r\n`\r\n\r\nconst BuyTicketsButton: React.FC<BuyTicketsButtonProps> = ({ disabled, ...props }) => {\r\n  const { t } = useTranslation()\r\n  const [onPresentBuyTicketsModal] = useModal(<BuyTicketsModal />)\r\n  const {\r\n    currentRound: { status },\r\n  } = useLottery()\r\n\r\n  const getBuyButtonText = () => {\r\n    if (status === LotteryStatus.OPEN) {\r\n      return t('Buy Tickets')\r\n    }\r\n    return (\r\n      <>\r\n        <WaitIcon mr=\"4px\" color=\"textDisabled\" /> {t('On sale soon!')}\r\n      </>\r\n    )\r\n  }\r\n\r\n  return (\r\n    // @ts-ignore\r\n    <StyledBuyButton className='primaryButton' {...props} disabled={disabled} onClick={onPresentBuyTicketsModal}>\r\n      {getBuyButtonText()}\r\n    </StyledBuyButton>\r\n  )\r\n}\r\n\r\nexport default BuyTicketsButton\r\n","import React from 'react'\r\nimport styled, { keyframes } from 'styled-components'\r\nimport { Box, Flex, Heading, Skeleton } from '@pancakeswap/uikit'\r\nimport { LotteryStatus } from 'config/constants/types'\r\nimport { useTranslation } from 'contexts/Localization'\r\nimport { usePriceCakeBusd } from 'state/farms/hooks'\r\nimport { useLottery } from 'state/lottery/hooks'\r\nimport { getBalanceNumber } from 'utils/formatBalance'\r\nimport Balance from 'components/Balance'\r\nimport * as token from 'config/constants/tokens.lottery'\r\nimport { TicketPurchaseCard } from '../svgs'\r\nimport BuyTicketsButton from './BuyTicketsButton'\r\n\r\nconst floatingStarsLeft = keyframes`\r\n  from {\r\n    transform: translate(0,  0px);\r\n  }\r\n  50% {\r\n    transform: translate(10px, 10px);\r\n  }\r\n  to {\r\n    transform: translate(0, -0px);\r\n  }  \r\n`\r\n\r\nconst floatingStarsRight = keyframes`\r\n  from {\r\n    transform: translate(0,  0px);\r\n  }\r\n  50% {\r\n    transform: translate(-10px, 10px);\r\n  }\r\n  to {\r\n    transform: translate(0, -0px);\r\n  }  \r\n`\r\n\r\nconst floatingTicketLeft = keyframes`\r\n  from {\r\n    transform: translate(0,  0px);\r\n  }\r\n  50% {\r\n    transform: translate(-10px, 15px);\r\n  }\r\n  to {\r\n    transform: translate(0, -0px);\r\n  }  \r\n`\r\n\r\nconst floatingTicketRight = keyframes`\r\n  from {\r\n    transform: translate(0,  0px);\r\n  }\r\n  50% {\r\n    transform: translate(10px, 15px);\r\n  }\r\n  to {\r\n    transform: translate(0, -0px);\r\n  }  \r\n`\r\n\r\nconst mainTicketAnimation = keyframes`\r\n  from {\r\n    transform: rotate(0deg);\r\n  }\r\n  50% {\r\n    transform: rotate(6deg);\r\n  }\r\n  to {\r\n    transform: rotate(0deg);\r\n  }  \r\n`\r\n\r\nconst TicketContainer = styled(Flex)`\r\n  animation: ${mainTicketAnimation} 3s ease-in-out infinite;\r\n`\r\n\r\nconst PrizeTotalBalance = styled(Balance)`\r\n  background: ${({ theme }) => theme.colors.gradients.gold};\r\n  -webkit-background-clip: text;\r\n  -webkit-text-fill-color: transparent;\r\n`\r\n\r\nconst StyledBuyTicketButton = styled(BuyTicketsButton)<{ disabled: boolean }>`\r\n  background: ${({ theme, disabled }) =>\r\n    disabled ? theme.colors.disabled : 'linear-gradient(180deg, #7645d9 0%, #452a7a 100%)'};\r\n  width: 200px;\r\n  ${({ theme }) => theme.mediaQueries.xs} {\r\n    width: 240px;\r\n  }\r\n`\r\n\r\nconst ButtonWrapper = styled.div`\r\n  z-index: 1;\r\n  position: absolute;\r\n  top: 50%;\r\n  left: 50%;\r\n  transform: translate(-50%, -50%) rotate(-4deg);\r\n`\r\n\r\nconst TicketSvgWrapper = styled.div`\r\n  position: absolute;\r\n  top: 0;\r\n  left: 0;\r\n  transform: rotate(-4deg);\r\n`\r\n\r\nconst Decorations = styled.div`\r\n  position: absolute;\r\n  width: 100%;\r\n  height: 100%;\r\n  background: url(./images/decorations/bg-star.svg);\r\n  background-repeat: no-repeat;\r\n  background-position: center 0;\r\n`\r\n\r\nconst StarsDecorations = styled(Box)`\r\n  position: absolute;\r\n  width: 100%;\r\n  height: 100%;\r\n\r\n  & img {\r\n    position: absolute;\r\n  }\r\n\r\n  & :nth-child(1) {\r\n    animation: ${floatingStarsLeft} 3s ease-in-out infinite;\r\n    animation-delay: 0.25s;\r\n  }\r\n  & :nth-child(2) {\r\n    animation: ${floatingStarsLeft} 3.5s ease-in-out infinite;\r\n    animation-delay: 0.5s;\r\n  }\r\n  & :nth-child(3) {\r\n    animation: ${floatingStarsRight} 4s ease-in-out infinite;\r\n    animation-delay: 0.75s;\r\n  }\r\n  & :nth-child(4) {\r\n    animation: ${floatingTicketLeft} 6s ease-in-out infinite;\r\n    animation-delay: 0.2s;\r\n  }\r\n  & :nth-child(5) {\r\n    animation: ${floatingTicketRight} 6s ease-in-out infinite;\r\n  }\r\n\r\n  ${({ theme }) => theme.mediaQueries.sm} {\r\n    & :nth-child(1) {\r\n      left: 3%;\r\n      top: 42%;\r\n    }\r\n    & :nth-child(2) {\r\n      left: 9%;\r\n      top: 23%;\r\n    }\r\n    & :nth-child(3) {\r\n      right: 2%;\r\n      top: 24%;\r\n    }\r\n    & :nth-child(4) {\r\n      left: 8%;\r\n      top: 67%;\r\n    }\r\n    & :nth-child(5) {\r\n      right: 8%;\r\n      top: 67%;\r\n    }\r\n  }\r\n\r\n  ${({ theme }) => theme.mediaQueries.md} {\r\n    & :nth-child(1) {\r\n      left: 10%;\r\n      top: 42%;\r\n    }\r\n    & :nth-child(2) {\r\n      left: 17%;\r\n      top: 23%;\r\n    }\r\n    & :nth-child(3) {\r\n      right: 10%;\r\n      top: 24%;\r\n    }\r\n    & :nth-child(4) {\r\n      left: 17%;\r\n      top: 67%;\r\n    }\r\n    & :nth-child(5) {\r\n      right: 17%;\r\n      top: 67%;\r\n    }\r\n  }\r\n\r\n  ${({ theme }) => theme.mediaQueries.xl} {\r\n    & :nth-child(1) {\r\n      left: 19%;\r\n      top: 42%;\r\n    }\r\n    & :nth-child(2) {\r\n      left: 25%;\r\n      top: 23%;\r\n    }\r\n    & :nth-child(3) {\r\n      right: 19%;\r\n      top: 24%;\r\n    }\r\n    & :nth-child(4) {\r\n      left: 24%;\r\n      top: 67%;\r\n    }\r\n    & :nth-child(5) {\r\n      right: 24%;\r\n      top: 67%;\r\n    }\r\n  }\r\n`\r\n\r\nconst Hero = () => {\r\n  const { t } = useTranslation()\r\n  const {\r\n    currentRound: { amountCollectedInCake, status },\r\n    isTransitioning,\r\n  } = useLottery()\r\n\r\n  const cakePriceBusd = token.info().price || 0\r\n  const prizeInBusd = amountCollectedInCake.times(cakePriceBusd)\r\n  const prizeTotal = getBalanceNumber(prizeInBusd, token.info().decimals)\r\n  const ticketBuyIsDisabled = status !== LotteryStatus.OPEN || isTransitioning\r\n\r\n  const getHeroHeading = () => {\r\n    if (status === LotteryStatus.OPEN) {\r\n      return (\r\n        <>\r\n          {prizeInBusd.isNaN() ? (\r\n            <Skeleton my=\"7px\" height={60} width={190} />\r\n          ) : (\r\n            <PrizeTotalBalance fontSize=\"64px\" bold prefix=\"$\" value={prizeTotal} mb=\"8px\" decimals={0} />\r\n          )}\r\n          <Heading mb=\"32px\" scale=\"lg\" color=\"#ffffff\">\r\n            {t('in prizes!')}\r\n          </Heading>\r\n        </>\r\n      )\r\n    }\r\n    return (\r\n      <Heading mb=\"24px\" scale=\"xl\" color=\"#ffffff\">\r\n        {t('Tickets on sale soon')}\r\n      </Heading>\r\n    )\r\n  }\r\n\r\n  return (\r\n    <Flex flexDirection=\"column\" alignItems=\"center\" justifyContent=\"center\">\r\n      <Decorations />\r\n      <StarsDecorations display={['none', 'none', 'block']}>\r\n        <img src=\"./images/lottery/star-big.png\" width=\"124px\" height=\"109px\" alt=\"\" />\r\n        <img src=\"./images/lottery/star-small.png\" width=\"70px\" height=\"62px\" alt=\"\" />\r\n        <img src=\"./images/lottery/three-stars.png\" width=\"130px\" height=\"144px\" alt=\"\" />\r\n        <img src=\"./images/lottery/ticket-l.png\" width=\"123px\" height=\"83px\" alt=\"\" />\r\n        <img src=\"./images/lottery/ticket-r.png\" width=\"121px\" height=\"72px\" alt=\"\" />\r\n      </StarsDecorations>\r\n      <Heading mb=\"8px\" scale=\"md\" color=\"#ffffff\" id=\"lottery-hero-title\">\r\n        {t('The Lottery')}\r\n      </Heading>\r\n      {token.info().price && (\r\n        <>{getHeroHeading()}</>\r\n      )}\r\n      <TicketContainer\r\n        position=\"relative\"\r\n        width={['240px', '288px']}\r\n        height={['94px', '113px']}\r\n        alignItems=\"center\"\r\n        justifyContent=\"center\"\r\n      >\r\n        <ButtonWrapper>\r\n          <StyledBuyTicketButton className='primaryButton' disabled={ticketBuyIsDisabled} />\r\n        </ButtonWrapper>\r\n        <TicketSvgWrapper>\r\n          <TicketPurchaseCard width=\"100%\" />\r\n        </TicketSvgWrapper>\r\n      </TicketContainer>\r\n    </Flex>\r\n  )\r\n}\r\n\r\nexport default Hero\r\n","import BigNumber from 'bignumber.js'\r\nimport { ethers } from 'ethers'\r\nimport { LotteryStatus, LotteryTicket, LotteryTicketClaimData } from 'config/constants/types'\r\nimport { LotteryUserGraphEntity, LotteryRoundGraphEntity } from 'state/types'\r\nimport { multicallv2 } from 'utils/multicall'\r\nimport lotteryV2Abi from 'config/abi/lotteryV2.json'\r\nimport { NUM_ROUNDS_TO_CHECK_FOR_REWARDS } from 'config/constants/lottery'\r\nimport { getLotteryV2Address } from 'utils/addressHelpers'\r\nimport { BIG_ZERO } from 'utils/bigNumber'\r\nimport { fetchUserTicketsForMultipleRounds } from './getUserTicketsData'\r\nimport { MAX_LOTTERIES_REQUEST_SIZE } from './getLotteriesData'\r\n\r\ninterface RoundDataAndUserTickets {\r\n  roundId: string\r\n  userTickets: LotteryTicket[]\r\n  finalNumber: string\r\n}\r\n\r\nconst lotteryAddress = getLotteryV2Address()\r\n\r\nconst fetchCakeRewardsForTickets = async (\r\n  winningTickets: LotteryTicket[],\r\n): Promise<{ ticketsWithUnclaimedRewards: LotteryTicket[]; cakeTotal: BigNumber }> => {\r\n  const calls = winningTickets.map((winningTicket) => {\r\n    const { roundId, id, rewardBracket } = winningTicket\r\n    return {\r\n      name: 'viewRewardsForTicketId',\r\n      address: lotteryAddress,\r\n      params: [roundId, id, rewardBracket],\r\n    }\r\n  })\r\n\r\n  try {\r\n    const cakeRewards = await multicallv2(lotteryV2Abi, calls)\r\n\r\n    const cakeTotal = cakeRewards.reduce((accum: BigNumber, cakeReward: ethers.BigNumber[]) => {\r\n      return accum.plus(new BigNumber(cakeReward[0].toString()))\r\n    }, BIG_ZERO)\r\n\r\n    const ticketsWithUnclaimedRewards = winningTickets.map((winningTicket, index) => {\r\n      return { ...winningTicket, cakeReward: cakeRewards[index] }\r\n    })\r\n    return { ticketsWithUnclaimedRewards, cakeTotal }\r\n  } catch (error) {\r\n    console.error(error)\r\n    return { ticketsWithUnclaimedRewards: null, cakeTotal: null }\r\n  }\r\n}\r\n\r\nconst getRewardBracketByNumber = (ticketNumber: string, finalNumber: string): number => {\r\n  // Winning numbers are evaluated right-to-left in the smart contract, so we reverse their order for validation here:\r\n  // i.e. '1123456' should be evaluated as '6543211'\r\n  const ticketNumAsArray = ticketNumber.split('').reverse()\r\n  const winningNumsAsArray = finalNumber.split('').reverse()\r\n  const matchingNumbers = []\r\n\r\n  // The number at index 6 in all tickets is 1 and will always match, so finish at index 5\r\n  for (let index = 0; index < winningNumsAsArray.length - 1; index++) {\r\n    if (ticketNumAsArray[index] !== winningNumsAsArray[index]) {\r\n      break\r\n    }\r\n    matchingNumbers.push(ticketNumAsArray[index])\r\n  }\r\n\r\n  // Reward brackets refer to indexes, 0 = 1 match, 5 = 6 matches. Deduct 1 from matchingNumbers' length to get the reward bracket\r\n  const rewardBracket = matchingNumbers.length - 1\r\n  return rewardBracket\r\n}\r\n\r\nexport const getWinningTickets = async (\r\n  roundDataAndUserTickets: RoundDataAndUserTickets,\r\n): Promise<LotteryTicketClaimData> => {\r\n  const { roundId, userTickets, finalNumber } = roundDataAndUserTickets\r\n\r\n  const ticketsWithRewardBrackets = userTickets.map((ticket) => {\r\n    return {\r\n      roundId,\r\n      id: ticket.id,\r\n      number: ticket.number,\r\n      status: ticket.status,\r\n      rewardBracket: getRewardBracketByNumber(ticket.number, finalNumber),\r\n    }\r\n  })\r\n\r\n  // A rewardBracket of -1 means no matches. 0 and above means there has been a match\r\n  const allWinningTickets = ticketsWithRewardBrackets.filter((ticket) => {\r\n    return ticket.rewardBracket >= 0\r\n  })\r\n\r\n  // If ticket.status is true, the ticket has already been claimed\r\n  const unclaimedWinningTickets = allWinningTickets.filter((ticket) => {\r\n    return !ticket.status\r\n  })\r\n\r\n  if (unclaimedWinningTickets.length > 0) {\r\n    const { ticketsWithUnclaimedRewards, cakeTotal } = await fetchCakeRewardsForTickets(unclaimedWinningTickets)\r\n    return { ticketsWithUnclaimedRewards, allWinningTickets, cakeTotal, roundId }\r\n  }\r\n\r\n  if (allWinningTickets.length > 0) {\r\n    return { ticketsWithUnclaimedRewards: null, allWinningTickets, cakeTotal: null, roundId }\r\n  }\r\n\r\n  return null\r\n}\r\n\r\nconst getWinningNumbersForRound = (targetRoundId: string, lotteriesData: LotteryRoundGraphEntity[]) => {\r\n  const targetRound = lotteriesData.find((pastLottery) => pastLottery.id === targetRoundId)\r\n  return targetRound?.finalNumber\r\n}\r\n\r\nconst fetchUnclaimedUserRewards = async (\r\n  account: string,\r\n  userLotteryData: LotteryUserGraphEntity,\r\n  lotteriesData: LotteryRoundGraphEntity[],\r\n  currentLotteryId: string,\r\n): Promise<LotteryTicketClaimData[]> => {\r\n  const { rounds } = userLotteryData\r\n\r\n  // If there is no user round history - return an empty array\r\n  if (rounds.length === 0) {\r\n    return []\r\n  }\r\n\r\n  // If the web3 provider account doesn't equal the userLotteryData account, return an empty array - this is effectively a loading state as the user switches accounts\r\n  if (userLotteryData.account.toLowerCase() !== account.toLowerCase()) {\r\n    return []\r\n  }\r\n\r\n  // Filter out rounds without subgraph data (i.e. >100 rounds ago)\r\n  const roundsInRange = rounds.filter((round) => {\r\n    const lastCheckableRoundId = parseInt(currentLotteryId, 10) - MAX_LOTTERIES_REQUEST_SIZE\r\n    const roundId = parseInt(round.lotteryId, 10)\r\n    return roundId >= lastCheckableRoundId\r\n  })\r\n\r\n  // Filter out non-claimable rounds\r\n  const claimableRounds = roundsInRange.filter((round) => {\r\n    return round.status.toLowerCase() === LotteryStatus.CLAIMABLE\r\n  })\r\n\r\n  // Rounds with no tickets claimed OR rounds where a user has over 100 tickets, could have prizes\r\n  const roundsWithPossibleWinnings = claimableRounds.filter((round) => {\r\n    return !round.claimed || parseInt(round.totalTickets, 10) > 100\r\n  })\r\n\r\n  // Check the X  most recent rounds, where X is NUM_ROUNDS_TO_CHECK_FOR_REWARDS\r\n  const roundsToCheck = roundsWithPossibleWinnings.slice(0, NUM_ROUNDS_TO_CHECK_FOR_REWARDS)\r\n\r\n  if (roundsToCheck.length > 0) {\r\n    const idsToCheck = roundsToCheck.map((round) => round.lotteryId)\r\n    const userTicketData = await fetchUserTicketsForMultipleRounds(idsToCheck, account)\r\n    const roundsWithTickets = userTicketData.filter((roundData) => roundData?.userTickets?.length > 0)\r\n\r\n    const roundDataAndWinningTickets = roundsWithTickets.map((roundData) => {\r\n      return { ...roundData, finalNumber: getWinningNumbersForRound(roundData.roundId, lotteriesData) }\r\n    })\r\n\r\n    const winningTicketsForPastRounds = await Promise.all(\r\n      roundDataAndWinningTickets.map((roundData) => getWinningTickets(roundData)),\r\n    )\r\n\r\n    // Filter out null values (returned when no winning tickets found for past round)\r\n    const roundsWithWinningTickets = winningTicketsForPastRounds.filter(\r\n      (winningTicketData) => winningTicketData !== null,\r\n    )\r\n\r\n    // Filter to only rounds with unclaimed tickets\r\n    const roundsWithUnclaimedWinningTickets = roundsWithWinningTickets.filter(\r\n      (winningTicketData) => winningTicketData.ticketsWithUnclaimedRewards,\r\n    )\r\n\r\n    return roundsWithUnclaimedWinningTickets\r\n  }\r\n  // All rounds claimed, return empty array\r\n  return []\r\n}\r\n\r\nexport default fetchUnclaimedUserRewards\r\n","import React, { useEffect, useState } from 'react'\r\nimport { Flex, FlexProps } from '@pancakeswap/uikit'\r\nimport { random } from 'lodash'\r\nimport uniqueId from 'lodash/uniqueId'\r\nimport { parseRetrievedNumber } from '../helpers'\r\nimport { BallWithNumber } from '../svgs'\r\nimport { BallColor } from '../svgs/Balls'\r\n\r\ninterface WinningNumbersProps extends FlexProps {\r\n  number: string\r\n  size?: string\r\n  fontSize?: string\r\n  rotateText?: boolean\r\n}\r\n\r\nconst WinningNumbers: React.FC<WinningNumbersProps> = ({\r\n  number,\r\n  size = '32px',\r\n  fontSize = '16px',\r\n  rotateText,\r\n  ...containerProps\r\n}) => {\r\n  const [rotationValues, setRotationValues] = useState([])\r\n  const reversedNumber = parseRetrievedNumber(number)\r\n  // @ts-ignore\r\n  const numAsArray = reversedNumber.split('').slice(0, window.SO_LotteryConfig.numbersCount)\r\n  const colors: BallColor[] = ['pink', 'lilac', 'teal', 'aqua', 'green', 'yellow']\r\n\r\n  useEffect(() => {\r\n    if (rotateText && numAsArray && rotationValues.length === 0) {\r\n      setRotationValues(numAsArray.map(() => random(-30, 30)))\r\n    }\r\n  }, [rotateText, numAsArray, rotationValues])\r\n\r\n  return (\r\n    <Flex justifyContent=\"left\" maxHeight=\"71px\" {...containerProps}>\r\n      {numAsArray.map((num, index) => {\r\n        return (\r\n          <BallWithNumber\r\n            key={uniqueId()}\r\n            rotationTransform={rotateText && rotationValues[index]}\r\n            size={size}\r\n            fontSize={fontSize}\r\n            color={colors[index]}\r\n            number={num}\r\n          />\r\n        )\r\n      })}\r\n    </Flex>\r\n  )\r\n}\r\n\r\nexport default WinningNumbers\r\n","import React from 'react'\r\nimport { LotteryTicket } from 'config/constants/types'\r\nimport { Flex, Text } from '@pancakeswap/uikit'\r\nimport { useTranslation } from 'contexts/Localization'\r\nimport styled from 'styled-components'\r\nimport _uniqueId from 'lodash/uniqueId'\r\nimport { parseRetrievedNumber } from '../helpers'\r\n\r\n// @ts-ignore\r\nconst maxNumbers = window.SO_LotteryConfig.numbersCount\r\nconst StyledNumberWrapper = styled(Flex)`\r\n  position: relative;\r\n  padding: 4px 16px;\r\n  border: 1px solid ${({ theme }) => theme.colors.cardBorder};\r\n  border-radius: ${({ theme }) => theme.radii.default};\r\n  background: ${({ theme }) => theme.colors.background};\r\n  justify-content: space-between;\r\n`\r\n\r\nconst RewardHighlighter = styled.div<{ numberMatches: number }>`\r\n  z-index: 1;\r\n  width: ${({ numberMatches }) => `${numberMatches < maxNumbers ? numberMatches * (100 / maxNumbers) : 100}%`};\r\n  height: 34px;\r\n  border-radius: ${({ theme }) => theme.radii.default};\r\n  top: 0;\r\n  left: 0;\r\n  position: absolute;\r\n  border: 2px ${({ theme }) => theme.colors.primary} solid;\r\n`\r\n\r\ninterface TicketNumberProps extends LotteryTicket {\r\n  localId?: number\r\n  rewardBracket?: number\r\n}\r\n\r\nconst TicketNumber: React.FC<TicketNumberProps> = ({ localId, id, number, rewardBracket }) => {\r\n  const { t } = useTranslation()\r\n  const reversedNumber = parseRetrievedNumber(number)\r\n  // @ts-ignore\r\n  const numberAsArray = reversedNumber.split('').slice(0, window.SO_LotteryConfig.numbersCount)\r\n  const numberMatches = rewardBracket + 1\r\n\r\n  return (\r\n    <Flex flexDirection=\"column\" mb=\"12px\">\r\n      <Flex justifyContent=\"space-between\">\r\n        <Text fontSize=\"12px\" color=\"textSubtle\">\r\n          #{localId || id}\r\n        </Text>\r\n        {rewardBracket >= 0 && (\r\n          <Text fontSize=\"12px\">\r\n            {t('Matched first')} {numberMatches}\r\n          </Text>\r\n        )}\r\n      </Flex>\r\n      <StyledNumberWrapper>\r\n        {rewardBracket >= 0 && <RewardHighlighter numberMatches={numberMatches} />}\r\n        {numberAsArray.map((digit) => (\r\n          <Text key={`${localId || id}-${digit}-${_uniqueId()}`} fontSize=\"16px\">\r\n            {digit}\r\n          </Text>\r\n        ))}\r\n      </StyledNumberWrapper>\r\n    </Flex>\r\n  )\r\n}\r\n\r\nexport default TicketNumber\r\n","import { ethers, Contract, Overrides } from 'ethers'\r\n\r\n/**\r\n * Estimate the gas needed to call a function, and add a 10% margin\r\n * @param contract Used to perform the call\r\n * @param methodName The name of the methode called\r\n * @param gasMarginPer10000 The gasMargin per 10000 (i.e. 10% -> 1000)\r\n * @param args An array of arguments to pass to the method\r\n * @returns https://docs.ethers.io/v5/api/providers/types/#providers-TransactionReceipt\r\n */\r\nexport const estimateGas = async (\r\n  contract: Contract,\r\n  methodName: string,\r\n  methodArgs: any[],\r\n  gasMarginPer10000: number,\r\n) => {\r\n  if (!contract[methodName]) {\r\n    throw new Error(`Method ${methodName} doesn't exist on ${contract.address}`)\r\n  }\r\n  const rawGasEstimation = await contract.estimateGas[methodName](...methodArgs)\r\n  // By convention, ethers.BigNumber values are multiplied by 1000 to avoid dealing with real numbers\r\n  const gasEstimation = rawGasEstimation\r\n    .mul(ethers.BigNumber.from(10000).add(ethers.BigNumber.from(gasMarginPer10000)))\r\n    .div(ethers.BigNumber.from(10000))\r\n  return gasEstimation\r\n}\r\n\r\n/**\r\n * Perform a contract call with a gas value returned from estimateGas\r\n * @param contract Used to perform the call\r\n * @param methodName The name of the method called\r\n * @param methodArgs An array of arguments to pass to the method\r\n * @param overrides An overrides object to pass to the method\r\n * @returns https://docs.ethers.io/v5/api/providers/types/#providers-TransactionReceipt\r\n */\r\nexport const callWithEstimateGas = async (\r\n  contract: Contract,\r\n  methodName: string,\r\n  methodArgs: any[] = [],\r\n  overrides: Overrides = {},\r\n  gasMarginPer10000 = 1000,\r\n): Promise<ethers.providers.TransactionResponse> => {\r\n  const gasEstimation = estimateGas(contract, methodName, methodArgs, gasMarginPer10000)\r\n  const tx = await contract[methodName](...methodArgs, {\r\n    gasLimit: gasEstimation,\r\n    ...overrides,\r\n  })\r\n  return tx\r\n}\r\n","import BigNumber from 'bignumber.js'\r\nimport { DEFAULT_GAS_LIMIT, DEFAULT_TOKEN_DECIMAL } from 'config'\r\nimport getGasPrice from 'utils/getGasPrice'\r\n\r\nconst options = {\r\n  gasLimit: DEFAULT_GAS_LIMIT,\r\n}\r\n\r\nexport const stakeFarm = async (masterChefContract, pid, amount) => {\r\n  const gasPrice = getGasPrice()\r\n  const value = new BigNumber(amount).times(DEFAULT_TOKEN_DECIMAL).toString()\r\n  if (pid === 0) {\r\n    const tx = await masterChefContract.enterStaking(value, { ...options, gasPrice })\r\n    const receipt = await tx.wait()\r\n    return receipt.status\r\n  }\r\n\r\n  const tx = await masterChefContract.deposit(pid, value, { ...options, gasPrice })\r\n  const receipt = await tx.wait()\r\n  return receipt.status\r\n}\r\n\r\nexport const unstakeFarm = async (masterChefContract, pid, amount) => {\r\n  const gasPrice = getGasPrice()\r\n  const value = new BigNumber(amount).times(DEFAULT_TOKEN_DECIMAL).toString()\r\n  if (pid === 0) {\r\n    const tx = await masterChefContract.leaveStaking(value, { ...options, gasPrice })\r\n    const receipt = await tx.wait()\r\n    return receipt.status\r\n  }\r\n\r\n  const tx = await masterChefContract.withdraw(pid, value, { ...options, gasPrice })\r\n  const receipt = await tx.wait()\r\n  return receipt.status\r\n}\r\n\r\nexport const harvestFarm = async (masterChefContract, pid) => {\r\n  const gasPrice = getGasPrice()\r\n  if (pid === 0) {\r\n    const tx = await masterChefContract.leaveStaking('0', { ...options, gasPrice })\r\n    const receipt = await tx.wait()\r\n    return receipt.status\r\n  }\r\n\r\n  const tx = await masterChefContract.deposit(pid, '0', { ...options, gasPrice })\r\n  const receipt = await tx.wait()\r\n  return receipt.status\r\n}\r\n","import React, { useState } from 'react'\r\nimport { useWeb3React } from '@web3-react/core'\r\nimport { Flex, Button, Text, AutoRenewIcon, PresentWonIcon } from '@pancakeswap/uikit'\r\nimport { useTranslation } from 'contexts/Localization'\r\nimport { LotteryTicket, LotteryTicketClaimData } from 'config/constants/types'\r\nimport { getBalanceAmount } from 'utils/formatBalance'\r\nimport { callWithEstimateGas } from 'utils/calls'\r\nimport { usePriceCakeBusd } from 'state/farms/hooks'\r\nimport { useLottery } from 'state/lottery/hooks'\r\nimport { fetchUserLotteries } from 'state/lottery'\r\nimport { useGasPrice } from 'state/user/hooks'\r\nimport { useAppDispatch } from 'state'\r\nimport Balance from 'components/Balance'\r\nimport * as token from 'config/constants/tokens.lottery'\r\nimport { ToastDescriptionWithTx } from 'components/Toast'\r\nimport useToast from 'hooks/useToast'\r\nimport { useLotteryV2Contract } from 'hooks/useContract'\r\n\r\ninterface ClaimInnerProps {\r\n  roundsToClaim: LotteryTicketClaimData[]\r\n  onSuccess?: () => void\r\n}\r\n\r\nconst ClaimInnerContainer: React.FC<ClaimInnerProps> = ({ onSuccess, roundsToClaim }) => {\r\n  const { account } = useWeb3React()\r\n  const { t } = useTranslation()\r\n  const dispatch = useAppDispatch()\r\n  const { maxNumberTicketsPerBuyOrClaim, currentLotteryId } = useLottery()\r\n  const gasPrice = useGasPrice()\r\n  const { toastSuccess, toastError } = useToast()\r\n  const [activeClaimIndex, setActiveClaimIndex] = useState(0)\r\n  const [pendingTx, setPendingTx] = useState(false)\r\n  const [pendingBatchClaims, setPendingBatchClaims] = useState(\r\n    Math.ceil(\r\n      roundsToClaim[activeClaimIndex].ticketsWithUnclaimedRewards.length / maxNumberTicketsPerBuyOrClaim.toNumber(),\r\n    ),\r\n  )\r\n  const lotteryContract = useLotteryV2Contract()\r\n  const activeClaimData = roundsToClaim[activeClaimIndex]\r\n\r\n  const cakePriceBusd = usePriceCakeBusd()\r\n  const cakeReward = activeClaimData.cakeTotal\r\n  const dollarReward = cakeReward.times(cakePriceBusd)\r\n  const rewardAsBalance = getBalanceAmount(cakeReward).toNumber()\r\n  const dollarRewardAsBalance = getBalanceAmount(dollarReward).toNumber()\r\n\r\n  const parseUnclaimedTicketDataForClaimCall = (ticketsWithUnclaimedRewards: LotteryTicket[], lotteryId: string) => {\r\n    const ticketIds = ticketsWithUnclaimedRewards.map((ticket) => {\r\n      return ticket.id\r\n    })\r\n    const brackets = ticketsWithUnclaimedRewards.map((ticket) => {\r\n      return ticket.rewardBracket\r\n    })\r\n    return { lotteryId, ticketIds, brackets }\r\n  }\r\n\r\n  const claimTicketsCallData = parseUnclaimedTicketDataForClaimCall(\r\n    activeClaimData.ticketsWithUnclaimedRewards,\r\n    activeClaimData.roundId,\r\n  )\r\n\r\n  const shouldBatchRequest = maxNumberTicketsPerBuyOrClaim.lt(claimTicketsCallData.ticketIds.length)\r\n\r\n  const handleProgressToNextClaim = () => {\r\n    if (roundsToClaim.length > activeClaimIndex + 1) {\r\n      // If there are still rounds to claim, move onto the next claim\r\n      setActiveClaimIndex(activeClaimIndex + 1)\r\n      dispatch(fetchUserLotteries({ account, currentLotteryId }))\r\n    } else {\r\n      onSuccess()\r\n    }\r\n  }\r\n\r\n  const getTicketBatches = (ticketIds: string[], brackets: number[]): { ticketIds: string[]; brackets: number[] }[] => {\r\n    const requests = []\r\n    const maxAsNumber = maxNumberTicketsPerBuyOrClaim.toNumber()\r\n\r\n    for (let i = 0; i < ticketIds.length; i += maxAsNumber) {\r\n      const ticketIdsSlice = ticketIds.slice(i, maxAsNumber + i)\r\n      const bracketsSlice = brackets.slice(i, maxAsNumber + i)\r\n      requests.push({ ticketIds: ticketIdsSlice, brackets: bracketsSlice })\r\n    }\r\n\r\n    return requests\r\n  }\r\n\r\n  const handleClaim = async () => {\r\n    const { lotteryId, ticketIds, brackets } = claimTicketsCallData\r\n    setPendingTx(true)\r\n    try {\r\n      const tx = await callWithEstimateGas(lotteryContract, 'claimTickets', [lotteryId, ticketIds, brackets], {\r\n        gasPrice,\r\n      })\r\n      const receipt = await tx.wait()\r\n      if (receipt.status) {\r\n        toastSuccess(\r\n          t('Prizes Collected!'),\r\n          <ToastDescriptionWithTx txHash={receipt.transactionHash}>\r\n            {t('Your %symbol% prizes for round %lotteryId% have been sent to your wallet', { lotteryId , symbol: token.info().symbol })}\r\n          </ToastDescriptionWithTx>,\r\n        )\r\n        setPendingTx(false)\r\n        handleProgressToNextClaim()\r\n      }\r\n    } catch (error) {\r\n      console.error(error)\r\n      toastError(t('Error'), t('%error% - Please try again.', { error: error.message }))\r\n      setPendingTx(false)\r\n    }\r\n  }\r\n\r\n  const handleBatchClaim = async () => {\r\n    const { lotteryId, ticketIds, brackets } = claimTicketsCallData\r\n    const ticketBatches = getTicketBatches(ticketIds, brackets)\r\n    const transactionsToFire = ticketBatches.length\r\n    const receipts = []\r\n    setPendingTx(true)\r\n    // eslint-disable-next-line no-restricted-syntax\r\n    for (const ticketBatch of ticketBatches) {\r\n      try {\r\n        /* eslint-disable no-await-in-loop */\r\n        const tx = await callWithEstimateGas(\r\n          lotteryContract,\r\n          'claimTickets',\r\n          [lotteryId, ticketBatch.ticketIds, ticketBatch.brackets],\r\n          { gasPrice },\r\n        )\r\n        const receipt = await tx.wait()\r\n        /* eslint-enable no-await-in-loop */\r\n        if (receipt.status) {\r\n          // One transaction within batch has succeeded\r\n          receipts.push(receipt)\r\n          setPendingBatchClaims(transactionsToFire - receipts.length)\r\n\r\n          // More transactions are to be done within the batch. Issue toast to give user feedback.\r\n          if (receipts.length !== transactionsToFire) {\r\n            toastSuccess(\r\n              t('Prizes Collected!'),\r\n              <ToastDescriptionWithTx txHash={receipt.transactionHash}>\r\n                {t(\r\n                  'Claim %claimNum% of %claimTotal% for round %lotteryId% was successful. Please confirm the next transaction',\r\n                  {\r\n                    claimNum: receipts.length,\r\n                    claimTotal: transactionsToFire,\r\n                    lotteryId,\r\n                  },\r\n                )}\r\n              </ToastDescriptionWithTx>,\r\n            )\r\n          }\r\n        }\r\n      } catch (error) {\r\n        console.error(error)\r\n        setPendingTx(false)\r\n        toastError(t('Error'), t('%error% - Please try again.', { error: error.message }))\r\n        break\r\n      }\r\n    }\r\n\r\n    // Batch is finished\r\n    if (receipts.length === transactionsToFire) {\r\n      setPendingTx(false)\r\n      toastSuccess(\r\n        t('Prizes Collected!'),\r\n        t('Your %symbol% prizes for round %lotteryId% have been sent to your wallet', { lotteryId, symbol: token.info().symbol }),\r\n      )\r\n      handleProgressToNextClaim()\r\n    }\r\n  }\r\n\r\n  return (\r\n    <>\r\n      <Flex flexDirection=\"column\">\r\n        <Text mb=\"4px\" textAlign={['center', null, 'left']}>\r\n          {t('You won')}\r\n        </Text>\r\n        <Flex\r\n          alignItems={['flex-start', null, 'center']}\r\n          justifyContent={['flex-start', null, 'space-between']}\r\n          flexDirection={['column', null, 'row']}\r\n        >\r\n          <Balance\r\n            textAlign={['center', null, 'left']}\r\n            lineHeight=\"1.1\"\r\n            value={rewardAsBalance}\r\n            fontSize=\"44px\"\r\n            bold\r\n            color=\"secondary\"\r\n            unit={` ${token.info().symbol}!`}\r\n          />\r\n          <PresentWonIcon ml={['0', null, '12px']} width=\"64px\" />\r\n        </Flex>\r\n        <Balance\r\n          mt={['12px', null, '0']}\r\n          textAlign={['center', null, 'left']}\r\n          value={dollarRewardAsBalance}\r\n          fontSize=\"12px\"\r\n          color=\"textSubtle\"\r\n          unit=\" USD\"\r\n          prefix=\"~\"\r\n        />\r\n      </Flex>\r\n\r\n      <Flex alignItems=\"center\" justifyContent=\"center\">\r\n        <Text mt=\"8px\" fontSize=\"12px\" color=\"textSubtle\">\r\n          {t('Round')} #{activeClaimData.roundId}\r\n        </Text>\r\n      </Flex>\r\n      <Flex alignItems=\"center\" justifyContent=\"center\">\r\n        <Button\r\n          isLoading={pendingTx}\r\n          endIcon={pendingTx ? <AutoRenewIcon spin color=\"currentColor\" /> : null}\r\n          mt=\"20px\"\r\n          width=\"100%\"\r\n          onClick={() => (shouldBatchRequest ? handleBatchClaim() : handleClaim())}\r\n        >\r\n          {pendingTx ? t('Claiming') : t('Claim')} {pendingBatchClaims > 1 ? `(${pendingBatchClaims})` : ''}\r\n        </Button>\r\n      </Flex>\r\n    </>\r\n  )\r\n}\r\n\r\nexport default ClaimInnerContainer\r\n","import React, { useEffect } from 'react'\r\nimport styled from 'styled-components'\r\nimport { Heading, ModalContainer, ModalHeader, ModalTitle, ModalBody, ModalCloseButton } from '@pancakeswap/uikit'\r\nimport { useWeb3React } from '@web3-react/core'\r\nimport { useTranslation } from 'contexts/Localization'\r\nimport { delay } from 'lodash'\r\nimport confetti from 'canvas-confetti'\r\nimport { LotteryTicketClaimData } from 'config/constants/types'\r\nimport { useAppDispatch } from 'state'\r\nimport { useLottery } from 'state/lottery/hooks'\r\nimport { fetchUserLotteries } from 'state/lottery'\r\nimport ClaimPrizesInner from './ClaimPrizesInner'\r\n\r\nconst StyledModal = styled(ModalContainer)`\r\n  position: relative;\r\n  overflow: visible;\r\n\r\n  ${({ theme }) => theme.mediaQueries.sm} {\r\n    min-width: 380px;\r\n  }\r\n`\r\n\r\nconst StyledModalHeader = styled(ModalHeader)`\r\n  background: ${({ theme }) => theme.colors.gradients.cardHeader};\r\n  border-top-right-radius: 32px;\r\n  border-top-left-radius: 32px;\r\n`\r\n\r\nconst BunnyDecoration = styled.div`\r\n  position: absolute;\r\n  top: -116px; // line up bunny at the top of the modal\r\n  left: 0px;\r\n  text-align: center;\r\n  width: 100%;\r\n`\r\n\r\nconst showConfetti = () => {\r\n  confetti({\r\n    particleCount: 200,\r\n    startVelocity: 30,\r\n    gravity: 0.5,\r\n    spread: 350,\r\n    origin: {\r\n      x: 0.5,\r\n      y: 0.3,\r\n    },\r\n  })\r\n}\r\n\r\ninterface ClaimPrizesModalModalProps {\r\n  roundsToClaim: LotteryTicketClaimData[]\r\n  onDismiss?: () => void\r\n}\r\n\r\nconst ClaimPrizesModal: React.FC<ClaimPrizesModalModalProps> = ({ onDismiss, roundsToClaim }) => {\r\n  const { t } = useTranslation()\r\n  const { account } = useWeb3React()\r\n  const { currentLotteryId } = useLottery()\r\n  const dispatch = useAppDispatch()\r\n\r\n  useEffect(() => {\r\n    delay(showConfetti, 100)\r\n  }, [])\r\n\r\n  return (\r\n    <StyledModal minWidth=\"280px\">\r\n      <BunnyDecoration>\r\n        <img src=\"./images/decorations/prize-bunny.png\" alt=\"bunny decoration\" height=\"124px\" width=\"168px\" />\r\n      </BunnyDecoration>\r\n      <StyledModalHeader>\r\n        <ModalTitle>\r\n          <Heading>{t('Collect Winnings')}</Heading>\r\n        </ModalTitle>\r\n        <ModalCloseButton onDismiss={onDismiss} />\r\n      </StyledModalHeader>\r\n      <ModalBody p=\"24px\">\r\n        <ClaimPrizesInner\r\n          onSuccess={() => {\r\n            dispatch(fetchUserLotteries({ account, currentLotteryId }))\r\n            onDismiss()\r\n          }}\r\n          roundsToClaim={roundsToClaim}\r\n        />\r\n      </ModalBody>\r\n    </StyledModal>\r\n  )\r\n}\r\n\r\nexport default ClaimPrizesModal\r\n","import React, { useEffect, useState } from 'react'\r\nimport {\r\n  Box,\r\n  Text,\r\n  Flex,\r\n  Button,\r\n  Skeleton,\r\n  Ticket,\r\n  PresentWonIcon,\r\n  TooltipText,\r\n  InfoIcon,\r\n  useTooltip,\r\n  useModal,\r\n} from '@pancakeswap/uikit'\r\nimport styled from 'styled-components'\r\nimport { useWeb3React } from '@web3-react/core'\r\nimport { LotteryTicket, LotteryTicketClaimData } from 'config/constants/types'\r\nimport { fetchLottery } from 'state/lottery/helpers'\r\nimport { getWinningTickets } from 'state/lottery/fetchUnclaimedUserRewards'\r\nimport { fetchUserTicketsForOneRound } from 'state/lottery/getUserTicketsData'\r\nimport { LotteryRound } from 'state/types'\r\nimport { useGetUserLotteryGraphRoundById } from 'state/lottery/hooks'\r\nimport { useTranslation } from 'contexts/Localization'\r\nimport useTheme from 'hooks/useTheme'\r\nimport WinningNumbers from '../WinningNumbers'\r\nimport { processLotteryResponse } from '../../helpers'\r\nimport TicketNumber from '../TicketNumber'\r\nimport ClaimPrizesModal from '../ClaimPrizesModal'\r\n\r\nconst TopBox = styled(Flex)`\r\n  flex-direction: column;\r\n  margin: -24px;\r\n  padding: 24px;\r\n  background-color: ${({ theme }) => theme.colors.dropdown};\r\n  border-bottom: 1px solid ${({ theme }) => theme.colors.cardBorder};\r\n`\r\n\r\nconst ScrollBox = styled(Box)`\r\n  margin-right: -20px;\r\n  padding-right: 24px;\r\n  max-height: 300px;\r\n  overflow-y: scroll;\r\n  margin-top: 24px;\r\n`\r\n\r\nconst TicketSkeleton = () => {\r\n  return (\r\n    <>\r\n      <Skeleton width=\"32px\" height=\"12px\" mt=\"2px\" mb=\"4px\" />\r\n      <Skeleton width=\"100%\" height=\"34px\" mb=\"12px\" />\r\n    </>\r\n  )\r\n}\r\n\r\nconst PreviousRoundTicketsInner: React.FC<{ roundId: string }> = ({ roundId }) => {\r\n  const [lotteryInfo, setLotteryInfo] = useState<LotteryRound>(null)\r\n  const [allUserTickets, setAllUserTickets] = useState<LotteryTicket[]>(null)\r\n  const [userWinningTickets, setUserWinningTickets] = useState<{\r\n    allWinningTickets: LotteryTicket[]\r\n    ticketsWithUnclaimedRewards: LotteryTicket[]\r\n    isFetched: boolean\r\n    claimData: LotteryTicketClaimData\r\n  }>({ allWinningTickets: null, ticketsWithUnclaimedRewards: null, isFetched: false, claimData: null })\r\n  const { t } = useTranslation()\r\n  const { theme } = useTheme()\r\n  const { account } = useWeb3React()\r\n  const { totalTickets } = useGetUserLotteryGraphRoundById(roundId)\r\n  const [onPresentClaimModal] = useModal(<ClaimPrizesModal roundsToClaim={[userWinningTickets.claimData]} />, false)\r\n\r\n  const TooltipComponent = () => (\r\n    <>\r\n      <Text mb=\"16px\">\r\n        {t('Tickets must match the winning number in the exact same order, starting from the first digit.')}\r\n      </Text>\r\n      <Text mb=\"16px\">{t('If the winning number is “123456”:')}</Text>\r\n      <Text mb=\"4px\">{t('“120000” matches the first 2 digits.')}</Text>\r\n      <Text>\r\n        {t('“000006” matches the last digit, but since the first five digits are wrong, it doesn’t win any prizes.')}\r\n      </Text>\r\n    </>\r\n  )\r\n\r\n  const { targetRef, tooltip, tooltipVisible } = useTooltip(<TooltipComponent />, {\r\n    placement: 'bottom-end',\r\n    tooltipOffset: [20, 10],\r\n  })\r\n\r\n  useEffect(() => {\r\n    const addWinningTicketInfoToAllTickets = (\r\n      _allTickets: LotteryTicket[],\r\n      _allWinningTickets: LotteryTicket[],\r\n    ): LotteryTicket[] => {\r\n      const allTicketsWithWinningTickets = _allTickets.map((ticket) => {\r\n        const winningTicketEquivalent = _allWinningTickets.find((winningTicket) => winningTicket.id === ticket.id)\r\n        if (winningTicketEquivalent) {\r\n          return winningTicketEquivalent\r\n        }\r\n        return ticket\r\n      })\r\n      return allTicketsWithWinningTickets\r\n    }\r\n\r\n    const sortTicketsByWinningBracket = (tickets) => {\r\n      return tickets.sort((ticketA, ticketB) => {\r\n        const rewardBracket1 = ticketA.rewardBracket === undefined ? 0 : ticketA.rewardBracket + 1\r\n        const rewardBracket2 = ticketB.rewardBracket === undefined ? 0 : ticketB.rewardBracket + 1\r\n        return rewardBracket2 - rewardBracket1\r\n      })\r\n    }\r\n\r\n    const fetchData = async () => {\r\n      const userTickets = await fetchUserTicketsForOneRound(account, roundId)\r\n      const lotteryData = await fetchLottery(roundId)\r\n      const processedLotteryData = processLotteryResponse(lotteryData)\r\n      const winningTickets = await getWinningTickets({\r\n        roundId,\r\n        userTickets,\r\n        finalNumber: processedLotteryData.finalNumber.toString(),\r\n      })\r\n\r\n      setUserWinningTickets({\r\n        isFetched: true,\r\n        allWinningTickets: winningTickets?.allWinningTickets,\r\n        ticketsWithUnclaimedRewards: winningTickets?.ticketsWithUnclaimedRewards,\r\n        claimData: winningTickets,\r\n      })\r\n      setLotteryInfo(processedLotteryData)\r\n\r\n      // If the user has some winning tickets - modify the userTickets response to include that data\r\n      if (winningTickets?.allWinningTickets) {\r\n        const allTicketsWithWinningTicketInfo = addWinningTicketInfoToAllTickets(\r\n          userTickets,\r\n          winningTickets.allWinningTickets,\r\n        )\r\n        const ticketsSortedByWinners = sortTicketsByWinningBracket(allTicketsWithWinningTicketInfo)\r\n        setAllUserTickets(ticketsSortedByWinners)\r\n      } else {\r\n        setAllUserTickets(userTickets)\r\n      }\r\n    }\r\n\r\n    fetchData()\r\n  }, [roundId, account, totalTickets])\r\n\r\n  const getFooter = () => {\r\n    if (userWinningTickets?.ticketsWithUnclaimedRewards?.length > 0) {\r\n      return (\r\n        <Button onClick={onPresentClaimModal} mt=\"24px\" width=\"100%\">\r\n          {t('Collect Prizes')}\r\n        </Button>\r\n      )\r\n    }\r\n    if (!userWinningTickets.allWinningTickets) {\r\n      return (\r\n        <div ref={targetRef}>\r\n          <Flex alignItems=\"center\" justifyContent=\"center\" mt=\"20px\">\r\n            <InfoIcon height=\"20px\" width=\"20px\" color=\"textSubtle\" mr=\"8px\" />\r\n            <TooltipText color=\"textSubtle\">{t(\"Why didn't I win?\")}</TooltipText>\r\n          </Flex>\r\n        </div>\r\n      )\r\n    }\r\n    return null\r\n  }\r\n\r\n  return (\r\n    <>\r\n      {tooltipVisible && tooltip}\r\n      <TopBox>\r\n        <Text bold textTransform=\"uppercase\" color=\"secondary\" fontSize=\"12px\" mb=\"4px\">\r\n          {t('Winning number')}\r\n        </Text>\r\n        {lotteryInfo?.finalNumber ? (\r\n          <WinningNumbers number={lotteryInfo.finalNumber.toString()} />\r\n        ) : (\r\n          <Skeleton width=\"230px\" height=\"34px\" />\r\n        )}\r\n      </TopBox>\r\n      <ScrollBox>\r\n        <Text bold textTransform=\"uppercase\" color=\"secondary\" fontSize=\"12px\" my=\"16px\">\r\n          {t('Your tickets')}\r\n        </Text>\r\n        <Flex mb=\"8px\" justifyContent=\"space-between\">\r\n          <Flex>\r\n            <Ticket width=\"24px\" height=\"24px\" mr=\"8px\" />\r\n            <Text bold color=\"text\">\r\n              {t('Total tickets')}:\r\n            </Text>\r\n          </Flex>\r\n          <Text bold color=\"text\">\r\n            {allUserTickets ? allUserTickets.length : <Skeleton width=\"56px\" height=\"24px\" />}\r\n          </Text>\r\n        </Flex>\r\n        <Flex mb=\"24px\" justifyContent=\"space-between\">\r\n          <Flex>\r\n            <PresentWonIcon width=\"24px\" height=\"24px\" mr=\"8px\" />\r\n            <Text bold color=\"text\">\r\n              {t('Winning tickets')}:\r\n            </Text>\r\n          </Flex>\r\n          <Text bold color=\"text\">\r\n            {userWinningTickets.isFetched ? (\r\n              userWinningTickets?.allWinningTickets?.length || '0'\r\n            ) : (\r\n              <Skeleton width=\"40px\" height=\"24px\" />\r\n            )}\r\n          </Text>\r\n        </Flex>\r\n        {allUserTickets ? (\r\n          allUserTickets.map((ticket) => {\r\n            return (\r\n              <TicketNumber\r\n                key={ticket.id}\r\n                id={ticket.id}\r\n                number={ticket.number}\r\n                rewardBracket={ticket.rewardBracket}\r\n                status={ticket.status}\r\n              />\r\n            )\r\n          })\r\n        ) : (\r\n          <>\r\n            <TicketSkeleton />\r\n            <TicketSkeleton />\r\n            <TicketSkeleton />\r\n            <TicketSkeleton />\r\n          </>\r\n        )}\r\n      </ScrollBox>\r\n      <Flex borderTop={`1px solid ${theme.colors.cardBorder}`} alignItems=\"center\" justifyContent=\"center\">\r\n        {userWinningTickets.isFetched && getFooter()}\r\n      </Flex>\r\n    </>\r\n  )\r\n}\r\n\r\nexport default PreviousRoundTicketsInner\r\n","import React from 'react'\r\nimport styled from 'styled-components'\r\nimport { Flex, Box, Text } from '@pancakeswap/uikit'\r\nimport { useTranslation } from 'contexts/Localization'\r\nimport { LotteryStatus } from 'config/constants/types'\r\nimport { useLottery } from 'state/lottery/hooks'\r\nimport useTheme from 'hooks/useTheme'\r\nimport TicketNumber from '../TicketNumber'\r\nimport BuyTicketsButton from '../BuyTicketsButton'\r\n\r\nconst ScrollBox = styled(Box)`\r\n  max-height: 300px;\r\n  overflow-y: scroll;\r\n  margin-left: -24px;\r\n  margin-right: -24px;\r\n  padding-left: 24px;\r\n  padding-right: 20px;\r\n`\r\n\r\nconst CurrentRoundTicketsInner = () => {\r\n  const { t } = useTranslation()\r\n  const { theme } = useTheme()\r\n  const {\r\n    isTransitioning,\r\n    currentRound: { status, userTickets },\r\n  } = useLottery()\r\n  const ticketBuyIsDisabled = status !== LotteryStatus.OPEN || isTransitioning\r\n\r\n  return (\r\n    <>\r\n      <Flex flexDirection=\"column\">\r\n        <Text bold textTransform=\"uppercase\" color=\"secondary\" fontSize=\"12px\" mb=\"16px\">\r\n          {t('Your tickets')}\r\n        </Text>\r\n        <ScrollBox>\r\n          {userTickets.tickets.map((ticket, index) => {\r\n            return (\r\n              <TicketNumber\r\n                key={ticket.id}\r\n                localId={index + 1}\r\n                id={ticket.id}\r\n                number={ticket.number}\r\n                status={ticket.status}\r\n              />\r\n            )\r\n          })}\r\n        </ScrollBox>\r\n      </Flex>\r\n      <Flex borderTop={`1px solid ${theme.colors.cardBorder}`} alignItems=\"center\" justifyContent=\"center\">\r\n        <BuyTicketsButton disabled={ticketBuyIsDisabled} mt=\"24px\" width=\"100%\" />\r\n      </Flex>\r\n    </>\r\n  )\r\n}\r\n\r\nexport default CurrentRoundTicketsInner\r\n","import React from 'react'\r\nimport styled from 'styled-components'\r\nimport { Modal } from '@pancakeswap/uikit'\r\nimport { useTranslation } from 'contexts/Localization'\r\nimport { LotteryStatus } from 'config/constants/types'\r\nimport { useLottery } from 'state/lottery/hooks'\r\nimport useTheme from 'hooks/useTheme'\r\nimport PreviousRoundTicketsInner from './PreviousRoundTicketsInner'\r\nimport CurrentRoundTicketsInner from './CurrentRoundTicketsInner'\r\n\r\nconst StyledModal = styled(Modal)`\r\n  min-width: 280px;\r\n  max-width: 320px;\r\n`\r\n\r\ninterface ViewTicketsModalProps {\r\n  roundId: string\r\n  roundStatus?: LotteryStatus\r\n  onDismiss?: () => void\r\n}\r\n\r\nconst ViewTicketsModal: React.FC<ViewTicketsModalProps> = ({ onDismiss, roundId, roundStatus }) => {\r\n  const { t } = useTranslation()\r\n  const { theme } = useTheme()\r\n  const { currentLotteryId } = useLottery()\r\n  const isPreviousRound = roundStatus?.toLowerCase() === LotteryStatus.CLAIMABLE || roundId !== currentLotteryId\r\n\r\n  return (\r\n    <StyledModal\r\n      title={`${t('Round')} ${roundId}`}\r\n      onDismiss={onDismiss}\r\n      headerBackground={theme.colors.gradients.cardHeader}\r\n    >\r\n      {isPreviousRound ? <PreviousRoundTicketsInner roundId={roundId} /> : <CurrentRoundTicketsInner />}\r\n    </StyledModal>\r\n  )\r\n}\r\n\r\nexport default ViewTicketsModal\r\n","import React from 'react'\r\nimport BigNumber from 'bignumber.js'\r\nimport { Flex, Skeleton, Text } from '@pancakeswap/uikit'\r\nimport { useTranslation } from 'contexts/Localization'\r\nimport { usePriceCakeBusd } from 'state/farms/hooks'\r\nimport * as token from 'config/constants/tokens.lottery'\r\nimport Balance from 'components/Balance'\r\nimport { getBalanceNumber, getFullDisplayBalance } from 'utils/formatBalance'\r\n\r\ninterface RewardBracketDetailProps {\r\n  cakeAmount: BigNumber\r\n  rewardBracket?: number\r\n  numberWinners?: string\r\n  isBurn?: boolean\r\n  isHistoricRound?: boolean\r\n  isLoading?: boolean\r\n}\r\n\r\nconst RewardBracketDetail: React.FC<RewardBracketDetailProps> = ({\r\n  rewardBracket,\r\n  cakeAmount,\r\n  numberWinners,\r\n  isHistoricRound,\r\n  isBurn,\r\n  isLoading,\r\n}) => {\r\n  const { t } = useTranslation()\r\n  const cakePriceBusd = usePriceCakeBusd()\r\n\r\n  const getRewardText = () => {\r\n    const numberMatch = rewardBracket + 1\r\n    if (isBurn) {\r\n      return t('Burn')\r\n    }\r\n    if (rewardBracket === 5) {\r\n      return t('Match all %numberMatch%', { numberMatch })\r\n    }\r\n    return t('Match first %numberMatch%', { numberMatch })\r\n  }\r\n\r\n  return (\r\n    <Flex flexDirection=\"column\">\r\n      {isLoading ? (\r\n        <Skeleton mb=\"4px\" mt=\"8px\" height={16} width={80} />\r\n      ) : (\r\n        <Text bold color={isBurn ? 'failure' : 'secondary'}>\r\n          {getRewardText()}\r\n        </Text>\r\n      )}\r\n      <>\r\n        {isLoading || cakeAmount.isNaN() ? (\r\n          <Skeleton my=\"4px\" mr=\"10px\" height={20} width={110} />\r\n        ) : (\r\n          <Balance fontSize=\"20px\" bold unit={` ${token.info().symbol}`} value={getBalanceNumber(cakeAmount, token.info().decimals)} decimals={token.info().viewDecimals} />\r\n        )}\r\n        {isLoading || cakeAmount.isNaN() ? (\r\n          <>\r\n            <Skeleton mt=\"4px\" mb=\"16px\" height={12} width={70} />\r\n          </>\r\n        ) : (\r\n          <Balance\r\n            fontSize=\"12px\"\r\n            color=\"textSubtle\"\r\n            prefix=\"~$\"\r\n            value={getBalanceNumber(cakeAmount.times(cakePriceBusd), token.info().decimals)}\r\n            decimals={token.info().viewDecimals}\r\n          />\r\n        )}\r\n        {isHistoricRound && cakeAmount && (\r\n          <>\r\n            {numberWinners !== '0' && (\r\n              <Text fontSize=\"12px\" color=\"textSubtle\">\r\n                {getFullDisplayBalance(cakeAmount.div(parseInt(numberWinners, 10)), token.info().decimals, 2)} {token.info().symbol} {t('each')}\r\n              </Text>\r\n            )}\r\n            <Text fontSize=\"12px\" color=\"textSubtle\">\r\n              {numberWinners} {t('Winners')}\r\n            </Text>\r\n          </>\r\n        )}\r\n      </>\r\n    </Flex>\r\n  )\r\n}\r\n\r\nexport default RewardBracketDetail\r\n","import React, { useState, useEffect } from 'react'\r\nimport BigNumber from 'bignumber.js'\r\nimport { Flex, Text } from '@pancakeswap/uikit'\r\nimport styled from 'styled-components'\r\nimport { BIG_ZERO } from 'utils/bigNumber'\r\nimport { useTranslation } from 'contexts/Localization'\r\nimport { LotteryRound } from 'state/types'\r\nimport RewardBracketDetail from './RewardBracketDetail'\r\n\r\nconst Wrapper = styled(Flex)`\r\n  width: 100%;\r\n  flex-direction: column;\r\n`\r\n\r\nconst RewardsInner = styled.div`\r\n  display: grid;\r\n  grid-template-columns: repeat(2, auto);\r\n  row-gap: 16px;\r\n\r\n  ${({ theme }) => theme.mediaQueries.sm} {\r\n    grid-template-columns: repeat(4, 1fr);\r\n  }\r\n`\r\n\r\ninterface RewardMatchesProps {\r\n  lotteryNodeData: LotteryRound\r\n  isHistoricRound?: boolean\r\n}\r\n\r\ninterface RewardsState {\r\n  isLoading: boolean\r\n  cakeToBurn: BigNumber\r\n  rewardsLessTreasuryFee: BigNumber\r\n  rewardsBreakdown: string[]\r\n  countWinnersPerBracket: string[]\r\n}\r\n\r\nconst RewardBrackets: React.FC<RewardMatchesProps> = ({ lotteryNodeData, isHistoricRound }) => {\r\n  const { t } = useTranslation()\r\n  const [state, setState] = useState<RewardsState>({\r\n    isLoading: true,\r\n    cakeToBurn: BIG_ZERO,\r\n    rewardsLessTreasuryFee: BIG_ZERO,\r\n    rewardsBreakdown: null,\r\n    countWinnersPerBracket: null,\r\n  })\r\n\r\n  useEffect(() => {\r\n    if (lotteryNodeData) {\r\n      const { treasuryFee, amountCollectedInCake, rewardsBreakdown, countWinnersPerBracket } = lotteryNodeData\r\n\r\n      const feeAsPercentage = new BigNumber(treasuryFee).div(100)\r\n      const cakeToBurn = feeAsPercentage.div(100).times(new BigNumber(amountCollectedInCake))\r\n      const amountLessTreasuryFee = new BigNumber(amountCollectedInCake).minus(cakeToBurn)\r\n      setState({\r\n        isLoading: false,\r\n        cakeToBurn,\r\n        rewardsLessTreasuryFee: amountLessTreasuryFee,\r\n        rewardsBreakdown,\r\n        countWinnersPerBracket,\r\n      })\r\n    } else {\r\n      setState({\r\n        isLoading: true,\r\n        cakeToBurn: BIG_ZERO,\r\n        rewardsLessTreasuryFee: BIG_ZERO,\r\n        rewardsBreakdown: null,\r\n        countWinnersPerBracket: null,\r\n      })\r\n    }\r\n  }, [lotteryNodeData])\r\n\r\n  const getCakeRewards = (bracket: number) => {\r\n    const shareAsPercentage = new BigNumber(state.rewardsBreakdown[bracket]).div(100)\r\n    return state.rewardsLessTreasuryFee.div(100).times(shareAsPercentage)\r\n  }\r\n\r\n  const { isLoading, countWinnersPerBracket, cakeToBurn } = state\r\n\r\n  // @ts-ignore\r\n  const rewardBrackets = [0, 1, 2, 3, 4, 5].slice(0, window.SO_LotteryConfig.numbersCount)\r\n\r\n  return (\r\n    <Wrapper>\r\n      <Text fontSize=\"14px\" mb=\"24px\">\r\n        {t('Match the winning number in the same order to share prizes.')}{' '}\r\n        {!isHistoricRound && t('Current prizes up for grabs:')}\r\n      </Text>\r\n      <RewardsInner>\r\n        {rewardBrackets.map((bracketIndex) => (\r\n          <RewardBracketDetail\r\n            key={bracketIndex}\r\n            rewardBracket={bracketIndex}\r\n            cakeAmount={!isLoading && getCakeRewards(bracketIndex)}\r\n            numberWinners={!isLoading && countWinnersPerBracket[bracketIndex]}\r\n            isHistoricRound={isHistoricRound}\r\n            isLoading={isLoading}\r\n          />\r\n        ))}\r\n        <RewardBracketDetail rewardBracket={0} cakeAmount={cakeToBurn} isBurn isLoading={isLoading} />\r\n      </RewardsInner>\r\n    </Wrapper>\r\n  )\r\n}\r\n\r\nexport default RewardBrackets\r\n","import React, { useState } from 'react'\r\nimport styled from 'styled-components'\r\nimport {\r\n  Card,\r\n  CardHeader,\r\n  CardBody,\r\n  Flex,\r\n  Heading,\r\n  Text,\r\n  Skeleton,\r\n  Button,\r\n  useModal,\r\n  Box,\r\n  CardFooter,\r\n  ExpandableLabel,\r\n} from '@pancakeswap/uikit'\r\nimport * as token from 'config/constants/tokens.lottery'\r\nimport { useWeb3React } from '@web3-react/core'\r\nimport { LotteryStatus } from 'config/constants/types'\r\nimport { useTranslation } from 'contexts/Localization'\r\nimport { usePriceCakeBusd } from 'state/farms/hooks'\r\nimport { useLottery } from 'state/lottery/hooks'\r\nimport { getBalanceNumber } from 'utils/formatBalance'\r\nimport Balance from 'components/Balance'\r\nimport ViewTicketsModal from './ViewTicketsModal'\r\nimport BuyTicketsButton from './BuyTicketsButton'\r\nimport BuyTokenButton from './BuyTokenButton'\r\nimport { dateTimeOptions } from '../helpers'\r\nimport RewardBrackets from './RewardBrackets'\r\n\r\nconst Grid = styled.div`\r\n  display: grid;\r\n  grid-template-columns: auto;\r\n\r\n  ${({ theme }) => theme.mediaQueries.md} {\r\n    grid-column-gap: 32px;\r\n    grid-template-columns: auto 1fr;\r\n  }\r\n`\r\n\r\nconst HeadingText = styled(Text)`\r\n  margin-top: 14px;\r\n`\r\n\r\nconst StyledCard = styled(Card)`\r\n  width: 100%;\r\n\r\n  ${({ theme }) => theme.mediaQueries.sm} {\r\n    width: 520px;\r\n  }\r\n\r\n  ${({ theme }) => theme.mediaQueries.md} {\r\n    width: 756px;\r\n  }\r\n`\r\n\r\nconst NextDrawWrapper = styled.div`\r\n  background: ${({ theme }) => theme.colors.background};\r\n  padding: 24px;\r\n`\r\n\r\nconst NextDrawCard = () => {\r\n  const {\r\n    t,\r\n    currentLanguage: { locale },\r\n  } = useTranslation()\r\n  const { account } = useWeb3React()\r\n  const { currentLotteryId, isTransitioning, currentRound } = useLottery()\r\n  const { endTime, amountCollectedInCake, userTickets, status } = currentRound\r\n\r\n  const [onPresentViewTicketsModal] = useModal(<ViewTicketsModal roundId={currentLotteryId} roundStatus={status} />)\r\n  const [isExpanded, setIsExpanded] = useState(false)\r\n  const ticketBuyIsDisabled = status !== LotteryStatus.OPEN || isTransitioning\r\n\r\n  const cakePriceBusd = token.info().price || 0\r\n  const prizeInBusd = amountCollectedInCake.times(cakePriceBusd)\r\n  const endTimeMs = parseInt(endTime, 10) * 1000\r\n  const endDate = new Date(endTimeMs)\r\n  const isLotteryOpen = status === LotteryStatus.OPEN\r\n  const userTicketCount = userTickets?.tickets?.length || 0\r\n\r\n  const getPrizeBalances = () => {\r\n    if (status === LotteryStatus.CLOSE || status === LotteryStatus.CLAIMABLE) {\r\n      return (\r\n        <Heading scale=\"xl\" color=\"secondary\" style={{marginTop: '4px'}} textAlign={['center', null, null, 'left']}>\r\n          {t('Calculating')}...\r\n        </Heading>\r\n      )\r\n    }\r\n\r\n    if (!token.info().price) {\r\n      return (\r\n        <Balance\r\n          fontSize=\"40px\"\r\n          color=\"secondary\"\r\n          textAlign={['center', null, null, 'left']}\r\n          lineHeight=\"1\"\r\n          bold\r\n          unit={` ${token.info().symbol}`}\r\n          value={getBalanceNumber(amountCollectedInCake, token.info().decimals)}\r\n          decimals={token.info().viewDecimals}\r\n        />\r\n      )\r\n    }\r\n    return (\r\n      <>\r\n        {prizeInBusd.isNaN() ? (\r\n          <Skeleton my=\"7px\" height={40} width={160} />\r\n        ) : (\r\n          <Balance\r\n            fontSize=\"40px\"\r\n            color=\"secondary\"\r\n            textAlign={['center', null, null, 'left']}\r\n            lineHeight=\"1\"\r\n            bold\r\n            prefix=\"~$\"\r\n            value={getBalanceNumber(prizeInBusd, token.info().decimals)}\r\n            decimals={0}\r\n          />\r\n        )}\r\n        {prizeInBusd.isNaN() ? (\r\n          <Skeleton my=\"2px\" height={14} width={90} />\r\n        ) : (\r\n          <Balance\r\n            fontSize=\"14px\"\r\n            color=\"textSubtle\"\r\n            textAlign={['center', null, null, 'left']}\r\n            unit={` ${token.info().symbol}`}\r\n            value={getBalanceNumber(amountCollectedInCake, token.info().decimals)}\r\n            decimals={0}\r\n          />\r\n        )}\r\n      </>\r\n    )\r\n  }\r\n\r\n  const getNextDrawId = () => {\r\n    if (status === LotteryStatus.OPEN) {\r\n      return `${currentLotteryId} |`\r\n    }\r\n    if (status === LotteryStatus.PENDING) {\r\n      return ''\r\n    }\r\n    return parseInt(currentLotteryId, 10) + 1\r\n  }\r\n\r\n  const getNextDrawDateTime = () => {\r\n    if (status === LotteryStatus.OPEN) {\r\n      return `${t('Draw')}: ${endDate.toLocaleString(locale, dateTimeOptions)}`\r\n    }\r\n    return ''\r\n  }\r\n\r\n  const ticketRoundText =\r\n    userTicketCount > 1\r\n      ? t('You have %amount% tickets this round', { amount: userTicketCount })\r\n      : t('You have %amount% ticket this round', { amount: userTicketCount })\r\n  const [youHaveText, ticketsThisRoundText] = ticketRoundText.split(userTicketCount.toString())\r\n\r\n  return (\r\n    <StyledCard>\r\n      <CardHeader p=\"16px 24px\">\r\n        <Flex justifyContent=\"space-between\">\r\n          <Heading mr=\"12px\">{t('Next Draw')}</Heading>\r\n          { /* @ts-ignore */ }\r\n          <HeadingText>\r\n            {currentLotteryId && `#${getNextDrawId()}`} {Boolean(endTime) && getNextDrawDateTime()}\r\n          </HeadingText>\r\n        </Flex>\r\n      </CardHeader>\r\n      <CardBody>\r\n        <Grid>\r\n          <Flex justifyContent={['center', null, null, 'flex-start']}>\r\n            <Heading>{t('Prize Pot')}</Heading>\r\n          </Flex>\r\n          <Flex flexDirection=\"column\" mb=\"18px\">\r\n            {getPrizeBalances()}\r\n          </Flex>\r\n          <Box display={['none', null, null, 'flex']}>\r\n            <Heading>{t('Your tickets')}</Heading>\r\n          </Box>\r\n          <Flex flexDirection={['column', null, null, 'row']} alignItems={['center', null, null, 'center']}>\r\n            {isLotteryOpen && (\r\n              <Flex\r\n                flexDirection=\"column\"\r\n                mr={[null, null, null, '24px']}\r\n                alignItems={['center', null, null, 'flex-start']}\r\n              >\r\n                {account && (\r\n                  <Flex justifyContent={['center', null, null, 'flex-start']} style={{ whiteSpace: `nowrap` }} >\r\n                    <Text display=\"inline\">{youHaveText} </Text>\r\n                    {!userTickets.isLoading ? (\r\n                      <Balance value={userTicketCount} decimals={0} display=\"inline\" bold mx=\"4px\" />\r\n                    ) : (\r\n                      <Skeleton mx=\"4px\" height={20} width={40} />\r\n                    )}\r\n                    <Text display=\"inline\"> {ticketsThisRoundText}</Text>\r\n                  </Flex>\r\n                )}\r\n                {!userTickets.isLoading && userTicketCount > 0 && (\r\n                  <Button\r\n                    className='textButton'\r\n                    onClick={onPresentViewTicketsModal}\r\n                    height=\"auto\"\r\n                    width=\"fit-content\"\r\n                    p=\"0\"\r\n                    mb={['32px', null, null, '0']}\r\n                    variant=\"text\"\r\n                    scale=\"sm\"\r\n                  >\r\n                    {t('View your tickets')}\r\n                  </Button>\r\n                )}\r\n              </Flex>\r\n            )}\r\n            <BuyTicketsButton disabled={ticketBuyIsDisabled} maxWidth=\"280px\" />\r\n            <BuyTokenButton disabled={false} maxWidth=\"280px\" />\r\n          </Flex>\r\n        </Grid>\r\n      </CardBody>\r\n      <CardFooter p=\"0\">\r\n        {isExpanded && (\r\n          <NextDrawWrapper>\r\n            <RewardBrackets lotteryNodeData={currentRound} />\r\n          </NextDrawWrapper>\r\n        )}\r\n        {(status === LotteryStatus.OPEN || status === LotteryStatus.CLOSE) && (\r\n          <Flex p=\"8px 24px\" alignItems=\"center\" justifyContent=\"center\">\r\n            <ExpandableLabel expanded={isExpanded} onClick={() => setIsExpanded(!isExpanded)}>\r\n              {isExpanded ? t('Hide') : t('Details')}\r\n            </ExpandableLabel>\r\n          </Flex>\r\n        )}\r\n      </CardFooter>\r\n    </StyledCard>\r\n  )\r\n}\r\n\r\nexport default NextDrawCard\r\n","const MINUTE_IN_SECONDS = 60\r\nconst HOUR_IN_SECONDS = 3600\r\nconst DAY_IN_SECONDS = 86400\r\nconst MONTH_IN_SECONDS = 2629800\r\nconst YEAR_IN_SECONDS = 31557600\r\n\r\n/**\r\n * Format number of seconds into year, month, day, hour, minute, seconds\r\n *\r\n * @param seconds\r\n */\r\nconst getTimePeriods = (seconds: number) => {\r\n  let delta = Math.abs(seconds)\r\n  const timeLeft = {\r\n    years: 0,\r\n    months: 0,\r\n    days: 0,\r\n    hours: 0,\r\n    minutes: 0,\r\n    seconds: 0,\r\n  }\r\n\r\n  if (delta >= YEAR_IN_SECONDS) {\r\n    timeLeft.years = Math.floor(delta / YEAR_IN_SECONDS)\r\n    delta -= timeLeft.years * YEAR_IN_SECONDS\r\n  }\r\n\r\n  if (delta >= MONTH_IN_SECONDS) {\r\n    timeLeft.months = Math.floor(delta / MONTH_IN_SECONDS)\r\n    delta -= timeLeft.months * MONTH_IN_SECONDS\r\n  }\r\n\r\n  if (delta >= DAY_IN_SECONDS) {\r\n    timeLeft.days = Math.floor(delta / DAY_IN_SECONDS)\r\n    delta -= timeLeft.days * DAY_IN_SECONDS\r\n  }\r\n\r\n  if (delta >= HOUR_IN_SECONDS) {\r\n    timeLeft.hours = Math.floor(delta / HOUR_IN_SECONDS)\r\n    delta -= timeLeft.hours * HOUR_IN_SECONDS\r\n  }\r\n\r\n  if (delta >= MINUTE_IN_SECONDS) {\r\n    timeLeft.minutes = Math.floor(delta / MINUTE_IN_SECONDS)\r\n    delta -= timeLeft.minutes * MINUTE_IN_SECONDS\r\n  }\r\n\r\n  timeLeft.seconds = delta\r\n\r\n  return timeLeft\r\n}\r\n\r\nexport default getTimePeriods\r\n","import React from 'react'\r\nimport styled from 'styled-components'\r\nimport { Flex, Heading } from '@pancakeswap/uikit'\r\nimport { useTranslation } from 'contexts/Localization'\r\n\r\nexport interface TimerProps {\r\n  minutes?: number\r\n  hours?: number\r\n  days?: number\r\n}\r\n\r\nconst StyledTimerFlex = styled(Flex)<{ showTooltip?: boolean }>`\r\n  ${({ theme, showTooltip }) => (showTooltip ? ` border-bottom: 1px dashed ${theme.colors.textSubtle};` : ``)}\r\n  div:last-of-type {\r\n    margin-right: 0;\r\n  }\r\n`\r\n\r\nconst StyledTimerText = styled(Heading)`\r\n  background: ${({ theme }) => theme.colors.gradients.gold};\r\n  -webkit-background-clip: text;\r\n  -webkit-text-fill-color: transparent;\r\n`\r\n\r\nconst Wrapper: React.FC<TimerProps> = ({ minutes, hours, days }) => {\r\n  const { t } = useTranslation()\r\n\r\n  return (\r\n    <StyledTimerFlex alignItems=\"flex-end\">\r\n      {Boolean(days) && (\r\n        <>\r\n          <StyledTimerText mb=\"-4px\" scale=\"xl\" mr=\"4px\">\r\n            {days}\r\n          </StyledTimerText>\r\n          <StyledTimerText mr=\"12px\">{t('d')}</StyledTimerText>\r\n        </>\r\n      )}\r\n      {Boolean(hours) && (\r\n        <>\r\n          <StyledTimerText mb=\"-4px\" scale=\"xl\" mr=\"4px\">\r\n            {hours}\r\n          </StyledTimerText>\r\n          <StyledTimerText mr=\"12px\">{t('h')}</StyledTimerText>\r\n        </>\r\n      )}\r\n      {Boolean(minutes) && (\r\n        <>\r\n          <StyledTimerText mb=\"-4px\" scale=\"xl\" mr=\"4px\">\r\n            {minutes}\r\n          </StyledTimerText>\r\n          <StyledTimerText mr=\"12px\">{t('m')}</StyledTimerText>\r\n        </>\r\n      )}\r\n    </StyledTimerFlex>\r\n  )\r\n}\r\n\r\nexport default Wrapper\r\n","import { useEffect, useState, useRef } from 'react'\r\nimport { useAppDispatch } from 'state'\r\nimport { useLottery } from 'state/lottery/hooks'\r\nimport { fetchCurrentLottery, setLotteryIsTransitioning } from 'state/lottery'\r\n\r\nconst useNextEventCountdown = (nextEventTime: number): number => {\r\n  const dispatch = useAppDispatch()\r\n  const [secondsRemaining, setSecondsRemaining] = useState(null)\r\n  const timer = useRef(null)\r\n  const { currentLotteryId } = useLottery()\r\n\r\n  useEffect(() => {\r\n    dispatch(setLotteryIsTransitioning({ isTransitioning: false }))\r\n    const currentSeconds = Math.floor(Date.now() / 1000)\r\n    const secondsRemainingCalc = nextEventTime - currentSeconds\r\n    setSecondsRemaining(secondsRemainingCalc)\r\n\r\n    timer.current = setInterval(() => {\r\n      setSecondsRemaining((prevSecondsRemaining) => {\r\n        // Clear current interval at end of countdown and fetch current lottery to get updated state\r\n        if (prevSecondsRemaining <= 1) {\r\n          clearInterval(timer.current)\r\n          dispatch(setLotteryIsTransitioning({ isTransitioning: true }))\r\n          dispatch(fetchCurrentLottery({ currentLotteryId }))\r\n        }\r\n        return prevSecondsRemaining - 1\r\n      })\r\n    }, 1000)\r\n\r\n    return () => clearInterval(timer.current)\r\n  }, [setSecondsRemaining, nextEventTime, currentLotteryId, timer, dispatch])\r\n\r\n  return secondsRemaining\r\n}\r\n\r\nexport default useNextEventCountdown\r\n","import React from 'react'\r\nimport { Flex, Heading, Skeleton } from '@pancakeswap/uikit'\r\nimport getTimePeriods from 'utils/getTimePeriods'\r\nimport Timer from './Timer'\r\nimport useNextEventCountdown from '../../hooks/useNextEventCountdown'\r\n\r\ninterface CountdownProps {\r\n  nextEventTime: number\r\n  preCountdownText?: string\r\n  postCountdownText?: string\r\n}\r\n\r\nconst Countdown: React.FC<CountdownProps> = ({ nextEventTime, preCountdownText, postCountdownText }) => {\r\n  const secondsRemaining = useNextEventCountdown(nextEventTime)\r\n  const { days, hours, minutes } = getTimePeriods(secondsRemaining)\r\n\r\n  return (\r\n    <>\r\n      {secondsRemaining ? (\r\n        <Flex display=\"inline-flex\" justifyContent=\"flex-end\" alignItems=\"flex-end\">\r\n          {preCountdownText && (\r\n            <Heading mr=\"12px\" color=\"#ffff\">\r\n              {preCountdownText}\r\n            </Heading>\r\n          )}\r\n          {secondsRemaining > 0 && (\r\n            <>\r\n              <Timer\r\n                minutes={minutes + 1} // We don't show seconds - so values from 0 - 59s should be shown as 1 min\r\n                hours={hours}\r\n                days={days}\r\n              />\r\n              {postCountdownText && <Heading color=\"#ffff\">{postCountdownText}</Heading>}\r\n            </>\r\n          )}\r\n          {secondsRemaining < 0 && (\r\n            <Heading color=\"#ffff\">Waiting to draw winning combinations</Heading>\r\n          )}\r\n        </Flex>\r\n      ) : (\r\n        <Skeleton height=\"41px\" width=\"250px\" />\r\n      )}\r\n    </>\r\n  )\r\n}\r\n\r\nexport default Countdown\r\n","import React from 'react'\r\nimport { ButtonMenu, ButtonMenuItem } from '@pancakeswap/uikit'\r\nimport { useTranslation } from 'contexts/Localization'\r\n\r\nconst HistoryTabMenu = ({ setActiveIndex, activeIndex }) => {\r\n  const { t } = useTranslation()\r\n\r\n  return (\r\n    <ButtonMenu activeIndex={activeIndex} onItemClick={setActiveIndex} scale=\"sm\" variant=\"subtle\">\r\n      <ButtonMenuItem className={`menuButton${activeIndex === 0 ? ' active' : ''}`}>{t('All History')}</ButtonMenuItem>\r\n      <ButtonMenuItem className={`menuButton${activeIndex === 1 ? ' active' : ''}`}>{t('Your History')}</ButtonMenuItem>\r\n    </ButtonMenu>\r\n  )\r\n}\r\n\r\nexport default HistoryTabMenu\r\n","import React from 'react'\r\nimport styled from 'styled-components'\r\nimport { useTranslation } from 'contexts/Localization'\r\nimport { Text, Flex, ChevronRightIcon, Box, SmallDotIcon, PrizeIcon } from '@pancakeswap/uikit'\r\nimport { dateOptions, timeOptions } from '../../helpers'\r\n\r\ninterface FinishedRoundRowProps {\r\n  roundId: string\r\n  numberTickets: string\r\n  endTime: string\r\n  onClick: (string) => void\r\n  hasWon?: boolean\r\n}\r\n\r\nconst Grid = styled(Box)`\r\n  display: grid;\r\n  grid-template-columns: repeat(3, 1fr) auto;\r\n  margin-bottom: 8px;\r\n  cursor: pointer;\r\n`\r\n\r\nconst StyledSmallDotIcon = styled(SmallDotIcon)`\r\n  path {\r\n    fill: ${({ theme }) => theme.colors.textDisabled};\r\n  }\r\n`\r\n\r\nconst FinishedRoundRow: React.FC<FinishedRoundRowProps> = ({\r\n  roundId,\r\n  numberTickets,\r\n  endTime,\r\n  onClick,\r\n  hasWon = false,\r\n}) => {\r\n  const {\r\n    currentLanguage: { locale },\r\n  } = useTranslation()\r\n  const endTimeInMs = parseInt(endTime, 10) * 1000\r\n  const endTimeAsDate = new Date(endTimeInMs)\r\n\r\n  return (\r\n    <Grid onClick={() => onClick(roundId)}>\r\n      <Flex alignItems=\"center\">\r\n        <Text fontSize=\"16px\" color=\"textSubtle\">\r\n          {roundId}\r\n        </Text>\r\n      </Flex>\r\n      <Flex\r\n        mx=\"6px\"\r\n        alignItems={['flex-start', null, 'center']}\r\n        justifyContent={['center', null, 'flex-start']}\r\n        flexDirection={['column', null, 'row']}\r\n      >\r\n        <Text fontSize=\"12px\" mr={['0', null, '6px']}>\r\n          {endTimeAsDate.toLocaleDateString(locale, dateOptions)}\r\n        </Text>\r\n        <Text fontSize=\"12px\" color=\"textSubtle\">\r\n          {endTimeAsDate.toLocaleTimeString(undefined, timeOptions)}\r\n        </Text>\r\n      </Flex>\r\n      <Flex mx=\"6px\" alignItems=\"center\" justifyContent=\"space-between\">\r\n        <Text>{numberTickets}</Text>\r\n        {hasWon ? <PrizeIcon color=\"warning\" /> : <StyledSmallDotIcon />}\r\n      </Flex>\r\n      <Flex alignItems=\"center\" justifyContent=\"center\">\r\n        <ChevronRightIcon color=\"primary\" />\r\n      </Flex>\r\n    </Grid>\r\n  )\r\n}\r\n\r\nexport default FinishedRoundRow\r\n","import React from 'react'\r\nimport styled from 'styled-components'\r\nimport { Text, Box, Flex, Button } from '@pancakeswap/uikit'\r\nimport { useTranslation } from 'contexts/Localization'\r\nimport { LotteryStatus } from 'config/constants/types'\r\nimport { useGetUserLotteriesGraphData } from 'state/lottery/hooks'\r\nimport FinishedRoundRow from './FinishedRoundRow'\r\n\r\nconst Grid = styled(Box)`\r\n  display: grid;\r\n  grid-template-columns: repeat(3, 1fr) auto;\r\n`\r\n\r\ninterface FinishedRoundTableProps {\r\n  handleHistoryRowClick: (string) => void\r\n  handleShowMoreClick: () => void\r\n  numUserRoundsRequested: number\r\n}\r\n\r\nconst FinishedRoundTable: React.FC<FinishedRoundTableProps> = ({\r\n  handleShowMoreClick,\r\n  numUserRoundsRequested,\r\n  handleHistoryRowClick,\r\n}) => {\r\n  const { t } = useTranslation()\r\n  const userLotteryData = useGetUserLotteriesGraphData()\r\n\r\n  const filteredForClaimable = userLotteryData?.rounds.filter((round) => {\r\n    return round.status.toLowerCase() === LotteryStatus.CLAIMABLE\r\n  })\r\n\r\n  const sortedByRoundId = filteredForClaimable?.sort((roundA, roundB) => {\r\n    return parseInt(roundB.lotteryId, 10) - parseInt(roundA.lotteryId, 10)\r\n  })\r\n\r\n  return (\r\n    <>\r\n      <Grid px=\"24px\" pt=\"24px\" mb=\"8px\">\r\n        <Text bold fontSize=\"12px\" color=\"secondary\">\r\n          #\r\n        </Text>\r\n        <Text bold fontSize=\"12px\" color=\"secondary\" textTransform=\"uppercase\">\r\n          {t('Date')}\r\n        </Text>\r\n        <Text bold fontSize=\"12px\" color=\"secondary\" textTransform=\"uppercase\">\r\n          {t('Your Tickets')}\r\n        </Text>\r\n        <Box width=\"20px\" />\r\n      </Grid>\r\n      <Flex px=\"24px\" pb=\"24px\" flexDirection=\"column\" overflowY=\"scroll\" height=\"240px\">\r\n        {userLotteryData &&\r\n          sortedByRoundId.map((finishedRound) => (\r\n            <FinishedRoundRow\r\n              key={finishedRound.lotteryId}\r\n              roundId={finishedRound.lotteryId}\r\n              hasWon={finishedRound.claimed}\r\n              numberTickets={finishedRound.totalTickets}\r\n              endTime={finishedRound.endTime}\r\n              onClick={handleHistoryRowClick}\r\n            />\r\n          ))}\r\n        {userLotteryData?.rounds?.length === numUserRoundsRequested && (\r\n          <Flex justifyContent=\"center\">\r\n            <Button mt=\"12px\" variant=\"text\" width=\"fit-content\" onClick={handleShowMoreClick}>\r\n              {t('Show More')}\r\n            </Button>\r\n          </Flex>\r\n        )}\r\n      </Flex>\r\n    </>\r\n  )\r\n}\r\n\r\nexport default FinishedRoundTable\r\n","import React from 'react'\r\nimport styled from 'styled-components'\r\nimport {\r\n  CardBody,\r\n  Heading,\r\n  Flex,\r\n  Skeleton,\r\n  Text,\r\n  Box,\r\n  Button,\r\n  useModal,\r\n  CardRibbon,\r\n  useMatchBreakpoints,\r\n  BunnyPlaceholderIcon,\r\n} from '@pancakeswap/uikit'\r\nimport { LotteryRound } from 'state/types'\r\nimport { useGetUserLotteriesGraphData, useLottery } from 'state/lottery/hooks'\r\nimport { LotteryStatus } from 'config/constants/types'\r\nimport { useTranslation } from 'contexts/Localization'\r\nimport WinningNumbers from '../WinningNumbers'\r\nimport ViewTicketsModal from '../ViewTicketsModal'\r\n\r\nconst StyledCardBody = styled(CardBody)`\r\n  position: relative;\r\n  overflow: hidden;\r\n  display: flex;\r\n  align-items: center;\r\n  justify-content: center;\r\n`\r\nconst Grid = styled.div`\r\n  display: grid;\r\n  grid-template-columns: auto;\r\n\r\n  ${({ theme }) => theme.mediaQueries.md} {\r\n    grid-column-gap: 72px;\r\n    grid-row-gap: 36px;\r\n    grid-template-columns: auto 1fr;\r\n  }\r\n`\r\n\r\nconst StyledCardRibbon = styled(CardRibbon)`\r\n  right: -20px;\r\n  top: -20px;\r\n\r\n  ${({ theme }) => theme.mediaQueries.xs} {\r\n    right: -10px;\r\n    top: -10px;\r\n  }\r\n`\r\n\r\nconst PreviousRoundCardBody: React.FC<{ lotteryNodeData: LotteryRound; lotteryId: string }> = ({\r\n  lotteryNodeData,\r\n  lotteryId,\r\n}) => {\r\n  const { t } = useTranslation()\r\n  const {\r\n    currentLotteryId,\r\n    currentRound: { status },\r\n  } = useLottery()\r\n  const userLotteryData = useGetUserLotteriesGraphData()\r\n  const userDataForRound = userLotteryData.rounds.find((userLotteryRound) => userLotteryRound.lotteryId === lotteryId)\r\n  const { isLg, isXl, isXxl } = useMatchBreakpoints()\r\n  const isLargerScreen = isLg || isXl || isXxl\r\n\r\n  const currentLotteryIdAsInt = parseInt(currentLotteryId)\r\n  const mostRecentFinishedRoundId =\r\n    status === LotteryStatus.CLAIMABLE ? currentLotteryIdAsInt : currentLotteryIdAsInt - 1\r\n  const isLatestRound = mostRecentFinishedRoundId.toString() === lotteryId\r\n\r\n  const [onPresentViewTicketsModal] = useModal(\r\n    <ViewTicketsModal roundId={lotteryId} roundStatus={lotteryNodeData?.status} />,\r\n  )\r\n\r\n  const totalTicketNumber = userDataForRound ? userDataForRound.totalTickets : 0\r\n  const ticketRoundText =\r\n    totalTicketNumber > 1\r\n      ? t('You had %amount% tickets this round', { amount: totalTicketNumber })\r\n      : t('You had %amount% ticket this round', { amount: totalTicketNumber })\r\n  const [youHadText, ticketsThisRoundText] = ticketRoundText.split(totalTicketNumber.toString())\r\n\r\n  return (\r\n    <StyledCardBody>\r\n      {isLatestRound && <StyledCardRibbon text={t('Latest')} />}\r\n      <Grid>\r\n        <Flex justifyContent={['center', null, null, 'flex-start']}>\r\n          <Heading mb=\"24px\">{t('Winning Number')}</Heading>\r\n        </Flex>\r\n        <Flex maxWidth={['240px', null, null, '100%']} justifyContent={['center', null, null, 'flex-start']}>\r\n          {lotteryId ? (\r\n            lotteryNodeData ? (\r\n              <WinningNumbers\r\n                rotateText={isLargerScreen || false}\r\n                number={lotteryNodeData?.finalNumber.toString()}\r\n                mr={[null, null, null, '32px']}\r\n                size=\"100%\"\r\n                fontSize={isLargerScreen ? '42px' : '16px'}\r\n                maxHeight=\"71px\"\r\n              />\r\n            ) : (\r\n              <Skeleton\r\n                width={['240px', null, null, '450px']}\r\n                height={['34px', null, null, '71px']}\r\n                mr={[null, null, null, '32px']}\r\n              />\r\n            )\r\n          ) : (\r\n            <>\r\n              <Flex flexDirection=\"column\" alignItems=\"center\" width={['240px', null, null, '480px']}>\r\n                <Text mb=\"8px\">{t('Please specify Round')}</Text>\r\n                <BunnyPlaceholderIcon height=\"64px\" width=\"64px\" />\r\n              </Flex>\r\n            </>\r\n          )}\r\n        </Flex>\r\n        {userDataForRound && (\r\n          <>\r\n            <Box display={['none', null, null, 'flex']}>\r\n              <Heading>{t('Your tickets')}</Heading>\r\n            </Box>\r\n            <Flex\r\n              flexDirection=\"column\"\r\n              mr={[null, null, null, '24px']}\r\n              alignItems={['center', null, null, 'flex-start']}\r\n            >\r\n              <Box mt={['32px', null, null, 0]}>\r\n                <Text display=\"inline\">{youHadText} </Text>\r\n                <Text display=\"inline\" bold>\r\n                  {userDataForRound.totalTickets}\r\n                </Text>\r\n                <Text display=\"inline\">{ticketsThisRoundText}</Text>\r\n              </Box>\r\n              <Button\r\n                className=\"textButton\"\r\n                onClick={onPresentViewTicketsModal}\r\n                height=\"auto\"\r\n                width=\"fit-content\"\r\n                p=\"0\"\r\n                variant=\"text\"\r\n                scale=\"sm\"\r\n              >\r\n                {t('View your tickets')}\r\n              </Button>\r\n            </Flex>\r\n          </>\r\n        )}\r\n      </Grid>\r\n    </StyledCardBody>\r\n  )\r\n}\r\n\r\nexport default PreviousRoundCardBody\r\n","import React, { useState, useEffect } from 'react'\r\nimport styled from 'styled-components'\r\nimport BigNumber from 'bignumber.js'\r\nimport { Flex, Skeleton, Heading, Box, Text } from '@pancakeswap/uikit'\r\nimport { useTranslation } from 'contexts/Localization'\r\nimport { LotteryRound, LotteryRoundGraphEntity } from 'state/types'\r\nimport { usePriceCakeBusd } from 'state/farms/hooks'\r\nimport { useGetLotteryGraphDataById } from 'state/lottery/hooks'\r\nimport * as token from 'config/constants/tokens.lottery'\r\nimport { getGraphLotteries } from 'state/lottery/getLotteriesData'\r\nimport { formatNumber, getBalanceNumber } from 'utils/formatBalance'\r\nimport Balance from 'components/Balance'\r\nimport RewardBrackets from '../RewardBrackets'\r\n\r\nconst NextDrawWrapper = styled(Flex)`\r\n  background: ${({ theme }) => theme.colors.background};\r\n  padding: 24px;\r\n  flex-direction: column;\r\n\r\n  ${({ theme }) => theme.mediaQueries.sm} {\r\n    flex-direction: row;\r\n  }\r\n`\r\n\r\nconst PreviousRoundCardFooter: React.FC<{ lotteryNodeData: LotteryRound; lotteryId: string }> = ({\r\n  lotteryNodeData,\r\n  lotteryId,\r\n}) => {\r\n  const { t } = useTranslation()\r\n  const [fetchedLotteryGraphData, setFetchedLotteryGraphData] = useState<LotteryRoundGraphEntity>()\r\n  const lotteryGraphDataFromState = useGetLotteryGraphDataById(lotteryId)\r\n  const cakePriceBusd = token.info().price || 0\r\n\r\n  useEffect(() => {\r\n    const getGraphData = async () => {\r\n      const fetchedGraphData = await getGraphLotteries(undefined, undefined, { id_in: [lotteryId] })\r\n      setFetchedLotteryGraphData(fetchedGraphData[0])\r\n    }\r\n    if (!lotteryGraphDataFromState) {\r\n      getGraphData()\r\n    }\r\n  }, [lotteryGraphDataFromState, lotteryId])\r\n\r\n  let prizeInBusd = new BigNumber(NaN)\r\n  if (lotteryNodeData) {\r\n    const { amountCollectedInCake } = lotteryNodeData\r\n    prizeInBusd = amountCollectedInCake.times(cakePriceBusd)\r\n  }\r\n\r\n  const getTotalUsers = (): string => {\r\n    if (!lotteryGraphDataFromState && fetchedLotteryGraphData) {\r\n      return fetchedLotteryGraphData?.totalUsers?.toLocaleString()\r\n    }\r\n\r\n    if (lotteryGraphDataFromState) {\r\n      return lotteryGraphDataFromState?.totalUsers?.toLocaleString()\r\n    }\r\n\r\n    return null\r\n  }\r\n\r\n  const getPrizeBalances = () => {\r\n    return (\r\n      <>\r\n        {token.info().price ? (\r\n          <>\r\n            {prizeInBusd.isNaN() ? (\r\n              <Skeleton my=\"7px\" height={40} width={200} />\r\n            ) : (\r\n              <Heading scale=\"xl\" lineHeight=\"1\" color=\"secondary\">\r\n                ~${formatNumber(getBalanceNumber(prizeInBusd, token.info().decimals), 0, 0)}\r\n              </Heading>\r\n            )}\r\n            {prizeInBusd.isNaN() ? (\r\n              <Skeleton my=\"2px\" height={14} width={90} />\r\n            ) : (\r\n              <Balance\r\n                fontSize=\"14px\"\r\n                color=\"textSubtle\"\r\n                unit={` ${token.info().symbol}`}\r\n                value={getBalanceNumber(lotteryNodeData?.amountCollectedInCake, token.info().decimals)}\r\n                decimals={token.info().viewDecimals}\r\n              />\r\n            )}\r\n          </>\r\n        ) : (\r\n          <Heading scale=\"xl\" lineHeight=\"1\" color=\"secondary\">\r\n            <Balance\r\n              fontSize=\"14px\"\r\n              color=\"textSubtle\"\r\n              unit={` ${token.info().symbol}`}\r\n              value={getBalanceNumber(lotteryNodeData?.amountCollectedInCake, token.info().decimals)}\r\n              decimals={token.info().viewDecimals}\r\n            />\r\n          </Heading>\r\n        )}\r\n      </>\r\n    )\r\n  }\r\n\r\n  return (\r\n    <NextDrawWrapper>\r\n      <Flex mr=\"24px\" flexDirection=\"column\" justifyContent=\"space-between\">\r\n        <Box>\r\n          <Heading>{t('Prize pot')}</Heading>\r\n          {getPrizeBalances()}\r\n        </Box>\r\n        <Box mb=\"24px\">\r\n          <Flex>\r\n            <Text fontSize=\"14px\" display=\"inline\">\r\n              {t('Total players this round')}:{' '}\r\n              {lotteryNodeData && (lotteryGraphDataFromState || fetchedLotteryGraphData) ? (\r\n                getTotalUsers()\r\n              ) : (\r\n                <Skeleton height={14} width={31} />\r\n              )}\r\n            </Text>\r\n          </Flex>\r\n        </Box>\r\n      </Flex>\r\n      <RewardBrackets lotteryNodeData={lotteryNodeData} isHistoricRound />\r\n    </NextDrawWrapper>\r\n  )\r\n}\r\n\r\nexport default PreviousRoundCardFooter\r\n","import React, { useEffect, useState } from 'react'\r\nimport { Flex, ExpandableLabel as ExpandableLabelUiKit, CardFooter } from '@pancakeswap/uikit'\r\nimport { useTranslation } from 'contexts/Localization'\r\nimport { LotteryRound } from 'state/types'\r\nimport FooterExpanded from './FooterExpanded'\r\nimport styled from 'styled-components'\r\n\r\nconst ExpandableLabel = styled(ExpandableLabelUiKit)`\r\n  &:hover {\r\n    color: #1FC7D4;\r\n    background-color: transparent;\r\n  }\r\n\r\n  &:active {\r\n    color: #1FC7D4;\r\n    background-color: transparent;\r\n  }\r\n\r\n  &:focus {\r\n    color: #1FC7D4;\r\n    background-color: transparent;\r\n  }\r\n`\r\n\r\ninterface PreviousRoundCardFooterProps {\r\n  lotteryNodeData: LotteryRound\r\n  lotteryId: string\r\n}\r\n\r\nconst PreviousRoundCardFooter: React.FC<PreviousRoundCardFooterProps> = ({ lotteryNodeData, lotteryId }) => {\r\n  const { t } = useTranslation()\r\n  const [isExpanded, setIsExpanded] = useState(false)\r\n\r\n  useEffect(() => {\r\n    if (!lotteryId) {\r\n      setIsExpanded(false)\r\n    }\r\n  }, [lotteryId])\r\n\r\n  return (\r\n    <CardFooter p=\"0\">\r\n      {isExpanded && <FooterExpanded lotteryNodeData={lotteryNodeData} lotteryId={lotteryId} />}\r\n      <Flex p=\"8px 24px\" alignItems=\"center\" justifyContent=\"center\">\r\n        <ExpandableLabel\r\n          expanded={isExpanded}\r\n          onClick={() => {\r\n            if (lotteryId) {\r\n              setIsExpanded(!isExpanded)\r\n            }\r\n          }}\r\n        >\r\n          {isExpanded ? t('Hide') : t('Details')}\r\n        </ExpandableLabel>\r\n      </Flex>\r\n    </CardFooter>\r\n  )\r\n}\r\n\r\nexport default PreviousRoundCardFooter\r\n","import React, { useState } from 'react'\r\nimport { useWeb3React } from '@web3-react/core'\r\nimport styled from 'styled-components'\r\nimport {\r\n  CardHeader,\r\n  Card,\r\n  CardBody,\r\n  Text,\r\n  CardFooter,\r\n  ArrowBackIcon,\r\n  Flex,\r\n  Heading,\r\n  Skeleton,\r\n  Box,\r\n} from '@pancakeswap/uikit'\r\nimport { useTranslation } from 'contexts/Localization'\r\nimport { LotteryStatus } from 'config/constants/types'\r\nimport { useGetUserLotteriesGraphData, useLottery } from 'state/lottery/hooks'\r\nimport { fetchLottery } from 'state/lottery/helpers'\r\nimport { LotteryRound } from 'state/types'\r\nimport ConnectWalletButton from 'components/ConnectWalletButton'\r\nimport FinishedRoundTable from './FinishedRoundTable'\r\nimport { WhiteBunny } from '../../svgs'\r\nimport BuyTicketsButton from '../BuyTicketsButton'\r\nimport PreviousRoundCardBody from '../PreviousRoundCard/Body'\r\nimport { processLotteryResponse, getDrawnDate } from '../../helpers'\r\nimport PreviousRoundCardFooter from '../PreviousRoundCard/Footer'\r\n\r\ninterface YourHistoryCardProps {\r\n  handleShowMoreClick: () => void\r\n  numUserRoundsRequested: number\r\n}\r\n\r\nconst StyledCard = styled(Card)`\r\n  width: 100%;\r\n\r\n  ${({ theme }) => theme.mediaQueries.md} {\r\n    width: 756px;\r\n  }\r\n`\r\n\r\nconst StyledCardBody = styled(CardBody)`\r\n  display: flex;\r\n  flex-direction: column;\r\n  align-items: center;\r\n  justify-content: center;\r\n  min-height: 240px;\r\n`\r\n\r\nconst YourHistoryCard: React.FC<YourHistoryCardProps> = ({ handleShowMoreClick, numUserRoundsRequested }) => {\r\n  const {\r\n    t,\r\n    currentLanguage: { locale },\r\n  } = useTranslation()\r\n  const { account } = useWeb3React()\r\n  const [shouldShowRoundDetail, setShouldShowRoundDetail] = useState(false)\r\n  const [selectedLotteryNodeData, setSelectedLotteryNodeData] = useState<LotteryRound>(null)\r\n  const [selectedLotteryId, setSelectedLotteryId] = useState<string>(null)\r\n\r\n  const {\r\n    isTransitioning,\r\n    currentRound: { status },\r\n  } = useLottery()\r\n  const userLotteryData = useGetUserLotteriesGraphData()\r\n  const ticketBuyIsDisabled = status !== LotteryStatus.OPEN || isTransitioning\r\n\r\n  const handleHistoryRowClick = async (lotteryId: string) => {\r\n    setShouldShowRoundDetail(true)\r\n    setSelectedLotteryId(lotteryId)\r\n    const lotteryData = await fetchLottery(lotteryId)\r\n    const processedLotteryData = processLotteryResponse(lotteryData)\r\n    setSelectedLotteryNodeData(processedLotteryData)\r\n  }\r\n\r\n  const clearState = () => {\r\n    setShouldShowRoundDetail(false)\r\n    setSelectedLotteryNodeData(null)\r\n    setSelectedLotteryId(null)\r\n  }\r\n\r\n  const getHeader = () => {\r\n    if (shouldShowRoundDetail) {\r\n      return (\r\n        <Flex alignItems=\"center\">\r\n          <ArrowBackIcon cursor=\"pointer\" onClick={() => clearState()} mr=\"20px\" />\r\n          <Flex flexDirection=\"column\" alignItems=\"flex-start\" justifyContent=\"center\">\r\n            <Heading scale=\"md\" mb=\"4px\">\r\n              {t('Round')} {selectedLotteryId || ''}\r\n            </Heading>\r\n            {selectedLotteryNodeData?.endTime ? (\r\n              <Text fontSize=\"14px\">\r\n                {t('Drawn')} {getDrawnDate(locale, selectedLotteryNodeData.endTime)}\r\n              </Text>\r\n            ) : (\r\n              <Skeleton width=\"185px\" height=\"21px\" />\r\n            )}\r\n          </Flex>\r\n        </Flex>\r\n      )\r\n    }\r\n\r\n    return <Heading scale=\"md\">{t('Rounds')}</Heading>\r\n  }\r\n\r\n  const getBody = () => {\r\n    if (shouldShowRoundDetail) {\r\n      return <PreviousRoundCardBody lotteryNodeData={selectedLotteryNodeData} lotteryId={selectedLotteryId} />\r\n    }\r\n\r\n    const claimableRounds = userLotteryData?.rounds.filter((round) => {\r\n      return round.status.toLowerCase() === LotteryStatus.CLAIMABLE\r\n    })\r\n\r\n    if (!account) {\r\n      return (\r\n        <StyledCardBody>\r\n          <Text textAlign=\"center\" color=\"textSubtle\" mb=\"16px\">\r\n            {t('Connect your wallet to check your history')}\r\n          </Text>\r\n          <ConnectWalletButton />\r\n        </StyledCardBody>\r\n      )\r\n    }\r\n    if (claimableRounds.length === 0) {\r\n      return (\r\n        <StyledCardBody>\r\n          <Box maxWidth=\"280px\">\r\n            <Flex alignItems=\"center\" justifyContent=\"center\" mb=\"16px\">\r\n              <WhiteBunny height=\"24px\" mr=\"8px\" /> <Text textAlign=\"left\">{t('No lottery history found')}</Text>\r\n            </Flex>\r\n            <Text textAlign=\"center\" color=\"textSubtle\" mb=\"16px\">\r\n              {t('Buy tickets for the next round!')}\r\n            </Text>\r\n            <BuyTicketsButton disabled={ticketBuyIsDisabled} width=\"100%\" />\r\n          </Box>\r\n        </StyledCardBody>\r\n      )\r\n    }\r\n    return (\r\n      <FinishedRoundTable\r\n        handleHistoryRowClick={handleHistoryRowClick}\r\n        handleShowMoreClick={handleShowMoreClick}\r\n        numUserRoundsRequested={numUserRoundsRequested}\r\n      />\r\n    )\r\n  }\r\n\r\n  const getFooter = () => {\r\n    if (selectedLotteryNodeData) {\r\n      return <PreviousRoundCardFooter lotteryNodeData={selectedLotteryNodeData} lotteryId={selectedLotteryId} />\r\n    }\r\n    return (\r\n      <CardFooter>\r\n        <Flex flexDirection=\"column\" justifyContent=\"center\" alignItems=\"center\">\r\n          <Text fontSize=\"12px\" color=\"textSubtle\">\r\n            {t('Only showing data for Lottery V2')}\r\n          </Text>\r\n        </Flex>\r\n      </CardFooter>\r\n    )\r\n  }\r\n\r\n  return (\r\n    <StyledCard>\r\n      <CardHeader>{getHeader()}</CardHeader>\r\n      {getBody()}\r\n      {getFooter()}\r\n    </StyledCard>\r\n  )\r\n}\r\n\r\nexport default YourHistoryCard\r\n","import React from 'react'\r\nimport styled from 'styled-components'\r\nimport { IconButton, ArrowForwardIcon, ArrowBackIcon, ArrowLastIcon, Flex, Heading, Input } from '@pancakeswap/uikit'\r\nimport { useTranslation } from 'contexts/Localization'\r\n\r\nconst StyledInput = styled(Input)`\r\n  width: 60px;\r\n  height: 100%;\r\n  padding: 4px 16px;\r\n`\r\n\r\nconst StyledIconButton = styled(IconButton)`\r\n  width: 32px;\r\n\r\n  :disabled {\r\n    background: none;\r\n\r\n    svg {\r\n      fill: ${({ theme }) => theme.colors.textDisabled};\r\n\r\n      path {\r\n        fill: ${({ theme }) => theme.colors.textDisabled};\r\n      }\r\n    }\r\n  }\r\n`\r\n\r\ninterface RoundSwitcherProps {\r\n  isLoading: boolean\r\n  selectedRoundId: string\r\n  mostRecentRound: number\r\n  handleInputChange: (event: any) => void\r\n  handleArrowButtonPress: (targetRound: number) => void\r\n}\r\n\r\nconst RoundSwitcher: React.FC<RoundSwitcherProps> = ({\r\n  isLoading,\r\n  selectedRoundId,\r\n  mostRecentRound,\r\n  handleInputChange,\r\n  handleArrowButtonPress,\r\n}) => {\r\n  const { t } = useTranslation()\r\n  const selectedRoundIdAsInt = parseInt(selectedRoundId, 10)\r\n\r\n  const handleOnChange = (e: React.ChangeEvent<HTMLInputElement>) => {\r\n    if (e.currentTarget.validity.valid) {\r\n      handleInputChange(e)\r\n    }\r\n  }\r\n\r\n  return (\r\n    <Flex alignItems=\"center\" justifyContent=\"space-between\">\r\n      <Flex alignItems=\"center\">\r\n        <Heading mr=\"8px\">{t('Round')}</Heading>\r\n        <StyledInput\r\n          pattern=\"^[0-9]+$\"\r\n          inputMode=\"numeric\"\r\n          disabled={isLoading}\r\n          id=\"round-id\"\r\n          name=\"round-id\"\r\n          value={selectedRoundId}\r\n          scale=\"lg\"\r\n          onChange={handleOnChange}\r\n        />\r\n      </Flex>\r\n      <Flex alignItems=\"center\">\r\n        <StyledIconButton\r\n          className=\"iconButton\"\r\n          disabled={!selectedRoundIdAsInt || selectedRoundIdAsInt <= 1}\r\n          onClick={() => handleArrowButtonPress(selectedRoundIdAsInt - 1)}\r\n          variant=\"text\"\r\n          scale=\"sm\"\r\n          mr=\"4px\"\r\n        >\r\n          <ArrowBackIcon />\r\n        </StyledIconButton>\r\n        <StyledIconButton\r\n          className=\"iconButton\"\r\n          disabled={selectedRoundIdAsInt >= mostRecentRound}\r\n          onClick={() => handleArrowButtonPress(selectedRoundIdAsInt + 1)}\r\n          variant=\"text\"\r\n          scale=\"sm\"\r\n          mr=\"4px\"\r\n        >\r\n          <ArrowForwardIcon />\r\n        </StyledIconButton>\r\n        <StyledIconButton\r\n          className=\"iconButton\"\r\n          disabled={selectedRoundIdAsInt >= mostRecentRound}\r\n          onClick={() => handleArrowButtonPress(mostRecentRound)}\r\n          variant=\"text\"\r\n          scale=\"sm\"\r\n        >\r\n          <ArrowLastIcon />\r\n        </StyledIconButton>\r\n      </Flex>\r\n    </Flex>\r\n  )\r\n}\r\n\r\nexport default RoundSwitcher\r\n","import React, { useState, useRef, useEffect } from 'react'\r\nimport styled from 'styled-components'\r\nimport { Card, Text, Skeleton, CardHeader, Box } from '@pancakeswap/uikit'\r\nimport { useTranslation } from 'contexts/Localization'\r\nimport { useAppDispatch } from 'state'\r\nimport { useLottery } from 'state/lottery/hooks'\r\nimport { fetchLottery } from 'state/lottery/helpers'\r\nimport { LotteryStatus } from 'config/constants/types'\r\nimport RoundSwitcher from './RoundSwitcher'\r\nimport { getDrawnDate, processLotteryResponse } from '../../helpers'\r\nimport PreviousRoundCardBody from '../PreviousRoundCard/Body'\r\nimport PreviousRoundCardFooter from '../PreviousRoundCard/Footer'\r\n\r\nconst StyledCard = styled(Card)`\r\n  width: 100%;\r\n\r\n  ${({ theme }) => theme.mediaQueries.md} {\r\n    width: 756px;\r\n  }\r\n`\r\n\r\nconst StyledCardHeader = styled(CardHeader)`\r\n  z-index: 2;\r\n  background: none;\r\n  border-bottom: 1px ${({ theme }) => theme.colors.cardBorder} solid;\r\n`\r\n\r\nconst AllHistoryCard = () => {\r\n  const {\r\n    t,\r\n    currentLanguage: { locale },\r\n  } = useTranslation()\r\n  const dispatch = useAppDispatch()\r\n  const {\r\n    currentLotteryId,\r\n    lotteriesData,\r\n    currentRound: { status, isLoading },\r\n  } = useLottery()\r\n  const [latestRoundId, setLatestRoundId] = useState(null)\r\n  const [selectedRoundId, setSelectedRoundId] = useState('')\r\n  const [selectedLotteryNodeData, setSelectedLotteryNodeData] = useState(null)\r\n  const timer = useRef(null)\r\n\r\n  const numRoundsFetched = lotteriesData?.length\r\n\r\n  useEffect(() => {\r\n    if (currentLotteryId) {\r\n      const currentLotteryIdAsInt = currentLotteryId ? parseInt(currentLotteryId) : null\r\n      const mostRecentFinishedRoundId =\r\n        status === LotteryStatus.CLAIMABLE ? currentLotteryIdAsInt : currentLotteryIdAsInt - 1\r\n      setLatestRoundId(mostRecentFinishedRoundId)\r\n      setSelectedRoundId(mostRecentFinishedRoundId.toString())\r\n    }\r\n  }, [currentLotteryId, status])\r\n\r\n  useEffect(() => {\r\n    setSelectedLotteryNodeData(null)\r\n\r\n    const fetchLotteryData = async () => {\r\n      const lotteryData = await fetchLottery(selectedRoundId)\r\n      const processedLotteryData = processLotteryResponse(lotteryData)\r\n      setSelectedLotteryNodeData(processedLotteryData)\r\n    }\r\n\r\n    timer.current = setInterval(() => {\r\n      if (selectedRoundId) {\r\n        fetchLotteryData()\r\n      }\r\n      clearInterval(timer.current)\r\n    }, 1000)\r\n\r\n    return () => clearInterval(timer.current)\r\n  }, [selectedRoundId, currentLotteryId, numRoundsFetched, dispatch])\r\n\r\n  const handleInputChange = (event) => {\r\n    const {\r\n      target: { value },\r\n    } = event\r\n    if (value) {\r\n      setSelectedRoundId(value)\r\n      if (parseInt(value, 10) <= 0) {\r\n        setSelectedRoundId('')\r\n      }\r\n      if (parseInt(value, 10) >= latestRoundId) {\r\n        setSelectedRoundId(latestRoundId.toString())\r\n      }\r\n    } else {\r\n      setSelectedRoundId('')\r\n    }\r\n  }\r\n\r\n  const handleArrowButtonPress = (targetRound) => {\r\n    if (targetRound) {\r\n      setSelectedRoundId(targetRound.toString())\r\n    } else {\r\n      // targetRound is NaN when the input is empty, the only button press that will trigger this func is 'forward one'\r\n      setSelectedRoundId('1')\r\n    }\r\n  }\r\n\r\n  return (\r\n    <StyledCard>\r\n      <StyledCardHeader>\r\n        <RoundSwitcher\r\n          isLoading={isLoading}\r\n          selectedRoundId={selectedRoundId}\r\n          mostRecentRound={latestRoundId}\r\n          handleInputChange={handleInputChange}\r\n          handleArrowButtonPress={handleArrowButtonPress}\r\n        />\r\n        <Box mt=\"8px\">\r\n          {selectedRoundId ? (\r\n            selectedLotteryNodeData?.endTime ? (\r\n              <Text fontSize=\"14px\">\r\n                {t('Drawn')} {getDrawnDate(locale, selectedLotteryNodeData.endTime)}\r\n              </Text>\r\n            ) : (\r\n              <Skeleton width=\"185px\" height=\"21px\" />\r\n            )\r\n          ) : null}\r\n        </Box>\r\n      </StyledCardHeader>\r\n      <PreviousRoundCardBody lotteryNodeData={selectedLotteryNodeData} lotteryId={selectedRoundId} />\r\n      <PreviousRoundCardFooter lotteryNodeData={selectedLotteryNodeData} lotteryId={selectedRoundId} />\r\n    </StyledCard>\r\n  )\r\n}\r\n\r\nexport default AllHistoryCard\r\n","import React, { useEffect, useState } from 'react'\r\nimport styled from 'styled-components'\r\nimport { Button, Heading, Flex, useModal, AutoRenewIcon } from '@pancakeswap/uikit'\r\nimport { useWeb3React } from '@web3-react/core'\r\nimport { LotteryStatus } from 'config/constants/types'\r\nimport { useTranslation } from 'contexts/Localization'\r\nimport { useGetUserLotteriesGraphData, useLottery } from 'state/lottery/hooks'\r\nimport ConnectWalletButton from 'components/ConnectWalletButton'\r\nimport ClaimPrizesModal from './ClaimPrizesModal'\r\nimport useGetUnclaimedRewards, { FetchStatus } from '../hooks/useGetUnclaimedRewards'\r\n\r\nconst TicketImage = styled.img`\r\n  height: 60px;\r\n  ${({ theme }) => theme.mediaQueries.sm} {\r\n    height: 100px;\r\n  }\r\n`\r\n\r\nconst TornTicketImage = styled.img`\r\n  height: 54px;\r\n  ${({ theme }) => theme.mediaQueries.sm} {\r\n    height: 84px;\r\n  }\r\n`\r\n\r\nconst CheckPrizesSection = () => {\r\n  const { t } = useTranslation()\r\n  const { account } = useWeb3React()\r\n  const {\r\n    isTransitioning,\r\n    currentRound: { status },\r\n  } = useLottery()\r\n  const { fetchAllRewards, unclaimedRewards, fetchStatus } = useGetUnclaimedRewards()\r\n  const userLotteryData = useGetUserLotteriesGraphData()\r\n  const [hasCheckedForRewards, setHasCheckedForRewards] = useState(false)\r\n  const [hasRewardsToClaim, setHasRewardsToClaim] = useState(false)\r\n  const [onPresentClaimModal] = useModal(<ClaimPrizesModal roundsToClaim={unclaimedRewards} />, false)\r\n  const isFetchingRewards = fetchStatus === FetchStatus.IN_PROGRESS\r\n  const lotteryIsNotClaimable = status === LotteryStatus.CLOSE\r\n  const isCheckNowDisabled = !userLotteryData.account || lotteryIsNotClaimable\r\n\r\n  useEffect(() => {\r\n    if (fetchStatus === FetchStatus.SUCCESS) {\r\n      // Manage showing unclaimed rewards modal once per page load / once per lottery state change\r\n      if (unclaimedRewards.length > 0 && !hasCheckedForRewards) {\r\n        setHasRewardsToClaim(true)\r\n        setHasCheckedForRewards(true)\r\n        onPresentClaimModal()\r\n      }\r\n\r\n      if (unclaimedRewards.length === 0 && !hasCheckedForRewards) {\r\n        setHasRewardsToClaim(false)\r\n        setHasCheckedForRewards(true)\r\n      }\r\n    }\r\n  }, [unclaimedRewards, hasCheckedForRewards, fetchStatus, onPresentClaimModal])\r\n\r\n  useEffect(() => {\r\n    // Clear local state on account change, or when lottery isTransitioning state changes\r\n    setHasRewardsToClaim(false)\r\n    setHasCheckedForRewards(false)\r\n  }, [account, isTransitioning])\r\n\r\n  const getBody = () => {\r\n    if (!account) {\r\n      return (\r\n        <Flex alignItems=\"center\" justifyContent=\"center\">\r\n          <TicketImage src=\"./images/lottery/ticket-l.png\" alt=\"lottery ticket\" />\r\n          <Flex mx={['4px', null, '16px']} flexDirection=\"column\" alignItems=\"center\">\r\n            <Heading textAlign=\"center\" color=\"#F4EEFF\">\r\n              {t('Connect your wallet')}\r\n            </Heading>\r\n            <Heading textAlign=\"center\" color=\"#F4EEFF\" mb=\"24px\">\r\n              {t(\"to check if you've won!\")}\r\n            </Heading>\r\n            <ConnectWalletButton className=\"primaryButton\" width=\"190px\" />\r\n          </Flex>\r\n          <TicketImage src=\"./images/lottery/ticket-r.png\" alt=\"lottery ticket\" />\r\n        </Flex>\r\n      )\r\n    }\r\n    if (hasCheckedForRewards && !hasRewardsToClaim) {\r\n      return (\r\n        <Flex alignItems=\"center\" justifyContent=\"center\">\r\n          <TornTicketImage src=\"./images/lottery/torn-ticket-l.png\" alt=\"torn lottery ticket\" />\r\n          <Flex mx={['4px', null, '16px']} flexDirection=\"column\">\r\n            <Heading textAlign=\"center\" color=\"#F4EEFF\">\r\n              {t('No prizes to collect')}...\r\n            </Heading>\r\n            <Heading textAlign=\"center\" color=\"#F4EEFF\">\r\n              {t('Better luck next time!')}\r\n            </Heading>\r\n          </Flex>\r\n          <TornTicketImage src=\"./images/lottery/torn-ticket-r.png\" alt=\"torn lottery ticket\" />\r\n        </Flex>\r\n      )\r\n    }\r\n    if (hasCheckedForRewards && hasRewardsToClaim) {\r\n      return (\r\n        <Flex alignItems=\"center\" justifyContent=\"center\">\r\n          <TicketImage src=\"./images/lottery/ticket-l.png\" alt=\"lottery ticket\" />\r\n          <Flex mx={['4px', null, '16px']} flexDirection=\"column\">\r\n            <Heading textAlign=\"center\" color=\"#F4EEFF\">\r\n              {t('Congratulations!')}\r\n            </Heading>\r\n            <Heading textAlign=\"center\" color=\"#F4EEFF\">\r\n              {t('Why not play again')}\r\n            </Heading>\r\n          </Flex>\r\n          <TicketImage src=\"./images/lottery/ticket-r.png\" alt=\"lottery ticket\" />\r\n        </Flex>\r\n      )\r\n    }\r\n    const checkNowText = () => {\r\n      if (lotteryIsNotClaimable) {\r\n        return `${t('Calculating rewards')}...`\r\n      }\r\n      if (isFetchingRewards) {\r\n        return t('Checking')\r\n      }\r\n      return t('Check Now')\r\n    }\r\n    return (\r\n      <Flex alignItems=\"center\" justifyContent=\"center\">\r\n        <TicketImage src=\"./images/lottery/ticket-l.png\" alt=\"lottery ticket\" />\r\n        <Flex mx={['4px', null, '16px']} flexDirection=\"column\">\r\n          <Heading textAlign=\"center\" color=\"#F4EEFF\" mb=\"24px\">\r\n            {t('Are you a winner?')}\r\n          </Heading>\r\n          <Button\r\n            className=\"primaryButton\"\r\n            disabled={isCheckNowDisabled}\r\n            onClick={fetchAllRewards}\r\n            isLoading={isFetchingRewards}\r\n            endIcon={isFetchingRewards ? <AutoRenewIcon color=\"currentColor\" spin /> : null}\r\n          >\r\n            {checkNowText()}\r\n          </Button>\r\n        </Flex>\r\n        <TicketImage src=\"./images/lottery/ticket-r.png\" alt=\"lottery ticket\" />\r\n      </Flex>\r\n    )\r\n  }\r\n\r\n  return <Flex>{getBody()}</Flex>\r\n}\r\n\r\nexport default CheckPrizesSection\r\n","import React from 'react'\r\nimport styled from 'styled-components'\r\nimport { Box, Flex, Text, Heading, useMatchBreakpoints, Link, Image } from '@pancakeswap/uikit'\r\nimport { useTranslation } from 'contexts/Localization'\r\nimport useTheme from 'hooks/useTheme'\r\nimport * as token from 'config/constants/tokens.lottery'\r\nimport { BallWithNumber, MatchExampleA, MatchExampleB, PoolAllocationChart } from '../svgs'\r\n\r\n\r\n// @ts-ignore\r\nconst numbersCount = window.SO_LotteryConfig.numbersCount\r\n\r\nconst Divider = styled.div`\r\n  background-color: ${({ theme }) => theme.colors.cardBorder};\r\n  height: 1px;\r\n  margin: 40px 0;\r\n  width: 100%;\r\n`\r\n\r\nconst BulletList = styled.ul`\r\n  list-style-type: none;\r\n  margin-left: 8px;\r\n  padding: 0;\r\n  li {\r\n    margin: 0;\r\n    padding: 0;\r\n  }\r\n  li::before {\r\n    content: '•';\r\n    margin-right: 4px;\r\n    color: ${({ theme }) => theme.colors.textSubtle};\r\n  }\r\n  li::marker {\r\n    font-size: 12px;\r\n  }\r\n`\r\n\r\nconst StepContainer = styled(Flex)`\r\n  gap: 24px;\r\n  width: 100%;\r\n  flex-direction: column;\r\n  ${({ theme }) => theme.mediaQueries.md} {\r\n    flex-direction: row;\r\n  }\r\n`\r\n\r\nconst StyledStepCard = styled(Box)`\r\n  display: flex;\r\n  align-self: baseline;\r\n  position: relative;\r\n  background: ${({ theme }) => theme.colors.cardBorder};\r\n  padding: 1px 1px 3px 1px;\r\n  border-radius: ${({ theme }) => theme.radii.card};\r\n`\r\n\r\nconst StepCardInner = styled(Box)`\r\n  width: 100%;\r\n  padding: 24px;\r\n  background: ${({ theme }) => theme.card.background};\r\n  border-radius: ${({ theme }) => theme.radii.card};\r\n`\r\n\r\ntype Step = { title: string; subtitle: string; label: string }\r\n\r\nconst StepCard: React.FC<{ step: Step }> = ({ step }) => {\r\n  return (\r\n    <StyledStepCard width=\"100%\">\r\n      <StepCardInner height={['200px', '180px', null, '200px']}>\r\n        <Text mb=\"16px\" fontSize=\"12px\" bold textAlign=\"right\" textTransform=\"uppercase\">\r\n          {step.label}\r\n        </Text>\r\n        <Heading mb=\"16px\" scale=\"lg\" color=\"secondary\">\r\n          {step.title}\r\n        </Heading>\r\n        <Text color=\"textSubtle\">{step.subtitle}</Text>\r\n      </StepCardInner>\r\n    </StyledStepCard>\r\n  )\r\n}\r\n\r\nconst BallsContainer = styled(Flex)`\r\n  gap: 6.5px;\r\n  padding-left: 7px;\r\n  align-items: center;\r\n  width: 100%;\r\n`\r\n\r\nconst InlineLink = styled(Link)`\r\n  display: inline;\r\n\r\n  &:hover, &;active, &:focus {\r\n    color: #1FC7D4;\r\n  }\r\n`\r\n\r\nconst ExampleBalls = () => {\r\n  const { isDesktop } = useMatchBreakpoints()\r\n  const ballSize = isDesktop ? '24px' : '32px'\r\n  const fontSize = isDesktop ? '14px' : '16px'\r\n  return (\r\n    <BallsContainer>\r\n      <BallWithNumber size={ballSize} fontSize={fontSize} color=\"yellow\" number=\"9\" />\r\n      <BallWithNumber size={ballSize} fontSize={fontSize} color=\"green\" number=\"1\" />\r\n      <BallWithNumber size={ballSize} fontSize={fontSize} color=\"aqua\" number=\"3\" />\r\n      <BallWithNumber size={ballSize} fontSize={fontSize} color=\"teal\" number=\"6\" />\r\n      <BallWithNumber size={ballSize} fontSize={fontSize} color=\"lilac\" number=\"6\" />\r\n      <BallWithNumber size={ballSize} fontSize={fontSize} color=\"pink\" number=\"2\" />\r\n    </BallsContainer>\r\n  )\r\n}\r\n\r\nconst MatchExampleContainer = styled.div`\r\n  height: 100%;\r\n  display: grid;\r\n  grid-template-columns: 1fr 5fr;\r\n  grid-template-rows: 46px 64px 64px;\r\n`\r\n\r\nconst MatchExampleCard = () => {\r\n  const { isDark } = useTheme()\r\n  const { isXs } = useMatchBreakpoints()\r\n  const { t } = useTranslation()\r\n  const exampleWidth = isXs ? '210px' : '258px'\r\n  return (\r\n    <StyledStepCard width={['280px', '330px', '380px']}>\r\n      <StepCardInner height=\"220px\">\r\n        <MatchExampleContainer>\r\n          <Box />\r\n          <ExampleBalls />\r\n          <Text lineHeight=\"72px\" textAlign=\"right\" color=\"secondary\" bold mr=\"20px\">\r\n            {t('A')}\r\n          </Text>\r\n          <MatchExampleA width={exampleWidth} height=\"46px\" isDark={isDark} />\r\n          <Text lineHeight=\"72px\" textAlign=\"right\" color=\"secondary\" bold mr=\"20px\">\r\n            {t('B')}\r\n          </Text>\r\n          <MatchExampleB width={exampleWidth} height=\"46px\" isDark={isDark} />\r\n        </MatchExampleContainer>\r\n      </StepCardInner>\r\n    </StyledStepCard>\r\n  )\r\n}\r\n\r\nconst AllocationGrid = styled.div`\r\n  display: grid;\r\n  grid-template-columns: 4fr 1fr;\r\n  grid-auto-rows: max-content;\r\n  row-gap: 4px;\r\n`\r\n\r\nconst AllocationColorCircle = styled.div<{ color: string }>`\r\n  border-radius: 50%;\r\n  width: 20px;\r\n  height: 20px;\r\n  margin-right: 8px;\r\n  background-color: ${({ color }) => color};\r\n`\r\n\r\nconst AllocationMatch: React.FC<{ color: string; text: string }> = ({ color, text }) => {\r\n  return (\r\n    <Flex alignItems=\"center\">\r\n      <AllocationColorCircle color={color} />\r\n      <Text color=\"textSubtle\">{text}</Text>\r\n    </Flex>\r\n  )\r\n}\r\n\r\nconst PoolAllocations = () => {\r\n  const { t } = useTranslation()\r\n  // @ts-ignore\r\n  const winPercents = window.SO_LotteryConfig.winPercents\r\n  // @ts-ignore\r\n  const numbersCount = window.SO_LotteryConfig.numbersCount\r\n  return (\r\n    <StyledStepCard width={['280px', '330px', '380px']}>\r\n      <StepCardInner height=\"auto\">\r\n        <Flex justifyContent=\"space-between\">\r\n          <Text fontSize=\"12px\" color=\"secondary\" bold textTransform=\"uppercase\">\r\n            {t('Digits matched')}\r\n          </Text>\r\n          <Text fontSize=\"12px\" color=\"secondary\" bold textAlign=\"right\" textTransform=\"uppercase\">\r\n            {t('Prize pool allocation')}\r\n          </Text>\r\n        </Flex>\r\n        <AllocationGrid>\r\n          {numbersCount >= 1 && (\r\n            <>\r\n              <AllocationMatch color=\"#FFE362\" text={t((numbersCount == 1) ? 'Matches all %digits%': 'Matches first %digits%', { digits: 1 })} />\r\n              <Text textAlign=\"right\" bold>\r\n                {parseFloat(winPercents.match_1.toFixed(2))}%\r\n              </Text>\r\n            </>\r\n          )}\r\n          {numbersCount >= 2 && (\r\n            <>\r\n              <AllocationMatch color=\"#85C54E\" text={t((numbersCount == 2) ? 'Matches all %digits%': 'Matches first %digits%', { digits:2 })} />\r\n              <Text textAlign=\"right\" bold>\r\n                {parseFloat(winPercents.match_2.toFixed(2))}%\r\n              </Text>\r\n            </>\r\n          )}\r\n          {numbersCount >= 3 && (\r\n            <>\r\n              <AllocationMatch color=\"#028E75\" text={t((numbersCount == 3) ? 'Matches all %digits%': 'Matches first %digits%', { digits: 3 })} />\r\n              <Text textAlign=\"right\" bold>\r\n                {parseFloat(winPercents.match_3.toFixed(2))}%\r\n              </Text>\r\n            </>\r\n          )}\r\n          {numbersCount >= 4 && (\r\n            <>\r\n              <AllocationMatch color=\"#36E8F5\" text={t((numbersCount == 4) ? 'Matches all %digits%': 'Matches first %digits%', { digits: 4 })} />\r\n              <Text textAlign=\"right\" bold>\r\n                {parseFloat(winPercents.match_4.toFixed(2))}%\r\n              </Text>\r\n            </>\r\n          )}\r\n          {numbersCount >= 5 && (\r\n            <>\r\n              <AllocationMatch color=\"#A881FC\" text={t((numbersCount == 5) ? 'Matches all %digits%': 'Matches first %digits%', { digits: 5 })} />\r\n              <Text textAlign=\"right\" bold>\r\n                {parseFloat(winPercents.match_5.toFixed(2))}%\r\n              </Text>\r\n            </>\r\n          )}\r\n          {numbersCount >= 6 && (\r\n            <>\r\n              <AllocationMatch color=\"#D750B2\" text={t((numbersCount == 6) ? 'Matches all %digits%': 'Matches first %digits%', { digits: 6 })} />\r\n              <Text textAlign=\"right\" bold>\r\n                {parseFloat(winPercents.match_6.toFixed(2))}%\r\n              </Text>\r\n            </>\r\n          )}\r\n          <AllocationMatch color=\"#BDC2C4\" text={t('Burn Pool')} />\r\n          <Text textAlign=\"right\" bold>\r\n            {parseFloat(winPercents.burn.toFixed(2))}%\r\n          </Text>\r\n        </AllocationGrid>\r\n      </StepCardInner>\r\n    </StyledStepCard>\r\n  )\r\n}\r\n\r\nconst GappedFlex = styled(Flex)`\r\n  gap: 24px;\r\n`\r\n\r\nconst HowToPlay: React.FC = () => {\r\n  const { t } = useTranslation()\r\n\r\n  const steps: Step[] = [\r\n    {\r\n      label: t('Step %number%', { number: 1 }),\r\n      title: t('Buy Tickets'),\r\n      subtitle: t('Prices are set when the round starts, equal to 5 USD in CAKE per ticket.'),\r\n    },\r\n    {\r\n      label: t('Step %number%', { number: 2 }),\r\n      title: t('Wait for the Draw'),\r\n      subtitle: t('There are two draws every day: one every 12 hours.'),\r\n    },\r\n    {\r\n      label: t('Step %number%', { number: 3 }),\r\n      title: t('Check for Prizes'),\r\n      subtitle: t('Once the round’s over, come back to the page and check to see if you’ve won!'),\r\n    },\r\n  ]\r\n  return (\r\n    <Box width=\"100%\">\r\n      <Flex mb=\"40px\" alignItems=\"center\" flexDirection=\"column\">\r\n        <Heading mb=\"24px\" scale=\"xl\" color=\"secondary\">\r\n          {t('How to Play')}\r\n        </Heading>\r\n        <Text textAlign=\"center\">\r\n          {t(\r\n            'If the digits on your tickets match the winning numbers in the correct order, you win a portion of the prize pool.',\r\n          )}\r\n        </Text>\r\n        <Text>{t('Simple!')}</Text>\r\n      </Flex>\r\n      <StepContainer>\r\n        {steps.map((step) => (\r\n          <StepCard key={step.label} step={step} />\r\n        ))}\r\n      </StepContainer>\r\n      <Divider />\r\n      <GappedFlex flexDirection={['column', 'column', 'column', 'row']}>\r\n        <Flex flex=\"2\" flexDirection=\"column\">\r\n          <Heading mb=\"24px\" scale=\"lg\" color=\"secondary\">\r\n            {t('Winning Criteria')}\r\n          </Heading>\r\n          <Heading mb=\"24px\" scale=\"md\">\r\n            {t('The digits on your ticket must match in the correct order to win.')}\r\n          </Heading>\r\n          <Text mb=\"16px\" color=\"textSubtle\">\r\n            {t('Here’s an example lottery draw, with two tickets, A and B.')}\r\n          </Text>\r\n          <BulletList>\r\n            <li>\r\n              <Text display=\"inline\" color=\"textSubtle\">\r\n                {t(\r\n                  'Ticket A: The first 3 digits and the last 2 digits match, but the 4th digit is wrong, so this ticket only wins a “Match first 3” prize.',\r\n                )}\r\n              </Text>\r\n            </li>\r\n            <li>\r\n              <Text display=\"inline\" color=\"textSubtle\">\r\n                {t(\r\n                  'Ticket B: Even though the last 5 digits match, the first digit is wrong, so this ticket doesn’t win a prize.',\r\n                )}\r\n              </Text>\r\n            </li>\r\n          </BulletList>\r\n          <Text mt=\"16px\" color=\"textSubtle\">\r\n            {t(\r\n              'Prize brackets don’t ‘stack’: if you match the first 3 digits in order, you’ll only win prizes from the ‘Match 3’ bracket, and not from ‘Match 1’ and ‘Match 2’.',\r\n            )}\r\n          </Text>\r\n        </Flex>\r\n        <Flex flex=\"1\" justifyContent=\"center\">\r\n          {/*<MatchExampleCard />*/}\r\n          <PoolAllocations />\r\n        </Flex>\r\n      </GappedFlex>\r\n      <Divider />\r\n      <GappedFlex flexDirection={['column', 'column', 'column', 'row']}>\r\n        {/*\r\n        <Flex flex=\"2\" flexDirection=\"column\">\r\n          <Heading mb=\"24px\" scale=\"lg\" color=\"secondary\">\r\n            {t('Prize Funds')}\r\n          </Heading>\r\n          <Text color=\"textSubtle\">{t('The prizes for each lottery round come from three sources:')}</Text>\r\n          <Heading my=\"16px\" scale=\"md\">\r\n            {t('Ticket Purchases')}\r\n          </Heading>\r\n          <BulletList>\r\n            <li>\r\n              <Text display=\"inline\" color=\"textSubtle\">\r\n                {t('100% of the CAKE paid by people buying tickets that round goes back into the prize pools.')}\r\n              </Text>\r\n            </li>\r\n          </BulletList>\r\n          <Heading my=\"16px\" scale=\"md\">\r\n            {t('Rollover Prizes')}\r\n          </Heading>\r\n          <BulletList>\r\n            <li>\r\n              <Text display=\"inline\" color=\"textSubtle\">\r\n                {t(\r\n                  'After every round, if nobody wins in one of the prize brackets, the unclaimed CAKE for that bracket rolls over into the next round and are redistributed among the prize pools.',\r\n                )}\r\n              </Text>\r\n            </li>\r\n          </BulletList>\r\n          <Heading my=\"16px\" scale=\"md\">\r\n            {t('CAKE Injections')}\r\n          </Heading>\r\n          <BulletList>\r\n            <li>\r\n              <Text display=\"inline\" color=\"textSubtle\">\r\n                {t(\r\n                  'An average total of 35,000 CAKE from the treasury is added to lottery rounds over the course of a week. This CAKE is of course also included in rollovers! Read more in our guide to ',\r\n                )}\r\n                <InlineLink className='inlineLink' href=\"https://docs.pancakeswap.finance/tokenomics/cake/cake-tokenomics\">\r\n                  {t('CAKE Tokenomics')}\r\n                </InlineLink>\r\n              </Text>\r\n            </li>\r\n          </BulletList>\r\n        </Flex>\r\n        */}\r\n        {/*\r\n        <Flex flex=\"1\" justifyContent=\"center\">\r\n          <PoolAllocations />\r\n        </Flex>\r\n        */}\r\n      </GappedFlex>\r\n    </Box>\r\n  )\r\n}\r\n\r\nexport default HowToPlay\r\n","import { useWeb3React } from '@web3-react/core'\r\nimport { useState } from 'react'\r\nimport { useAppDispatch } from 'state'\r\nimport { fetchAdditionalUserLotteries } from 'state/lottery'\r\nimport { MAX_USER_LOTTERIES_REQUEST_SIZE } from 'state/lottery/getUserLotteryData'\r\n\r\nconst useShowMoreUserRounds = () => {\r\n  const { account } = useWeb3React()\r\n  const dispatch = useAppDispatch()\r\n  const [numUserRoundsRequested, setNumUserRoundsRequested] = useState(MAX_USER_LOTTERIES_REQUEST_SIZE)\r\n\r\n  const handleShowMoreUserRounds = () => {\r\n    dispatch(fetchAdditionalUserLotteries({ account, skip: numUserRoundsRequested }))\r\n    setNumUserRoundsRequested(numUserRoundsRequested + MAX_USER_LOTTERIES_REQUEST_SIZE)\r\n  }\r\n\r\n  return { numUserRoundsRequested, handleShowMoreUserRounds }\r\n}\r\n\r\nexport default useShowMoreUserRounds\r\n","import React, { useState, useEffect } from 'react'\r\nimport styled from 'styled-components'\r\nimport { Box, Flex, Heading, Skeleton } from '@pancakeswap/uikit'\r\nimport { LotteryStatus } from 'config/constants/types'\r\nimport PageSection from 'components/PageSection'\r\nimport { useTranslation } from 'contexts/Localization'\r\nimport useTheme from 'hooks/useTheme'\r\nimport { useFetchLottery, useLottery } from 'state/lottery/hooks'\r\nimport {\r\n  TITLE_BG,\r\n  GET_TICKETS_BG,\r\n  FINISHED_ROUNDS_BG,\r\n  FINISHED_ROUNDS_BG_DARK,\r\n  CHECK_PRIZES_BG,\r\n} from './pageSectionStyles'\r\nimport useGetNextLotteryEvent from './hooks/useGetNextLotteryEvent'\r\nimport useStatusTransitions from './hooks/useStatusTransitions'\r\nimport Hero from './components/Hero'\r\nimport NextDrawCard from './components/NextDrawCard'\r\nimport Countdown from './components/Countdown'\r\nimport HistoryTabMenu from './components/HistoryTabMenu'\r\nimport YourHistoryCard from './components/YourHistoryCard'\r\nimport AllHistoryCard from './components/AllHistoryCard'\r\nimport CheckPrizesSection from './components/CheckPrizesSection'\r\nimport HowToPlay from './components/HowToPlay'\r\nimport useShowMoreUserHistory from './hooks/useShowMoreUserRounds'\r\n\r\nconst LotteryPage = styled.div`\r\n  min-height: calc(100vh - 64px);\r\n`\r\n\r\nconst Lottery = () => {\r\n  useFetchLottery()\r\n  useStatusTransitions()\r\n  const { t } = useTranslation()\r\n  const { isDark, theme } = useTheme()\r\n  const {\r\n    currentRound: { status, endTime },\r\n  } = useLottery()\r\n  const [historyTabMenuIndex, setHistoryTabMenuIndex] = useState(0)\r\n\r\n  const endTimeAsInt = parseInt(endTime, 10)\r\n  const { nextEventTime, postCountdownText, preCountdownText } = useGetNextLotteryEvent(endTimeAsInt, status)\r\n  const { numUserRoundsRequested, handleShowMoreUserRounds } = useShowMoreUserHistory()\r\n\r\n  return (\r\n    <LotteryPage>\r\n      <PageSection background={TITLE_BG} index={1} hasCurvedDivider={false}>\r\n        <Hero />\r\n      </PageSection>\r\n      <PageSection\r\n        containerProps={{ style: { marginTop: '-30px' } }}\r\n        background={GET_TICKETS_BG}\r\n        concaveDivider\r\n        clipFill={{ light: '#7645D9' }}\r\n        dividerPosition=\"top\"\r\n        index={2}\r\n      >\r\n        <Flex alignItems=\"center\" justifyContent=\"center\" flexDirection=\"column\" pt=\"24px\">\r\n          {status === LotteryStatus.OPEN && (\r\n            <Heading scale=\"xl\" color=\"#ffffff\" mb=\"24px\" textAlign=\"center\">\r\n              {t('Get your tickets now!')}\r\n            </Heading>\r\n          )}\r\n          <Flex alignItems=\"center\" justifyContent=\"center\" mb=\"48px\">\r\n            {nextEventTime && (postCountdownText || preCountdownText) ? (\r\n              <Countdown\r\n                nextEventTime={nextEventTime}\r\n                postCountdownText={postCountdownText}\r\n                preCountdownText={preCountdownText}\r\n              />\r\n            ) : (\r\n              <Skeleton height=\"41px\" width=\"250px\" />\r\n            )}\r\n          </Flex>\r\n          <NextDrawCard />\r\n        </Flex>\r\n      </PageSection>\r\n      <PageSection background={CHECK_PRIZES_BG} hasCurvedDivider={false} index={2}>\r\n        <CheckPrizesSection />\r\n      </PageSection>\r\n      <PageSection\r\n        innerProps={{ style: { margin: '0', width: '100%' } }}\r\n        background={isDark ? FINISHED_ROUNDS_BG_DARK : FINISHED_ROUNDS_BG}\r\n        hasCurvedDivider={false}\r\n        index={2}\r\n      >\r\n        <Flex width=\"100%\" flexDirection=\"column\" alignItems=\"center\" justifyContent=\"center\">\r\n          <Heading mb=\"24px\" scale=\"xl\">\r\n            {t('Finished Rounds')}\r\n          </Heading>\r\n          <Box mb=\"24px\">\r\n            <HistoryTabMenu\r\n              activeIndex={historyTabMenuIndex}\r\n              setActiveIndex={(index) => setHistoryTabMenuIndex(index)}\r\n            />\r\n          </Box>\r\n          {historyTabMenuIndex === 0 ? (\r\n            <AllHistoryCard />\r\n          ) : (\r\n            <YourHistoryCard\r\n              handleShowMoreClick={handleShowMoreUserRounds}\r\n              numUserRoundsRequested={numUserRoundsRequested}\r\n            />\r\n          )}\r\n        </Flex>\r\n      </PageSection>\r\n      <PageSection\r\n        dividerPosition=\"top\"\r\n        dividerFill={{ light: theme.colors.background }}\r\n        clipFill={{ light: '#9A9FD0', dark: '#66578D' }}\r\n        index={2}\r\n      >\r\n        <HowToPlay />\r\n      </PageSection>\r\n    </LotteryPage>\r\n  )\r\n}\r\n\r\nexport default Lottery\r\n","export const TITLE_BG = 'linear-gradient(180deg, #7645D9 0%, #452A7A 100%)'\r\nexport const GET_TICKETS_BG = 'linear-gradient(180deg, #7645D9 0%, #5121B1 100%)'\r\nexport const CHECK_PRIZES_BG = 'linear-gradient(139.73deg, #313D5C 0%, #3D2A54 100%)'\r\nexport const FINISHED_ROUNDS_BG = 'linear-gradient(180deg, #CBD7EF 0%, #9A9FD0 100%)'\r\nexport const FINISHED_ROUNDS_BG_DARK = 'linear-gradient(180deg, #434575 0%, #66578D 100%)'\r\n"],"sourceRoot":""}